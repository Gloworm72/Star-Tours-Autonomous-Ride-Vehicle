// =======================================================================================
//                     Starting Sketch for Notre Dame Droid Class
// =======================================================================================
//                          Last Revised Date: 09/04/2024
//                             Revised By: Prof McLaughlin
// =======================================================================================
// ---------------------------------------------------------------------------------------
//                          Libraries
// ---------------------------------------------------------------------------------------
#include <PS3BT.h>
#include <usbhub.h>
#include <Sabertooth.h>
#include <Adafruit_TLC5947.h>
#include <MP3Trigger.h>
#include <Servo.h> 
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <Adafruit_ImageReader.h>
#include <SdFat.h>
#include <Adafruit_NeoPixel.h> // For NeoPixels
// ---------------------------------------------------------------------------------------
//                 Setup for USB, Bluetooth Dongle, & PS3 Controller
// ---------------------------------------------------------------------------------------
USB Usb;
BTD Btd(&Usb);
PS3BT *PS3Controller=new PS3BT(&Btd);

// ---------------------------------------------------------------------------------------
//    Used for PS3 Fault Detection
// ---------------------------------------------------------------------------------------
uint32_t msgLagTime = 0;
uint32_t lastMsgTime = 0;
uint32_t lastLoopTime = 0;
int badPS3Data = 0;
byte joystickDeadZoneRange = 15;

boolean isPS3ControllerInitialized = false;
boolean mainControllerConnected = false;
boolean WaitingforReconnect = false;
boolean isFootMotorStopped = true;

// ---------------------------------------------------------------------------------------
//    Used for PS3 Controller Request Management
// ---------------------------------------------------------------------------------------
long previousRequestMillis = millis();
boolean extraRequestInputs = false;

// ---------------------------------------------------------------------------------------
//    Request State Machine Variables for PS3 Controller
// ---------------------------------------------------------------------------------------

// Main state variable to determine if a request has been made by the PS3 Controller
boolean reqMade = false;
boolean reqLeftJoyMade = false;
boolean reqRightJoyMade = false;

// LEFT & RIGHT Joystick State Request Values
boolean reqLeftJoyUp = false;
boolean reqLeftJoyDown = false;
int reqLeftJoyYValue = 0;

boolean reqLeftJoyLeft = false;
boolean reqLeftJoyRight = false;
int reqLeftJoyXValue = 0;

boolean reqRightJoyUp = false;
boolean reqRightJoyDown = false;
int reqRightJoyYValue = 0;

boolean reqRightJoyLeft = false;
boolean reqRightJoyRight = false;
int reqRightJoyXValue = 0;

// PS3 Controller Button State Variables
boolean reqArrowUp = false;
boolean reqArrowDown = false;
boolean reqArrowLeft = false;
boolean reqArrowRight = false;
boolean reqCircle = false;
boolean reqCross = false;
boolean reqTriangle = false;
boolean reqSquare = false;
boolean reqL1 = false;
boolean reqL2 = false;
boolean reqR1 = false;
boolean reqR2 = false;
boolean reqSelect = false;
boolean reqStart = false;
boolean reqPS = false;

// ---------------------------------------------------------------------------------------
//    Used for Pin 13 Main Loop Blinker
// ---------------------------------------------------------------------------------------
long blinkMillis = millis();
boolean blinkOn = false;

// ---------------------------------------------------------------------------------------
//    Timer Controller Variable
// ---------------------------------------------------------------------------------------
long currentTime = millis();

// ---------------------------------------------------------------------------------------
//    Servo Controller Variable
// ---------------------------------------------------------------------------------------
//Servo myServo;
//long servoMillis = millis;
//int currentServoPosition = 0;
//boolean servoRoutineInitialized = false;
//boolean servoMoving = false;

// ---------------------------------------------------------------------------------------
//    Motor Controller
// ---------------------------------------------------------------------------------------

int driveDeadBandRange = 10;
#define SABERTOOTH_ADDR 128
Sabertooth *ST=new Sabertooth(SABERTOOTH_ADDR, Serial1); //TX1 â€“ Pin#18

float currentSpeed = 0;
boolean droidMoving = false;

// Ramping variables
float targetSpeed = 0;
float targetTurn = 0;
float currentTurn = 0;
float rampStep = 1;  // Adjust step size for smoothness (lower for smoother, higher for faster response)

// ---------------------------------------------------------------------------------------
//    Color sensor
// ---------------------------------------------------------------------------------------
#define s0 30 // s0 on PIN #30
#define s1 28 // s1 0n PIN #28
#define s2 26 // s2 on PIN #26
#define s3 24 // s3 on PIN #24
#define LED 34 // LED on PIN #34
#define out 22 // out on PIN #22
int rValue = 0;
int bValue = 0;
int gValue = 0;
int data=0;
int currentColor=2; //0= UNKNOWN, 1=RED, 2=BLUE, 3=GREEN\

// ---------------------------------------------------------------------------------------
//    Drive Mode
// ---------------------------------------------------------------------------------------
boolean autoMode = false;

// ---------------------------------------------------------------------------------------
//    Sound Amb
// ---------------------------------------------------------------------------------------
MP3Trigger MP3Trigger;
//long manSoundTime = millis();
int soundNum;
int maxAmbient = 20;
//long ManSoundLengths[5] = {7000,1000,2000, 28000, 21000};
long ManSoundLengths[24] = {1000,2000,1000,18600,20000,20000,20000,45000,30000,30000,25000,40000,40000,30000,40000,45000,60000,45000,45000,45000,35000, 87693, 92421, 96070};
int ambientStarNum = 5;
long songLengthBreak = millis();
long songLength;
boolean playNew = true;
//long randBreak;
boolean ambientFlag = false;

// ---------------------------------------------------------------------------------------
//    Sound Auto
// ---------------------------------------------------------------------------------------
long blueTimer = millis();
long redTimer = millis();
long greenTimer = millis();
boolean firstRedTime = true;
boolean firstBlueTime = true;
boolean firstGreenTime = true;
long celebrationTimer = millis();
long previousColorDet = millis();
long moveAutoTimer = millis();

// ---------------------------------------------------------------------------------------
//    Sound Startup
// ---------------------------------------------------------------------------------------
boolean startUp = true;
long startUpTimer = millis();
boolean PlayStartSound = true;

// ---------------------------------------------------------------------------------------
//    TFT Display
// ---------------------------------------------------------------------------------------
#include <Adafruit_GFX.h> // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <SPI.h>
#define TFT_CS 10
#define TFT_RST 9
#define TFT_DC 8
#define USE_SD_CARD
#define SD_CS 7
#if defined(USE_SD_CARD)
  SdFat                SD;         // SD card filesystem
  Adafruit_ImageReader reader(SD); // Image-reader object, pass in SD filesys
#else
  // SPI or QSPI flash filesystem (i.e. CIRCUITPY drive)
#if defined(__SAMD51__) || defined(NRF52840_XXAA)
    Adafruit_FlashTransport_QSPI flashTransport(PIN_QSPI_SCK, PIN_QSPI_CS,
      PIN_QSPI_IO0, PIN_QSPI_IO1, PIN_QSPI_IO2, PIN_QSPI_IO3);
#else
  #if (SPI_INTERFACES_COUNT == 1)
      Adafruit_FlashTransport_SPI flashTransport(SS, &SPI);
    #else
      Adafruit_FlashTransport_SPI flashTransport(SS1, &SPI1);
    #endif
  #endif
  Adafruit_SPIFlash    flash(&flashTransport);
  FatVolume        filesys;
  Adafruit_ImageReader reader(filesys); // Image-reader, pass in flash filesys
#endif

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
Adafruit_Image img;

int32_t              width  = 0, // BMP image dimensions
                     height = 0;


const uint8_t epd_bitmap_Star_Tours_logo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x79, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x71, 0x8f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe1, 0x87, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe1, 0x87, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xc1, 0x83, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x81, 0x81, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x85, 0xa1, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x05, 0xe0, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0x07, 0xe0, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x07, 0xe0, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x07, 0xe0, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x0f, 0xf0, 0x1e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x70, 0x0b, 0xd0, 0x0e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x0b, 0xd0, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe0, 0x0b, 0xd8, 0x07, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xc0, 0x1b, 0xd8, 0x03, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0x17, 0xe8, 0x03, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x80, 0x17, 0xe8, 0x01, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x00, 0x37, 0xec, 0x00, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x00, 0x37, 0xec, 0x00, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x00, 0x67, 0xe6, 0x00, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x00, 0x67, 0xe6, 0x00, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7c, 0x00, 0xc6, 0x63, 0x00, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0xc6, 0x73, 0x00, 0x1e, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x01, 0xce, 0x71, 0x80, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xf0, 0x03, 0x8e, 0x71, 0xc0, 0x0f, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xe0, 0x07, 0x9e, 0x78, 0xe0, 0x07, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0x07, 0x1e, 0x78, 0xe0, 0x03, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 0x0e, 0x1c, 0x38, 0x70, 0x01, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xef, 0x80, 0x1e, 0x3c, 0x3c, 0x78, 0x01, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xde, 0x00, 0x78, 0x7c, 0x3e, 0x1e, 0x00, 0x7b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xf0, 0x7c, 0x3e, 0x0f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xde, 0x03, 0xe0, 0xf8, 0x1f, 0x07, 0xc0, 0x7b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0xc0, 0x00, 0x00, 0x0e, 0x03, 0xf8, 0x00, 0x07, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0x00, 0x00, 0x00, 0x0c, 0x03, 0xf8, 0x00, 0x01, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0x00, 0x00, 0x00, 0x0c, 0x01, 0xf8, 0x00, 0x01, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x00, 0x00, 0x00, 0x0c, 0x01, 0xf8, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x00, 0x00, 0x00, 0x0c, 0x01, 0xf8, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x00, 0xff, 0x03, 0xf8, 0x00, 0xf8, 0x0f, 0xc0, 0x6f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x00, 0xff, 0x03, 0xf8, 0x00, 0xf8, 0x0f, 0xe0, 0x6f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0x00, 0x7f, 0x03, 0xf8, 0x00, 0xf8, 0x0f, 0xe0, 0x6f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0x00, 0x3f, 0x03, 0xf0, 0x20, 0x78, 0x0f, 0x00, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x03, 0x80, 0x1f, 0x03, 0xf0, 0x20, 0x78, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0xff, 0xc0, 0x0f, 0x03, 0xf0, 0x70, 0x38, 0x00, 0x01, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0xe0, 0x07, 0x03, 0xe0, 0x70, 0x38, 0x00, 0x03, 0xff, 0xef, 0xff, 0xff, 
  0xff, 0xff, 0xe7, 0xff, 0xf0, 0x07, 0x03, 0xe0, 0x00, 0x38, 0x00, 0x07, 0xff, 0xf7, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xff, 0xf8, 0x03, 0x03, 0xe0, 0x00, 0x38, 0x00, 0x07, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0x80, 0x00, 0x03, 0x03, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7b, 0xff, 0xff, 
  0xff, 0xff, 0xbf, 0x00, 0x00, 0x03, 0x03, 0xc0, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x3d, 0xff, 0xff, 
  0xff, 0xff, 0x7e, 0x00, 0x00, 0x07, 0x03, 0x80, 0x00, 0x08, 0x0e, 0x00, 0x00, 0x1e, 0xff, 0xff, 
  0xff, 0xff, 0x7e, 0x00, 0x00, 0x07, 0x03, 0x80, 0xf8, 0x08, 0x0f, 0x00, 0x00, 0x1e, 0x7f, 0xff, 
  0xff, 0xfe, 0xfc, 0x00, 0x00, 0x0f, 0x03, 0x81, 0xfc, 0x08, 0x0f, 0x80, 0x00, 0x0f, 0x7f, 0xff, 
  0xff, 0xfd, 0xfc, 0x00, 0x00, 0x3f, 0x03, 0x81, 0xfc, 0x08, 0x0f, 0xe0, 0x00, 0x07, 0xbf, 0xff, 
  0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 
  0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 
  0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 
  0xff, 0xef, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0xdf, 0x80, 0x00, 0x1f, 0x00, 0x7f, 0x01, 0xe0, 0x30, 0x00, 0x1f, 0xf0, 0x00, 0xfb, 0xff, 
  0xff, 0xbf, 0x00, 0x00, 0x1c, 0x00, 0x1f, 0x01, 0xe0, 0x30, 0x00, 0x07, 0xe0, 0x00, 0x7d, 0xff, 
  0xff, 0x7e, 0x00, 0x00, 0x18, 0x00, 0x0f, 0x01, 0xe0, 0x30, 0x00, 0x03, 0xc0, 0x00, 0x3e, 0xff, 
  0xff, 0x7e, 0x00, 0x00, 0x10, 0x00, 0x07, 0x01, 0xe0, 0x30, 0x00, 0x03, 0xc0, 0x00, 0x1e, 0x7f, 
  0xfe, 0xfc, 0x00, 0x00, 0x10, 0x00, 0x07, 0x01, 0xe0, 0x30, 0x00, 0x01, 0x80, 0x00, 0x1f, 0x7f, 
  0xfd, 0xff, 0xf8, 0x0f, 0xe0, 0x1c, 0x03, 0x01, 0xe0, 0x30, 0x3f, 0x81, 0x80, 0x3f, 0xff, 0xbf, 
  0xf9, 0xff, 0xf8, 0x0f, 0xe0, 0x7e, 0x03, 0x01, 0xe0, 0x30, 0x3f, 0x81, 0x80, 0x3f, 0xff, 0xdf, 
  0xfb, 0xff, 0xf8, 0x0f, 0xc0, 0x7f, 0x03, 0x01, 0xe0, 0x30, 0x3f, 0x81, 0xc0, 0x1f, 0xff, 0xdf, 
  0xf0, 0x00, 0x38, 0x0f, 0xc0, 0xff, 0x83, 0x01, 0xe0, 0x30, 0x3f, 0x01, 0xe0, 0x0f, 0xe6, 0x1f, 
  0xff, 0xff, 0xb8, 0x0f, 0xc0, 0xff, 0x83, 0x01, 0xe0, 0x30, 0x00, 0x03, 0xe0, 0x07, 0xef, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xc0, 0xff, 0x83, 0x01, 0xe0, 0x30, 0x00, 0x03, 0xf0, 0x03, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xc0, 0x7f, 0x03, 0x01, 0xe0, 0x30, 0x00, 0x07, 0xfc, 0x01, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xe0, 0x7f, 0x03, 0x01, 0xe0, 0x30, 0x00, 0x1f, 0xfe, 0x00, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xe0, 0x1c, 0x03, 0x01, 0xc0, 0x70, 0x00, 0x0f, 0xfe, 0x00, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xf0, 0x00, 0x07, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xf0, 0x00, 0x07, 0x80, 0x00, 0x70, 0x30, 0x00, 0x00, 0x00, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0xf0, 0x38, 0x00, 0x00, 0x01, 0xf7, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0xfc, 0x00, 0x1f, 0xe0, 0x01, 0xf0, 0x3c, 0x00, 0x00, 0x01, 0xef, 0xff, 
  0xff, 0xff, 0xb8, 0x0f, 0x7f, 0x00, 0x7b, 0xf0, 0x03, 0xf0, 0x3e, 0x00, 0x00, 0x03, 0xef, 0xff, 
  0xff, 0xff, 0xbc, 0x1f, 0x3f, 0xc1, 0xf1, 0xfc, 0x0f, 0x70, 0x3f, 0x80, 0x00, 0x0f, 0xdf, 0xff, 
  0xff, 0xff, 0xbf, 0xff, 0x4f, 0xff, 0xee, 0x7f, 0xfe, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xbf, 0xff, 
  0xff, 0xff, 0xbf, 0xff, 0x63, 0xff, 0x9f, 0x3f, 0xfd, 0x7f, 0xf9, 0xff, 0xff, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0x9f, 0xfe, 0x78, 0x78, 0x7f, 0xc7, 0xe3, 0x3f, 0xf2, 0xff, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const uint8_t stormTrooper[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfe, 0x00, 0x00, 0x3f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x00, 0x07, 0xf0, 0x00, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xf0, 0x00, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xf8, 0x00, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xfc, 0x00, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xc0, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0xff, 0xff, 0xff, 0xff, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0xff, 0xff, 0xff, 0xff, 0x8d, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0x7f, 0xff, 0xff, 0xff, 0x0d, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0x1e, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x8f, 0xf8, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x1f, 0xfc, 0x3f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfc, 0x3f, 0xfe, 0x1f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xef, 0xf8, 0x7f, 0xff, 0x07, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf0, 0xff, 0xff, 0x83, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfc, 0x0f, 0xe3, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf7, 0xf8, 0x07, 0xf7, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf0, 0x03, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xfc, 0x0f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf3, 0xfc, 0x0f, 0xf7, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xc0, 0xf8, 0x0f, 0x81, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0x78, 0x07, 0x03, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x30, 0x06, 0x03, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xe0, 0x30, 0x02, 0x03, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x60, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0x03, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf0, 0x07, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc0, 0x09, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x0c, 0x18, 0x7e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

  // 'Darth Vader', 128x180px
const unsigned char DarthVader [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xc7, 0xf3, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xc7, 0xf3, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xc7, 0xf3, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xc7, 0xf3, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xc7, 0xf3, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x87, 0xf1, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xfe, 0x07, 0xf1, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xf8, 0x07, 0xf0, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xe0, 0x07, 0xf0, 0x07, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xc0, 0x07, 0xf0, 0x00, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xe0, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc7, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x03, 0xc0, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x1f, 0xe0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x3f, 0xc0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x7f, 0x80, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x7f, 0x80, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0xff, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x43, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0xfb, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x63, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0xf9, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x61, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xe0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xe0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc7, 0xe0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc7, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc7, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x8f, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x8f, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x8f, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9f, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0x80, 0x3f, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3e, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0x83, 0xff, 0xe0, 0x0f, 0xf0, 0x00, 0x0f, 0x00, 0x1e, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0x8f, 0xff, 0xf8, 0x0f, 0xf0, 0x03, 0xff, 0xe0, 0x1e, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x0f, 0xff, 0xf8, 0x1f, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0x3f, 0xff, 0xfe, 0x1f, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x7f, 0xff, 0xff, 0x1f, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x8f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xfb, 0xff, 0xcf, 0xf3, 0xfe, 0x00, 0x7f, 0xff, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x7f, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xff, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x7f, 0xc0, 0x3f, 0x01, 0xff, 0xff, 0x01, 0xfe, 0x00, 0xff, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x7f, 0x80, 0xff, 0xe0, 0xff, 0xff, 0x0f, 0xff, 0xc0, 0x7f, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0x03, 0xff, 0xf0, 0x7f, 0xe4, 0x1f, 0x1f, 0xe0, 0x3f, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7e, 0x07, 0xc0, 0x1c, 0x03, 0x80, 0x20, 0x00, 0xf8, 0x1f, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7c, 0x0f, 0x00, 0x06, 0x00, 0x00, 0xc0, 0x00, 0x7c, 0x0f, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7c, 0x1c, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00, 0x1c, 0x07, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x78, 0x38, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x0e, 0x07, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x70, 0x70, 0x00, 0x00, 0x3c, 0x38, 0x00, 0x00, 0x07, 0x03, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x70, 0x60, 0x00, 0x00, 0x3c, 0x78, 0x00, 0x00, 0x03, 0x03, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xe0, 0xe0, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x03, 0x81, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x81, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xef, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x81, 0x80, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0x83, 0x80, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0xc0, 0x77, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x00, 0xc0, 0x77, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0x03, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0x03, 0x00, 0x00, 0x00, 0x0d, 0xf0, 0x00, 0x04, 0x00, 0xc0, 0x3b, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x03, 0x03, 0xe0, 0x00, 0x0f, 0xf0, 0x00, 0x0e, 0x00, 0xc0, 0x3b, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x03, 0x03, 0xe0, 0x00, 0x0c, 0x30, 0x00, 0x0f, 0x00, 0xc0, 0x1b, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x07, 0x03, 0xf0, 0x00, 0x0c, 0x30, 0x00, 0x0f, 0x80, 0xc0, 0x1d, 0xff, 0xff, 
  0xff, 0xff, 0xec, 0x07, 0x03, 0xf0, 0x00, 0x0c, 0xf0, 0x00, 0x0f, 0xc0, 0xc0, 0x1d, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x07, 0x03, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xc0, 0xc0, 0x0d, 0xff, 0xff, 
  0xff, 0xff, 0xdc, 0x03, 0x03, 0xfc, 0x00, 0x1c, 0x10, 0x00, 0x1f, 0xc0, 0xc0, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xd8, 0x03, 0x83, 0xfc, 0x00, 0x18, 0x08, 0x00, 0x3f, 0xc1, 0xc0, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xd8, 0x03, 0x81, 0xf8, 0x0c, 0x38, 0x08, 0x00, 0x3f, 0xc1, 0x80, 0x0e, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x03, 0xc0, 0xf0, 0x18, 0x38, 0x04, 0x00, 0x7f, 0x81, 0x80, 0x06, 0xff, 0xff, 
  0xff, 0xff, 0xb0, 0x01, 0xc0, 0x00, 0x00, 0x70, 0x06, 0x00, 0xff, 0x83, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xb0, 0x01, 0xf0, 0x00, 0x00, 0xd0, 0x06, 0x00, 0x1e, 0x07, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0xf8, 0x00, 0x03, 0x90, 0x07, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x7f, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x3e, 0x00, 0x07, 0x10, 0x04, 0x80, 0x00, 0x1c, 0x00, 0x03, 0x7f, 0xff, 
  0xff, 0xff, 0x60, 0x00, 0x07, 0xe0, 0x7c, 0x01, 0xe0, 0x60, 0x00, 0x38, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0x60, 0x00, 0x07, 0xff, 0xf0, 0x07, 0xf8, 0x3c, 0x01, 0xc0, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xc0, 0x0c, 0x18, 0x1f, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x03, 0xfc, 0x00, 0x18, 0x0c, 0x0f, 0xff, 0x80, 0x00, 0x01, 0xbf, 0xff, 
  0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x90, 0x45, 0x03, 0xff, 0x80, 0x00, 0x01, 0xbf, 0xff, 
  0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xb0, 0x45, 0xc0, 0x7f, 0x80, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0x30, 0x62, 0xf0, 0x01, 0x00, 0x00, 0x01, 0xdf, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0x60, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xff, 
  0xff, 0xfd, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0xe0, 0x63, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xff, 
  0xff, 0xfd, 0x80, 0x00, 0x07, 0xff, 0xfc, 0xe0, 0x61, 0xbf, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xfd, 0x80, 0x00, 0x7f, 0xff, 0xf9, 0xc0, 0x61, 0x9f, 0xf0, 0x00, 0x00, 0x00, 0xef, 0xff, 
  0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xf9, 0xc0, 0x41, 0xcf, 0xfc, 0x00, 0x00, 0x00, 0x6f, 0xff, 
  0xff, 0xfb, 0x00, 0x05, 0xff, 0xff, 0xf3, 0xc3, 0xe2, 0xc7, 0xff, 0x80, 0x00, 0x00, 0x6f, 0xff, 
  0xff, 0xff, 0x00, 0x06, 0xff, 0xff, 0xf3, 0xc7, 0xf8, 0xe7, 0xff, 0xff, 0x20, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0x00, 0x07, 0x7f, 0xff, 0xe7, 0xc7, 0xf9, 0xe3, 0xff, 0xff, 0x60, 0x00, 0x7f, 0xff, 
  0xff, 0xfe, 0x00, 0x03, 0xbf, 0xff, 0xe7, 0x80, 0x01, 0xf1, 0xff, 0xff, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0xf6, 0x00, 0x01, 0xbf, 0xff, 0xcf, 0x80, 0x01, 0x79, 0xff, 0xfe, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0xf6, 0x00, 0x00, 0xdf, 0xff, 0x8f, 0x00, 0x00, 0xf8, 0xff, 0xfd, 0x80, 0x00, 0x37, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0xef, 0xff, 0x9f, 0x00, 0x00, 0xbc, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0x1e, 0x00, 0x00, 0xbc, 0x7f, 0xfb, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xec, 0x00, 0x00, 0x3f, 0xff, 0x3e, 0x00, 0x00, 0x5e, 0x7f, 0xff, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xec, 0x00, 0x00, 0x1b, 0xfe, 0x3c, 0x00, 0x00, 0x6e, 0x3f, 0xf6, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x1d, 0xfe, 0x3c, 0x00, 0x00, 0x2f, 0x3f, 0xfe, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xd8, 0x00, 0x00, 0x0d, 0xfc, 0x78, 0x00, 0x00, 0x17, 0x1f, 0xec, 0x00, 0x00, 0x0d, 0xff, 
  0xff, 0xd8, 0x00, 0x00, 0x06, 0xfc, 0x70, 0x00, 0x40, 0x17, 0x9f, 0xfc, 0x00, 0x00, 0x0d, 0xff, 
  0xff, 0xd8, 0x00, 0x00, 0x07, 0x7c, 0xf0, 0x00, 0x40, 0x0b, 0x8f, 0xd8, 0x00, 0x00, 0x0d, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x03, 0x78, 0xe0, 0x00, 0x40, 0xcb, 0xcf, 0xf8, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xb0, 0x00, 0x00, 0x01, 0xb8, 0xe0, 0x00, 0x40, 0xc5, 0xc7, 0xb0, 0x00, 0x00, 0x06, 0xff, 
  0xff, 0xb0, 0x00, 0x00, 0x01, 0xd1, 0xc0, 0x20, 0x60, 0xe7, 0xe7, 0xb0, 0x00, 0x00, 0x06, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0xd1, 0x80, 0x30, 0x7f, 0xe2, 0xe3, 0xe0, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0xe3, 0x80, 0x30, 0x7f, 0xf3, 0xf3, 0x60, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0x60, 0x00, 0x00, 0x00, 0x63, 0x00, 0x30, 0xff, 0xf1, 0x71, 0xc0, 0x00, 0x00, 0x03, 0x7f, 
  0xff, 0x60, 0x00, 0x00, 0x00, 0x27, 0x00, 0x3b, 0xff, 0xf8, 0xf8, 0xc0, 0x00, 0x00, 0x03, 0x7f, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0x00, 0x3f, 0xff, 0xf8, 0xb8, 0xc0, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x3f, 0xff, 0xfc, 0xbc, 0x00, 0x00, 0x00, 0x01, 0xbf, 
  0xfe, 0xc0, 0x00, 0x00, 0x00, 0x3e, 0x10, 0x7f, 0xff, 0xfc, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xbf, 
  0xfe, 0xc0, 0x00, 0x00, 0x00, 0x7c, 0x18, 0xff, 0xff, 0xfe, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xff, 0xff, 0xfe, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xdf, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x78, 0x1f, 0xff, 0xff, 0xff, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x5f, 
  0xfd, 0x80, 0x00, 0x00, 0x00, 0xf8, 0x1e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x6f, 
  0xfb, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x2f, 
  0xff, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x3f, 
  0xfe, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x17, 
  0xf6, 0x00, 0x00, 0x00, 0x01, 0xf3, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x17, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x0b, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x05, 
  0xd8, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 
  0xd8, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xb0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xb0, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc0, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xa0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x30, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x30, 0x00, 0x00, 0x08, 0x03, 0x80, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x00, 0x00, 0x10, 0x03, 0x80, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0c, 0x00, 0x00, 0x30, 0x03, 0x80, 0x00, 0x00, 0x00, 0x03, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x06, 0x00, 0x00, 0x20, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x03, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x40, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x03, 
  0xf0, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x01, 0x80, 0x00, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x07, 
  0xf0, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x01, 0xc0, 0x01, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x07, 
  0xf8, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x60, 0x03, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x07, 
  0xf8, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x70, 0x02, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x0f, 
  0xfc, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x38, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x0f, 
  0xfc, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x08, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x1f, 
  0xfe, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x07, 0x30, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x7f, 
  0xff, 0x80, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x03, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x07, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x0f, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x1f, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x7f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x01, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'C3P0', 128x180px
const unsigned char C3P0 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xbb, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xbb, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf8, 0x00, 0x3e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x87, 0xff, 0xc3, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x7f, 0xff, 0xf8, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x71, 0xff, 0xff, 0xff, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 0xe7, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x3f, 0xff, 0xff, 0xff, 0xf3, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x7f, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x4f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x6f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0x03, 0xff, 0x87, 0xff, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd3, 0xf1, 0xfe, 0x78, 0xfc, 0x7f, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd3, 0xef, 0xff, 0x87, 0xff, 0x9f, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xdc, 0x07, 0xcf, 0x81, 0xef, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xbb, 0xf9, 0xde, 0x7e, 0x77, 0x6f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x07, 0xfc, 0xdc, 0xff, 0xb2, 0x5f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe9, 0xe7, 0x1e, 0xdd, 0xe7, 0x9e, 0x5f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd9, 0xf7, 0xfd, 0xdc, 0xff, 0xbc, 0x4f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xf9, 0xfb, 0xde, 0x7e, 0x7c, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0xfe, 0x0f, 0xdf, 0x81, 0xfc, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0xff, 0xff, 0xdf, 0xff, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xff, 0xff, 0xa7, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x7f, 0xff, 0xfb, 0xff, 0xfb, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x7f, 0xfd, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x00, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x2f, 0xf8, 0x00, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x9f, 0xfb, 0xfe, 0xff, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x38, 0x00, 0x4c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc0, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xf0, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xfb, 0x00, 0x00, 0x07, 0xbf, 0x83, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x9f, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe7, 0xef, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xf1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0xf7, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xef, 0xff, 0xf8, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xef, 0xff, 0xfd, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xf9, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x9f, 0xff, 0xfd, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xf3, 0xff, 0xfd, 0xff, 0xff, 0xc1, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xe7, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x0f, 0xf3, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0x9f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xfc, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xfc, 0xff, 0xbf, 0xff, 
  0xff, 0xff, 0x81, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xfc, 0xff, 0xcf, 0xff, 
  0xff, 0xff, 0xca, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xfd, 0xff, 0x27, 0xff, 
  0xff, 0xff, 0x97, 0x4f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xf9, 0xf0, 0x8f, 0xff, 
  0xff, 0xff, 0x46, 0xf3, 0xfe, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xf9, 0x8e, 0xcf, 0xff, 
  0xff, 0xfc, 0x99, 0xfc, 0xfe, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf8, 0x3f, 0xfa, 0x7f, 0x67, 0xff, 
  0xff, 0xf9, 0x73, 0xff, 0x3c, 0xff, 0xfc, 0x3f, 0xfc, 0x00, 0xff, 0xe3, 0xf1, 0xff, 0x93, 0xff, 
  0xff, 0xf2, 0x2f, 0xff, 0x98, 0x7f, 0x8f, 0xff, 0xc7, 0xff, 0x8f, 0xfe, 0x27, 0xff, 0xdb, 0xff, 
  0xff, 0xed, 0x9f, 0xff, 0x83, 0xcc, 0xff, 0xff, 0x3e, 0x00, 0xf3, 0xff, 0xcf, 0xff, 0xe9, 0xff, 
  0xff, 0xd3, 0x3f, 0xfe, 0x7b, 0xff, 0xff, 0xfc, 0xf3, 0xff, 0x8c, 0xff, 0xcf, 0xff, 0xe6, 0xff, 
  0xff, 0x20, 0x7f, 0x04, 0xf9, 0xff, 0xff, 0xfb, 0xcf, 0x00, 0xf3, 0x7f, 0xc7, 0xff, 0xf3, 0x7f, 
  0xfe, 0x5d, 0xfe, 0x01, 0xfd, 0xff, 0xff, 0xf7, 0x39, 0xff, 0x9d, 0xbf, 0xeb, 0x87, 0xf8, 0x3f, 
  0xfc, 0xbb, 0xff, 0x27, 0xfc, 0xff, 0xff, 0xee, 0x67, 0xff, 0xee, 0xdf, 0xcd, 0x43, 0xfd, 0x9f, 
  0xfa, 0x77, 0xff, 0x6f, 0xfe, 0xff, 0xff, 0xec, 0xcf, 0xe3, 0xf7, 0x6f, 0xcc, 0x33, 0xfe, 0xcf, 
  0xf4, 0xcf, 0xff, 0x6f, 0xfe, 0xff, 0xff, 0xdd, 0xdf, 0x9c, 0xfb, 0x6f, 0xce, 0x13, 0xff, 0x6f, 
  0x80, 0x0f, 0xff, 0x5f, 0xfe, 0x7f, 0xff, 0xdd, 0xdf, 0x3e, 0xfb, 0x37, 0xcf, 0x1b, 0xff, 0xb7, 
  0x38, 0x61, 0xfe, 0xdf, 0xfe, 0x60, 0x00, 0x1d, 0xdf, 0xbc, 0xfb, 0x70, 0x1f, 0x9b, 0xfc, 0x03, 
  0x3f, 0x80, 0x3c, 0xdf, 0xff, 0x7f, 0xff, 0xfc, 0xcf, 0xc1, 0xf7, 0x7f, 0xdf, 0xdb, 0x07, 0xfc, 
  0x3f, 0xbf, 0x82, 0x9f, 0xff, 0x7f, 0xff, 0xfe, 0xe7, 0xff, 0xe6, 0xff, 0xdf, 0xd8, 0xff, 0xfe, 
  0xbf, 0x3f, 0xe6, 0xbf, 0xff, 0x00, 0x00, 0xff, 0x39, 0xff, 0x9d, 0xff, 0x9f, 0xe9, 0xff, 0x7e, 
  0x9f, 0xff, 0xf1, 0xbf, 0xff, 0x3f, 0xff, 0x1f, 0x9e, 0x00, 0x73, 0xf8, 0x1f, 0xed, 0x83, 0xfc, 
  0xdf, 0xf0, 0x19, 0xbf, 0xff, 0x3f, 0xff, 0xc7, 0xe3, 0xff, 0x8f, 0xe7, 0xbf, 0xed, 0x9e, 0x7d, 
  0xcf, 0x9f, 0x91, 0x7f, 0xff, 0x9f, 0xe0, 0x00, 0xfc, 0x00, 0x7f, 0x00, 0x3f, 0xcd, 0xbf, 0x59, 
  0xee, 0x1f, 0xdb, 0x7f, 0xff, 0xc0, 0x0e, 0x08, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 0x8d, 0x7e, 0xe3, 
  0xf5, 0xdf, 0xeb, 0x7f, 0xff, 0xc0, 0x1c, 0x08, 0x80, 0xff, 0x02, 0x00, 0xff, 0xa0, 0x7c, 0xf3, 
  0xf3, 0xef, 0xe8, 0x7f, 0xff, 0xe0, 0x30, 0x08, 0x83, 0x00, 0x02, 0x10, 0xff, 0x3e, 0xfd, 0xf7, 
  0xfb, 0xe7, 0xf7, 0x3f, 0xff, 0xe0, 0xc0, 0x18, 0x03, 0x60, 0x33, 0x40, 0xfe, 0x70, 0xfb, 0xe7, 
  0xf9, 0xf7, 0xf3, 0xbf, 0xff, 0xe1, 0x00, 0x08, 0x03, 0x60, 0x03, 0x00, 0x7e, 0x1f, 0xc3, 0xcf, 
  0xfd, 0xfb, 0xfb, 0xdf, 0xff, 0xc0, 0x00, 0x2c, 0x02, 0xc0, 0x06, 0x00, 0xb9, 0xff, 0xf9, 0xdf, 
  0xfc, 0xfb, 0xf9, 0xcf, 0xff, 0xbf, 0x01, 0x8c, 0x05, 0xc0, 0x06, 0x01, 0x87, 0xff, 0xfe, 0x9f, 
  0xfe, 0x7d, 0x1c, 0x0f, 0xff, 0x9f, 0xf8, 0x0c, 0x03, 0x80, 0x86, 0x01, 0x9f, 0xff, 0xff, 0x3f, 
  0xff, 0x7c, 0xff, 0xc7, 0xff, 0x9f, 0xff, 0x0c, 0x07, 0x00, 0x0c, 0x07, 0x01, 0xc8, 0x7f, 0x7f, 
  0xff, 0x3b, 0xff, 0xf3, 0xff, 0xdf, 0xff, 0xf0, 0x0c, 0x00, 0x1c, 0x0f, 0x7b, 0xe7, 0x83, 0x7f, 
  0xff, 0x97, 0xff, 0xfc, 0xff, 0xdc, 0x3f, 0xfe, 0x18, 0x00, 0x38, 0x1e, 0x7b, 0xf7, 0x9c, 0xff, 
  0xff, 0xc7, 0xff, 0xfe, 0x3f, 0xdf, 0xe3, 0xff, 0xc0, 0x00, 0x70, 0x7c, 0x7b, 0xf7, 0xbc, 0xff, 
  0xff, 0xf7, 0xff, 0xff, 0x0f, 0xdf, 0xfe, 0x3f, 0xfc, 0x00, 0x83, 0xfa, 0x39, 0xf7, 0xbd, 0xff, 
  0xff, 0xf7, 0xff, 0xff, 0xd7, 0xc0, 0xff, 0xe7, 0xff, 0xe0, 0x3f, 0xe6, 0x98, 0xe7, 0x1d, 0xff, 
  0xff, 0xfb, 0xff, 0xc2, 0x03, 0x8f, 0x8f, 0xf8, 0xff, 0xff, 0xff, 0xde, 0xbe, 0xf7, 0xbd, 0xff, 
  0xff, 0xfb, 0xf0, 0x3c, 0xf3, 0x30, 0xf8, 0xff, 0x3f, 0xff, 0xff, 0x3c, 0xdf, 0x7b, 0xde, 0xff, 
  0xff, 0xf8, 0x0f, 0xbc, 0xf0, 0x7f, 0x1f, 0x1f, 0xcf, 0xff, 0xfc, 0xf3, 0x0f, 0x3d, 0xed, 0xff, 
  0xff, 0xfd, 0xef, 0xde, 0xf8, 0xff, 0xe3, 0xe7, 0xf9, 0xff, 0xe3, 0xef, 0x33, 0x80, 0x1f, 0xff, 
  0xff, 0xfd, 0xf7, 0xde, 0xfa, 0xff, 0xfc, 0xf9, 0xfe, 0x00, 0x1f, 0x9e, 0x78, 0x7f, 0xff, 0xff, 
  0xff, 0xfe, 0x73, 0xce, 0x78, 0xff, 0xff, 0x3e, 0x7f, 0xff, 0xff, 0x7c, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xf3, 0xdf, 0x79, 0xff, 0xff, 0x0f, 0x9f, 0xff, 0xfd, 0xf9, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x7b, 0xdf, 0x79, 0xff, 0xff, 0x67, 0xe7, 0xff, 0xe7, 0xf7, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x7b, 0xde, 0x73, 0xff, 0xff, 0x79, 0xf8, 0xff, 0x1f, 0xcf, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x33, 0x9e, 0xe3, 0xff, 0xfe, 0xfc, 0xff, 0xf7, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x6d, 0x13, 0xff, 0xfe, 0xff, 0x7f, 0xff, 0xfe, 0x7f, 0xfd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfe, 0xff, 0xbf, 0xff, 0xf9, 0xff, 0xfd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfc, 0xff, 0xcf, 0xff, 0xe3, 0xff, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xff, 0xef, 0xff, 0x8f, 0xff, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xff, 0xf7, 0xf8, 0x5f, 0xff, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xff, 0xf0, 0x07, 0xdf, 0xff, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xff, 0xf1, 0xff, 0xdf, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xff, 0xf5, 0xff, 0xcf, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xe5, 0xff, 0xef, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xec, 0xff, 0xef, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xcc, 0xff, 0xef, 0xff, 0xf3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfb, 0xff, 0xcc, 0xff, 0xef, 0xff, 0xf7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfb, 0xff, 0xcc, 0xff, 0xef, 0xff, 0xf7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf9, 0xff, 0xde, 0xff, 0xef, 0xff, 0xf7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf9, 0xff, 0xde, 0xff, 0xef, 0xff, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf9, 0xff, 0x9e, 0xf3, 0xcf, 0xff, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfd, 0xff, 0x9e, 0xff, 0xef, 0xff, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfd, 0xff, 0x9e, 0xff, 0xcf, 0xff, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfd, 0xff, 0x9e, 0xff, 0xcf, 0xff, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfd, 0xff, 0x9e, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0x9e, 0xff, 0xdf, 0xff, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0x9e, 0xff, 0xdf, 0xff, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0xff, 0x9e, 0xff, 0xdf, 0xff, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0x9e, 0xff, 0xbf, 0xff, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0x7f, 0x9e, 0xff, 0xbf, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x7f, 0x9e, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xbf, 0x9e, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xbf, 0xdc, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xdf, 0x9c, 0x7e, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xde, 0x21, 0x0e, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x91, 0xff, 0xe0, 0x7b, 0xc0, 0x08, 0x0a, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3b, 0x00, 0x3e, 0xfb, 0xf3, 0xe6, 0xdf, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x6e, 0xfd, 0xfd, 0xfb, 0xf6, 0xed, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x76, 0xee, 0xfd, 0xd5, 0xfd, 0xf7, 0x6d, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xee, 0xed, 0xfd, 0xb8, 0xbd, 0xff, 0x6e, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xee, 0xdd, 0xf9, 0xb8, 0xbd, 0xfb, 0x6e, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xee, 0xdd, 0xf9, 0xd8, 0xbd, 0xff, 0x6d, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xf6, 0xdd, 0xfd, 0xc5, 0xfd, 0xf7, 0x6d, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x76, 0xee, 0xfd, 0xfd, 0xfb, 0xf6, 0xd9, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x6e, 0xfc, 0xf9, 0xf7, 0xed, 0xba, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0x37, 0x7e, 0xfb, 0xef, 0xc9, 0x24, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcd, 0x9b, 0xbf, 0x74, 0xff, 0x90, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x90, 0x0d, 0xc0, 0x1f, 0xe9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xff, 0x3f, 0xe5, 0xff, 0xdf, 0xe9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xff, 0x7f, 0xe5, 0xff, 0xdf, 0xd9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xff, 0x7f, 0xe5, 0xff, 0xdf, 0xd9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0xff, 0x7f, 0xed, 0xff, 0xdf, 0xdb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x7f, 0x3f, 0xed, 0xff, 0xdf, 0xdb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x7f, 0xbf, 0xed, 0xff, 0xdf, 0xdb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x3f, 0x3f, 0xec, 0xff, 0xe0, 0x7b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 0xff, 0xce, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xce, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xde, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xde, 0x7f, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xde, 0x7f, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0x9f, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x9f, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0x3f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0x3f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0x3f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xbf, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xbf, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xbf, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x9e, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x9e, 0x7e, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xde, 0xf8, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xc7, 0xde, 0x07, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfe, 0x38, 0x0e, 0xfe, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xdf, 0xee, 0xfd, 0xff, 0xbf, 0xc3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xe7, 0xce, 0x03, 0xfe, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xee, 0x7f, 0xfd, 0xfe, 0xff, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xfd, 0xff, 0xcf, 0x8f, 0xfb, 0xfd, 0xff, 0xef, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xfe, 0xfc, 0x3f, 0xf0, 0xf7, 0xc0, 0x0f, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xbf, 0x63, 0xff, 0xff, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xfc, 0x0c, 0xa0, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x20, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00
};
// 'R2D2', 128x180px
const unsigned char R2D2 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xc3, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x20, 0x00, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0x00, 0x7f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe0, 0x00, 0x7f, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe0, 0x00, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe3, 0x00, 0x3f, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xe0, 0x00, 0x3f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xe0, 0x00, 0x1f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xe0, 0x00, 0x38, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xe0, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xe0, 0x1f, 0xa0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xaf, 0xe0, 0xa0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xd0, 0xd4, 0x04, 0x40, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 0xc2, 0x00, 0x41, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x02, 0x12, 0x00, 0x63, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xd2, 0x02, 0x40, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xd2, 0x38, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0e, 0x00, 0x07, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x30, 0x03, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3e, 0x0c, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xe1, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0e, 0x1f, 0xfc, 0x0f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0x3f, 0x80, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x43, 0xfb, 0xfe, 0x00, 0x00, 0x0e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf9, 0xff, 0xd6, 0x00, 0xc3, 0xef, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0xfc, 0xff, 0xd6, 0x1f, 0xff, 0xef, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xdf, 0xff, 0xff, 0xfb, 0xf7, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7e, 0x7f, 0xfe, 0xf8, 0x00, 0x07, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x3f, 0x7f, 0xfb, 0xf0, 0x00, 0x07, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xbf, 0x2f, 0xfb, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xe3, 0xbf, 0x2f, 0xff, 0x80, 0x01, 0xf3, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x61, 0xbf, 0x3f, 0xff, 0x80, 0x3b, 0xf3, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x61, 0xbf, 0xbf, 0xff, 0xff, 0x3f, 0xfb, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xc1, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0x79, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xc1, 0xdf, 0xbf, 0xff, 0xff, 0xc0, 0x39, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xc1, 0xdf, 0xbf, 0xf7, 0x9f, 0xc0, 0x39, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xdf, 0xbf, 0xf7, 0xff, 0x80, 0x5c, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xdf, 0x3f, 0xff, 0xff, 0xa0, 0x1c, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x03, 0x5f, 0x3f, 0xff, 0xff, 0xe0, 0x3c, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x01, 0x1e, 0x3f, 0xfa, 0xff, 0xe0, 0x3c, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x01, 0x1e, 0x7b, 0xfa, 0xff, 0xe0, 0x0c, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x00, 0x1e, 0x7b, 0xfe, 0xff, 0xe0, 0x1e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x9e, 0x7f, 0xff, 0x3f, 0xe0, 0x1e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 0x3e, 0x3f, 0xff, 0xff, 0xd0, 0x1e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x81, 0x3c, 0x3f, 0xff, 0x8f, 0xf0, 0x1e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3c, 0x1f, 0xff, 0x05, 0xf0, 0x0e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7c, 0x1f, 0xff, 0x85, 0xf0, 0x1e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x80, 0x7c, 0x1f, 0xff, 0x87, 0xe9, 0x0f, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x83, 0x78, 0x1f, 0xff, 0xb7, 0xe8, 0x07, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0x78, 0x1f, 0xff, 0x87, 0xf8, 0x07, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x46, 0x00, 0x1f, 0xfe, 0x8f, 0xfa, 0x07, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xfe, 0x83, 0xf8, 0x07, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x84, 0x00, 0x0f, 0xfe, 0xcf, 0xf0, 0xe2, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x85, 0x80, 0x0f, 0xff, 0xc3, 0xf8, 0x0f, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x85, 0x80, 0x0f, 0xff, 0xc3, 0xf7, 0xe7, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x85, 0xa0, 0x0f, 0x7f, 0xc3, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x81, 0xb0, 0x07, 0xff, 0xc7, 0xfd, 0xfb, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x0b, 0xb0, 0x07, 0xfe, 0xfe, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x0b, 0xb0, 0x87, 0xf7, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x0b, 0x30, 0x0f, 0x9f, 0xff, 0xf7, 0xe3, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0x0b, 0x31, 0xf8, 0xea, 0xff, 0xcf, 0x03, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x13, 0x79, 0xf8, 0xea, 0xbf, 0x7f, 0x23, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfa, 0x13, 0x79, 0xfc, 0xbf, 0xf3, 0xfd, 0xb3, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x12, 0x79, 0xfc, 0xff, 0x7f, 0x7d, 0x7b, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x16, 0x79, 0xfc, 0x5f, 0x7f, 0xfd, 0x4b, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x39, 0xfc, 0x57, 0x7f, 0xbf, 0x09, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0x00, 0x18, 0xfc, 0x55, 0xff, 0xbf, 0x81, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xc1, 0x88, 0xfc, 0x75, 0xf7, 0xbf, 0x8f, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xa7, 0xef, 0x30, 0xfe, 0x7f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xb3, 0xef, 0x10, 0xfe, 0x07, 0xfc, 0xcf, 0x07, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x91, 0xef, 0x38, 0xfe, 0x3f, 0xbf, 0xf0, 0x3e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc1, 0xef, 0x00, 0xfe, 0x7f, 0xfc, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xce, 0x08, 0x7f, 0x06, 0x01, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x4e, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x0b, 0x4e, 0x01, 0x80, 0x3f, 0x3f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x2b, 0x9e, 0x01, 0xcf, 0xff, 0x9f, 0xc0, 0x5f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x8d, 0x88, 0x01, 0xe7, 0xff, 0x9c, 0x00, 0x6f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0xe6, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x77, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xf8, 0x0f, 0x09, 0xff, 0xff, 0x00, 0x40, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xee, 0x5e, 0x07, 0x09, 0xff, 0xff, 0x3e, 0x40, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xee, 0x3f, 0x47, 0x09, 0xff, 0xff, 0x46, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xdb, 0x3f, 0x67, 0x81, 0xff, 0xfc, 0xf0, 0x0c, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xbf, 0xff, 0x63, 0x81, 0xff, 0xfd, 0xfc, 0xae, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9f, 0xff, 0x63, 0x81, 0xff, 0xf2, 0x7e, 0xd7, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x83, 0xff, 0x60, 0x00, 0xff, 0xf6, 0x3e, 0xd7, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x91, 0xff, 0x78, 0x00, 0x3f, 0xee, 0x9e, 0xe7, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0xff, 0x75, 0xc2, 0x3f, 0xde, 0xde, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x37, 0x78, 0x40, 0x3f, 0xbe, 0xfe, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x17, 0x7c, 0x00, 0x7f, 0x1e, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x8f, 0x7c, 0x00, 0x7f, 0x0e, 0xff, 0x7f, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x07, 0x7d, 0xc0, 0x7f, 0x22, 0xfe, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x93, 0x7f, 0x06, 0x7f, 0x88, 0xbf, 0x7f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x7c, 0x20, 0xff, 0xe0, 0x5d, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x87, 0xff, 0xf1, 0x1d, 0x3f, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0x1c, 0x3f, 0xff, 0xfc, 0x4d, 0xbf, 0x84, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0x03, 0xbe, 0x10, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xc8, 0xb8, 0x43, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x02, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x08, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'boarding', 128x180px
const unsigned char epd_bitmap_boarding [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x04, 0x00, 0x18, 0x00, 0xc0, 0x09, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x06, 0x00, 0x18, 0x01, 0xe0, 0x09, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x06, 0x00, 0x18, 0x01, 0xe0, 0x09, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x00, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x00, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x06, 0x00, 0x18, 0x01, 0x60, 0x0f, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x04, 0x00, 0x18, 0x01, 0x60, 0x0f, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x06, 0x00, 0x18, 0x01, 0x60, 0x0f, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x06, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x04, 0x00, 0x18, 0x01, 0x20, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x07, 0x80, 0x18, 0x01, 0xe0, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x07, 0x80, 0x18, 0x01, 0xe0, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x07, 0x80, 0x18, 0x00, 0xc0, 0x09, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x07, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x07, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xd0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x07, 0x80, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x03, 0x80, 0x18, 0x01, 0xe0, 0x0f, 0x00, 0x10, 0x03, 0x20, 0x06, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x07, 0x80, 0x18, 0x01, 0xe0, 0x0f, 0x80, 0x10, 0x01, 0xa0, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x06, 0x80, 0x1c, 0x01, 0xf0, 0x0f, 0x80, 0x10, 0x03, 0xa0, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x1c, 0x01, 0xb0, 0x0d, 0x80, 0x10, 0x03, 0xa0, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x1c, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x01, 0xa0, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x1c, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0xa0, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x14, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0xa0, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0xc0, 0x14, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0xe0, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x04, 0xc0, 0x14, 0x01, 0xe0, 0x0c, 0x80, 0x10, 0x01, 0x60, 0x0b, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x04, 0x80, 0x34, 0x01, 0xe0, 0x0c, 0x80, 0x10, 0x01, 0x60, 0x0b, 0x00, 0x00, 
  0x00, 0x00, 0xb0, 0x04, 0xc0, 0x34, 0x01, 0xe0, 0x0c, 0x80, 0x10, 0x03, 0x60, 0x0b, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x34, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0x60, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x34, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0x60, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x3e, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0x60, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x3e, 0x01, 0xb0, 0x0c, 0x80, 0x10, 0x03, 0x60, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x04, 0xc0, 0x26, 0x01, 0xb0, 0x0d, 0x80, 0x10, 0x03, 0x60, 0x09, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x07, 0x80, 0x26, 0x01, 0xb0, 0x0f, 0x80, 0x10, 0x03, 0x20, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x07, 0x80, 0x26, 0x01, 0xb0, 0x0f, 0x00, 0x10, 0x03, 0x20, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x03, 0x00, 0x22, 0x01, 0x30, 0x0e, 0x00, 0x10, 0x00, 0x00, 0x06, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char NowBoarding [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe0, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x04, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0e, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'andrew', 128x180px
const unsigned char andrew [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x22, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x52, 0x2a, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x2a, 0xd5, 0x6f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0xd5, 0x5b, 0xba, 0xb8, 0x00, 0x00, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0xab, 0xb6, 0xef, 0xed, 0x00, 0x00, 0x00, 0x08, 0x49, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0xb6, 0xef, 0xfd, 0xb6, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xae, 0xdb, 0x7d, 0xb7, 0xed, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xb5, 0x6f, 0xb7, 0xff, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0xdb, 0xb5, 0xde, 0xde, 0xf7, 0x54, 0x00, 0x00, 0x81, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x2a, 0xad, 0x5e, 0xfb, 0xfb, 0xfd, 0xd2, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x6b, 0xeb, 0x5f, 0x7f, 0xb7, 0x6c, 0x00, 0x00, 0x08, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x05, 0x4a, 0xb6, 0xbd, 0xf7, 0xee, 0xfd, 0xb5, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x5b, 0x57, 0x5d, 0xbf, 0xdf, 0xdb, 0x00, 0x00, 0x40, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x0b, 0x2a, 0xd6, 0xfa, 0xf7, 0xff, 0x75, 0x6d, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0xa5, 0x6d, 0xaf, 0x7e, 0xf7, 0xff, 0xf6, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x22, 0xaa, 0xb7, 0x75, 0xab, 0xdd, 0xb6, 0xad, 0x00, 0x00, 0x04, 0x02, 
  0x00, 0x00, 0x00, 0x00, 0x14, 0x95, 0x5a, 0xdb, 0x7f, 0x7f, 0xfd, 0xfb, 0x40, 0x00, 0x10, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x57, 0x6d, 0xdb, 0xfe, 0xd7, 0x56, 0x80, 0x00, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x29, 0x55, 0x6d, 0xbb, 0x7e, 0xef, 0xfd, 0xfa, 0x00, 0x00, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x92, 0xb5, 0x6d, 0xd7, 0xbb, 0x57, 0x5d, 0x80, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x24, 0xaa, 0xae, 0xd6, 0xfd, 0xfe, 0xfd, 0xeb, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x09, 0x2a, 0xab, 0x7b, 0x57, 0x6b, 0xae, 0xbd, 0x00, 0x00, 0x08, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x24, 0x92, 0xb5, 0xad, 0xbd, 0xfe, 0xf7, 0xd6, 0x80, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x4a, 0x55, 0x56, 0xeb, 0x55, 0xba, 0xba, 0x80, 0x00, 0x21, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x24, 0xaa, 0xfb, 0x5e, 0xea, 0xd7, 0xd6, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x54, 0x80, 0x0a, 0x95, 0xb5, 0xa5, 0x2d, 0x7b, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x56, 0xda, 0x80, 0x25, 0x55, 0x40, 0x00, 0x08, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x5a, 0xad, 0x10, 0x0a, 0xed, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x25, 0x6a, 0x00, 0x01, 0x36, 0x80, 0x00, 0x00, 0x11, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x56, 0xa9, 0x40, 0x54, 0x95, 0x40, 0x00, 0x11, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x2b, 0x54, 0x12, 0x92, 0x56, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0x25, 0x20, 0x8a, 0xe9, 0x24, 0xa9, 0x53, 0x60, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x88, 0x2b, 0x54, 0x42, 0x55, 0x15, 0x40, 0x00, 0x24, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x24, 0x01, 0x0b, 0xe9, 0x11, 0x04, 0xaa, 0xa0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xa0, 0x15, 0x54, 0x04, 0xa1, 0x15, 0x50, 0x00, 0x00, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x0b, 0xe8, 0x00, 0x28, 0x56, 0xd0, 0x00, 0x40, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x0a, 0xb0, 0x80, 0x02, 0x2b, 0x50, 0x00, 0x02, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0b, 0xd4, 0x00, 0x00, 0x95, 0x50, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0a, 0xe9, 0x00, 0x00, 0x56, 0xd0, 0x00, 0x10, 0x42, 
  0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x0b, 0x55, 0x10, 0x2a, 0x2b, 0x50, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x94, 0x01, 0x48, 0x25, 0xea, 0xab, 0x4b, 0xdd, 0x60, 0x08, 0x01, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x49, 0x54, 0x02, 0x0b, 0x5d, 0x44, 0xaa, 0xf6, 0xb0, 0x2c, 0x44, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x24, 0x82, 0xa8, 0x05, 0xea, 0xa9, 0x15, 0x5b, 0xd0, 0x32, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x92, 0x54, 0x44, 0x96, 0xb7, 0x54, 0xaf, 0xfd, 0x50, 0x60, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x4a, 0xab, 0x30, 0x0b, 0xda, 0xea, 0xd5, 0x6e, 0xd8, 0xc2, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x25, 0x54, 0xca, 0x45, 0x6d, 0xbf, 0x7b, 0xf5, 0xb1, 0x22, 0x12, 0x01, 
  0x00, 0x00, 0x00, 0x80, 0x94, 0xab, 0x28, 0x15, 0xd6, 0xd5, 0xaf, 0x5f, 0x58, 0x91, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4a, 0xda, 0xd2, 0x47, 0x7b, 0x7e, 0xdb, 0xf5, 0xe8, 0xa4, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x80, 0x25, 0x56, 0xa8, 0x0a, 0xd5, 0xab, 0x77, 0x5e, 0xaa, 0x52, 0x01, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x92, 0xbb, 0x52, 0x25, 0xfe, 0xfd, 0xdd, 0xf7, 0x68, 0xb4, 0x08, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x4a, 0xd6, 0xd4, 0x97, 0xab, 0x57, 0x6f, 0xfa, 0xda, 0x54, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x40, 0x2b, 0x6d, 0xa8, 0x15, 0xf5, 0xfa, 0xdd, 0xaf, 0x68, 0xaa, 0x00, 0x20, 
  0x00, 0x00, 0x01, 0x00, 0x85, 0x5b, 0x51, 0x2a, 0xbe, 0xaf, 0x77, 0xfa, 0xd4, 0x28, 0x00, 0x82, 
  0x00, 0x00, 0x00, 0x00, 0x2a, 0xad, 0x54, 0x17, 0xeb, 0x69, 0xae, 0xaf, 0x54, 0x94, 0x02, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x8a, 0xb6, 0xa0, 0xaa, 0xbb, 0xb6, 0xbb, 0xf5, 0xb2, 0x28, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0xaa, 0x94, 0x17, 0xd5, 0x6a, 0xad, 0x5d, 0x54, 0x98, 0x08, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x45, 0x54, 0xa1, 0x2a, 0xbd, 0xda, 0x55, 0xb7, 0xd2, 0x54, 0x00, 0x11, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x52, 0x10, 0x15, 0x62, 0xad, 0x2a, 0xda, 0x6a, 0xa8, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x80, 0x49, 0x48, 0xa2, 0x0a, 0x95, 0x54, 0x8a, 0xab, 0xaa, 0xb0, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x92, 0x40, 0x01, 0x40, 0x76, 0x45, 0x6d, 0x55, 0x58, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x81, 0x52, 0x01, 0x14, 0x44, 0x10, 0x2b, 0x11, 0x35, 0x6b, 0xa0, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x10, 0x05, 0x48, 0x81, 0x00, 0x81, 0xb5, 0x44, 0xaa, 0xb6, 0xf0, 0x80, 0x04, 
  0x00, 0x00, 0x00, 0x40, 0xa1, 0x04, 0x54, 0x22, 0x04, 0xda, 0xa1, 0x56, 0xd7, 0x50, 0x08, 0x10, 
  0x00, 0x00, 0x00, 0x08, 0x14, 0xa2, 0x01, 0x10, 0x23, 0x55, 0x14, 0x2b, 0x55, 0xe0, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x42, 0x42, 0x11, 0x52, 0x4a, 0x1a, 0xfd, 0xc1, 0x5a, 0xae, 0xa0, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x28, 0x2a, 0xca, 0x08, 0x21, 0x45, 0x4a, 0xa8, 0x2a, 0xd7, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x42, 0x50, 0xa2, 0x94, 0x2b, 0xb6, 0x95, 0x55, 0x5a, 0xe2, 0x02, 0x00, 
  0x00, 0x00, 0x00, 0x28, 0x13, 0x40, 0x08, 0x4a, 0xac, 0xaa, 0x42, 0xab, 0x57, 0xa0, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0xa4, 0xa8, 0x01, 0x11, 0x52, 0xa1, 0x28, 0xaa, 0xad, 0x40, 0x10, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x90, 0x00, 0x84, 0x24, 0x00, 0x02, 0xaa, 0xd2, 0x80, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xa1, 0x54, 0x06, 0xb2, 0x92, 0xd4, 0x0a, 0xaa, 0xa1, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x09, 0x49, 0x01, 0x55, 0x6d, 0xb0, 0x2a, 0xd5, 0x40, 0x02, 0x01, 0x09, 
  0x00, 0x00, 0x00, 0x00, 0x52, 0xa4, 0x00, 0x56, 0xdd, 0x50, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0xa9, 0x00, 0x95, 0x6a, 0xd2, 0xab, 0x4a, 0x80, 0x00, 0x04, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x22, 0x50, 0x80, 0x02, 0xaf, 0x55, 0xdd, 0x55, 0x20, 0x00, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x14, 0xa5, 0x00, 0x2a, 0xb1, 0x55, 0x6a, 0xa8, 0x80, 0x20, 0x20, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x50, 0x8a, 0xaf, 0x5b, 0x5b, 0x55, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x04, 0x52, 0xaa, 0xed, 0xed, 0x24, 0x00, 0x00, 0x00, 0x84, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x52, 0xaa, 0xdb, 0x56, 0xb5, 0x51, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x4a, 0x01, 0x15, 0x55, 0xb5, 0xad, 0x08, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x54, 0xa5, 0x56, 0xdb, 0x75, 0x52, 0x00, 0x04, 0x08, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x82, 0x52, 0x55, 0x56, 0xda, 0x40, 0x00, 0x00, 0x20, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x29, 0x29, 0x55, 0x6d, 0xa9, 0x20, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x44, 0x95, 0x55, 0xb7, 0xec, 0x88, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x52, 0x55, 0x56, 0xda, 0xb5, 0x20, 0x00, 0x00, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x29, 0x4a, 0xaa, 0xaf, 0x68, 0x88, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x95, 0x35, 0xbd, 0xf5, 0xaa, 0x08, 0x00, 0x00, 0x00, 0x02, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0xaa, 0xd6, 0xae, 0xd1, 0x28, 0x01, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2a, 0xad, 0x7b, 0x7b, 0x68, 0x10, 0x00, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0xad, 0xaf, 0xa4, 0x50, 0x00, 0x00, 0x04, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x56, 0xd6, 0xf5, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x55, 0x55, 0x7b, 0x5d, 0x90, 0xb0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x95, 0xad, 0xb6, 0x40, 0xd8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x25, 0x55, 0x55, 0x55, 0x01, 0x50, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x09, 0x52, 0xaa, 0xd4, 0x82, 0xa8, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x94, 0x55, 0x54, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x11, 0x22, 0xaa, 0xa0, 0x0a, 0xb8, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x00, 0x8a, 0x84, 0x89, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x02, 0x24, 0x50, 0x00, 0x2a, 0xdc, 0x00, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x09, 0x22, 0x80, 0x49, 0x05, 0x20, 0x0a, 0xa8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0x10, 0x02, 0x40, 0x01, 0x2b, 0x76, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x40, 0x20, 0x10, 0x04, 0x55, 0xac, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x15, 0x49, 0x02, 0x04, 0x40, 0x10, 0xae, 0xb6, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x12, 0x00, 0x40, 0x01, 0x02, 0x55, 0x5e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x16, 0x88, 0xa1, 0x12, 0x04, 0x49, 0x5a, 0xd6, 0x00, 0x00, 0x00, 0x02, 
  0x00, 0x00, 0x00, 0x00, 0x15, 0x52, 0x08, 0x40, 0xa0, 0x25, 0x6d, 0xbf, 0x00, 0x00, 0x08, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x2f, 0xa4, 0xa2, 0x15, 0x12, 0x92, 0xb6, 0xde, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x2a, 0xd2, 0x40, 0x80, 0x48, 0x4d, 0xab, 0x7f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x2d, 0xe9, 0x14, 0x55, 0x25, 0x35, 0x75, 0xbf, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x2b, 0x58, 0xa2, 0x14, 0xaa, 0xaa, 0xae, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x55, 0xf6, 0x48, 0xa2, 0x91, 0x4b, 0x77, 0x7d, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x5f, 0x5d, 0x22, 0x09, 0x2a, 0xaa, 0xdb, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xab, 0xf7, 0x94, 0xa4, 0x92, 0x55, 0x6d, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xad, 0x5e, 0xe1, 0x12, 0xa9, 0x55, 0xb7, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x57, 0xfb, 0xd4, 0xa9, 0x0a, 0xab, 0x5f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x5a, 0xdf, 0x7a, 0x44, 0xa9, 0x55, 0xef, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xaf, 0xf5, 0xed, 0x12, 0x55, 0x56, 0xbf, 0xff, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x55, 0x5f, 0xfe, 0xa4, 0x8a, 0xad, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x02, 
  0x00, 0x00, 0x00, 0x05, 0x5f, 0xf7, 0x6b, 0xa5, 0x52, 0xb7, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x55, 0x5d, 0xff, 0xd2, 0x2a, 0xaa, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x5b, 0xff, 0xb6, 0xf5, 0x55, 0x77, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x56, 0xd6, 0xff, 0x5d, 0x55, 0xaf, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0xbb, 0xff, 0xdb, 0xf7, 0x56, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x56, 0xab, 0x7e, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x5f, 0xff, 0xeb, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x04, 0xb5, 0x5b, 0x7e, 0xbf, 0xaf, 0xaf, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x5f, 0xfe, 0xf4, 0x2a, 0xd0, 0xa0, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xea, 0xab, 0xd0, 0x0f, 0x55, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x37, 0xff, 0x40, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xda, 0xb6, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xb7, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xdd, 0x55, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0xb7, 0xfb, 0x40, 0x00, 0x00, 0x00, 0x0d, 0x5f, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xdd, 0x57, 0x50, 0x00, 0x00, 0x00, 0x7b, 0xbf, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0x6f, 0xed, 0xaf, 0x80, 0x00, 0x00, 0xde, 0xef, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf5, 0x5e, 0xbb, 0x60, 0x00, 0x01, 0xeb, 0x75, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0xdf, 0xf5, 0x6f, 0xe0, 0x00, 0x03, 0x5d, 0xdf, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xb5, 0x5b, 0xfd, 0x70, 0x00, 0x07, 0xff, 0x75, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0xda, 0xad, 0xb7, 0xd0, 0x00, 0x06, 0xdb, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xab, 0x6f, 0xff, 0x60, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xd5, 0xbb, 0xfd, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x6e, 0xef, 0x77, 0xa0, 0x00, 0x1e, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x05, 0xb7, 0xbf, 0xfe, 0xd0, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xfd, 0xfb, 0xdf, 0x60, 0x00, 0x3f, 0xff, 0xfb, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0xdf, 0xef, 0xfd, 0xd0, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x7b, 0xbe, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xef, 0xff, 0xfe, 0xe0, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xbf, 0xff, 0xfb, 0x80, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xfd, 0xbb, 0xfe, 0xc0, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0xdf, 0xff, 0xdf, 0x80, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xfb, 0xff, 0xfa, 0xc0, 0x01, 0xdf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x6f, 0xbf, 0x7f, 0x00, 0x03, 0xfe, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfd, 0xf7, 0xc0, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xbd, 0xf7, 0xfd, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf7, 0xff, 0xdf, 0x80, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x7a, 0x80, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xdf, 0xdf, 0xff, 0x00, 0x03, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfd, 0xed, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x7f, 0xff, 0xfe, 0x00, 0x03, 0xbd, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00
};
// 'rebelSpy', 128x180px
const unsigned char rebelSpy [] PROGMEM = {
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x55, 0x2a, 0xa9, 0x00, 0x00, 0x00, 0x12, 0xaa, 0x91, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x55, 0x22, 0x00, 0x80, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x24, 0xaa, 0xa8, 0x00, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x92, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x24, 0x80, 0x00, 0x08, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x24, 0x88, 0x90, 0x00, 0x25, 0x22, 0x42, 0x12, 0x01, 0x00, 0x04, 0x12, 0x21, 0x08, 0x00, 0x00, 
  0x00, 0x22, 0x05, 0x52, 0x80, 0x08, 0x10, 0x40, 0x48, 0x08, 0x80, 0x00, 0x00, 0x00, 0x42, 0x00, 
  0x52, 0x88, 0x50, 0x00, 0x14, 0xa1, 0x02, 0x04, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x22, 0x04, 0x94, 0x80, 0x04, 0x48, 0x41, 0x04, 0x00, 0x10, 0x00, 0x04, 0x21, 0x00, 0x20, 
  0x52, 0x95, 0x52, 0x41, 0x2a, 0x90, 0x01, 0x10, 0x20, 0x92, 0x41, 0x22, 0x40, 0x00, 0x08, 0x02, 
  0x00, 0x48, 0xa9, 0x2a, 0x40, 0x45, 0x48, 0x04, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x02, 0x2a, 0x91, 0x2a, 0x90, 0x22, 0x50, 0x08, 0xa0, 0x04, 0x00, 0x02, 0x10, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x44, 0xaa, 0x4a, 0x88, 0x05, 0x20, 0x04, 0x80, 0x11, 0x10, 0x41, 0x10, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x52, 0xa0, 0x45, 0x40, 0x10, 0x80, 0x00, 0x00, 0x00, 0x08, 
  0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x44, 0x02, 0xab, 0x49, 0x02, 0x09, 0x22, 0x04, 0x22, 0x40, 
  0x44, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 
  0x20, 0x90, 0x10, 0x92, 0x20, 0x00, 0x00, 0x00, 0x01, 0x40, 0x04, 0x00, 0x00, 0x80, 0x80, 0x00, 
  0x10, 0x02, 0x42, 0x08, 0x84, 0x88, 0x00, 0x00, 0x00, 0x04, 0x80, 0x81, 0x12, 0x00, 0x00, 0x04, 
  0x48, 0x00, 0x00, 0x40, 0x11, 0x22, 0x90, 0x10, 0x01, 0x40, 0x10, 0x08, 0x00, 0x04, 0x09, 0x10, 
  0x04, 0x88, 0x00, 0x02, 0x00, 0x00, 0x04, 0x82, 0x00, 0x80, 0x40, 0x20, 0x40, 0x00, 0x00, 0x00, 
  0x12, 0x01, 0x12, 0x00, 0x00, 0x08, 0x40, 0x20, 0xaa, 0x12, 0x04, 0x81, 0x08, 0x40, 0x80, 0x00, 
  0x01, 0x20, 0x40, 0xa8, 0xa4, 0x40, 0x00, 0x02, 0x01, 0x40, 0x10, 0x00, 0x01, 0x08, 0x00, 0x00, 
  0x48, 0x82, 0x00, 0x00, 0x01, 0x05, 0x12, 0x00, 0x00, 0x84, 0x80, 0x04, 0x20, 0x00, 0x12, 0x40, 
  0x02, 0x48, 0x08, 0x02, 0x10, 0x20, 0x40, 0xa8, 0x04, 0x10, 0x01, 0x10, 0x00, 0x00, 0x80, 0x02, 
  0x20, 0x20, 0x82, 0x90, 0x42, 0x00, 0x04, 0x02, 0xa2, 0x80, 0x04, 0x00, 0x89, 0x22, 0x00, 0x00, 
  0x09, 0x10, 0x10, 0x01, 0x08, 0x95, 0x10, 0x00, 0x08, 0x44, 0x90, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x40, 0x44, 0x00, 0x90, 0x00, 0x00, 0x42, 0x48, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x40, 
  0x15, 0x11, 0x4a, 0x05, 0x52, 0x41, 0x00, 0x01, 0x20, 0x00, 0x00, 0x20, 0x22, 0x08, 0x10, 0x00, 
  0xa4, 0xa4, 0x20, 0xa0, 0x00, 0x14, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
  0x55, 0x5b, 0xdf, 0x55, 0x55, 0x40, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
  0xaa, 0xaa, 0xfe, 0xda, 0xa4, 0x15, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00, 
  0x55, 0xb7, 0x5f, 0xee, 0xb2, 0x44, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x00, 
  0xaa, 0xdd, 0xff, 0x75, 0xd4, 0x80, 0x80, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x24, 
  0x56, 0xef, 0x7f, 0xde, 0xaa, 0x02, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x55, 0x5b, 0xef, 0xfb, 0xb5, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
  0x2a, 0xef, 0xff, 0xfe, 0xd5, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x81, 0x01, 0x24, 
  0x85, 0x36, 0xff, 0xff, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 
  0x55, 0x5b, 0xff, 0xfd, 0xc9, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x55, 0xb7, 0xff, 0xff, 0x64, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 
  0x54, 0xdd, 0x7f, 0xff, 0xa8, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x01, 
  0x4a, 0xaf, 0xf5, 0xfd, 0xa2, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 
  0x2a, 0xb5, 0xb5, 0xff, 0xa8, 0x49, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
  0x41, 0x5e, 0xf5, 0x76, 0xd0, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 
  0x14, 0x55, 0xda, 0xff, 0x49, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x02, 0x10, 0x88, 
  0xab, 0x5b, 0x75, 0x5a, 0xa0, 0x20, 0x00, 0x12, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 
  0x54, 0xad, 0xd5, 0x6f, 0xa4, 0x84, 0x10, 0x40, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
  0x4a, 0xa6, 0xb6, 0xba, 0x80, 0x00, 0x01, 0x0a, 0x90, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 
  0x52, 0xab, 0xdf, 0xd6, 0x90, 0x20, 0x80, 0x00, 0x44, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 
  0x4a, 0x55, 0x7f, 0xfd, 0x02, 0x08, 0x0a, 0xaa, 0x20, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x48, 
  0xa9, 0x56, 0xff, 0xfa, 0x40, 0x80, 0x20, 0x11, 0x15, 0x22, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x55, 0x54, 0xbf, 0xfc, 0x0a, 0x01, 0x00, 0x04, 0x80, 0x08, 0x10, 0x80, 0x00, 0x00, 0x00, 0x02, 
  0x4a, 0xaa, 0x7f, 0xf5, 0x20, 0x20, 0x00, 0x00, 0x55, 0x40, 0x42, 0x00, 0x00, 0x00, 0x00, 0x28, 
  0xaa, 0xaa, 0xb7, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x55, 0x56, 0x7f, 0xf4, 0x90, 0x00, 0x00, 0x00, 0x02, 0x80, 0x88, 0x04, 0x80, 0x00, 0x00, 0x02, 
  0xaa, 0xaa, 0xbf, 0xdc, 0x04, 0x04, 0x00, 0x00, 0x00, 0x14, 0x20, 0x10, 0x00, 0x00, 0x00, 0x08, 
  0x55, 0x55, 0x5f, 0x9a, 0x40, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 
  0xaa, 0xaa, 0x7f, 0xc8, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x02, 
  0x55, 0x6b, 0x3f, 0x02, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xaa, 0xad, 0x7f, 0x90, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x55, 0x55, 0x7e, 0xaa, 0xa0, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 
  0xab, 0xf5, 0xf1, 0x49, 0x51, 0x00, 0x00, 0x02, 0x28, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 
  0x54, 0x5b, 0x6a, 0xaa, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x08, 
  0xa5, 0x55, 0xeb, 0x6a, 0xa0, 0x40, 0x00, 0x09, 0x51, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x54, 0xad, 0xa5, 0xbb, 0x51, 0x00, 0x00, 0x10, 0x09, 0x28, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 
  0x12, 0x7a, 0xe6, 0xed, 0x50, 0x40, 0x00, 0x05, 0x44, 0xaa, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 
  0xa1, 0x15, 0xd5, 0xd5, 0xa2, 0x00, 0x00, 0x28, 0x29, 0x45, 0x40, 0x00, 0x22, 0x00, 0x00, 0x00, 
  0x48, 0xaa, 0x93, 0x7a, 0xa1, 0x00, 0x00, 0x12, 0x84, 0xa9, 0x20, 0x00, 0x00, 0x10, 0x00, 0x01, 
  0x26, 0xaa, 0xa8, 0x85, 0x44, 0x00, 0x00, 0x40, 0x2a, 0x54, 0x94, 0x00, 0x00, 0x00, 0x00, 0x10, 
  0x91, 0x55, 0x44, 0xa9, 0x22, 0x00, 0x01, 0x02, 0x25, 0x45, 0x52, 0x00, 0x09, 0x00, 0x00, 0x44, 
  0x45, 0x7b, 0x52, 0x54, 0x94, 0x00, 0x00, 0x08, 0x12, 0x54, 0xaa, 0x00, 0x00, 0x20, 0x00, 0x01, 
  0x22, 0xbf, 0x08, 0x2a, 0xa2, 0x00, 0x00, 0x00, 0x54, 0xaa, 0x45, 0x00, 0x00, 0x00, 0x04, 0x24, 
  0x89, 0x5a, 0x41, 0x55, 0x54, 0x80, 0x08, 0x41, 0x2a, 0x52, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x22, 0xda, 0x00, 0x2a, 0xaa, 0x00, 0x00, 0x14, 0x05, 0x54, 0x95, 0x00, 0x00, 0x00, 0x00, 0x12, 
  0x95, 0x56, 0x08, 0xa5, 0x55, 0xa0, 0x00, 0x00, 0x50, 0xaa, 0x42, 0x00, 0x00, 0x00, 0x24, 0x80, 
  0x48, 0xaa, 0x01, 0x55, 0x52, 0x54, 0x00, 0x01, 0x7d, 0xd2, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x22, 0x05, 0x02, 0x55, 0x55, 0x52, 0x21, 0x01, 0x57, 0xd4, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x49, 0x52, 0x21, 0x55, 0x55, 0x49, 0x00, 0x00, 0x29, 0xd5, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 
  0x24, 0x2a, 0x85, 0x55, 0x55, 0x2a, 0x84, 0x00, 0x04, 0xb2, 0xa4, 0x00, 0x01, 0x40, 0x02, 0x04, 
  0x91, 0x2a, 0xa0, 0xaa, 0xaa, 0xa9, 0x20, 0x00, 0x40, 0x54, 0x50, 0x00, 0x02, 0x20, 0x00, 0x20, 
  0x04, 0x85, 0x55, 0x55, 0x55, 0x54, 0x90, 0x01, 0x09, 0x11, 0x00, 0x00, 0x04, 0x94, 0x00, 0x28, 
  0x52, 0x54, 0xa8, 0xaa, 0xaa, 0xaa, 0xa5, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x02, 0x4a, 0x00, 0x00, 
  0x25, 0x52, 0xa5, 0x55, 0x55, 0x55, 0x10, 0x20, 0x24, 0x00, 0x00, 0x00, 0x09, 0x21, 0x40, 0x28, 
  0x91, 0x6a, 0xa8, 0xaa, 0xaa, 0xaa, 0xa2, 0x04, 0x00, 0x80, 0x00, 0x10, 0x04, 0x95, 0x20, 0x00, 
  0x0a, 0x8a, 0xaa, 0x55, 0x55, 0x54, 0x88, 0x90, 0x80, 0x00, 0x00, 0x44, 0x02, 0x52, 0x90, 0x00, 
  0x24, 0x55, 0x49, 0x2a, 0xaa, 0xa5, 0x22, 0x00, 0x12, 0x00, 0x00, 0x90, 0x09, 0x08, 0x40, 0x00, 
  0x12, 0xa9, 0x24, 0xaa, 0xa9, 0x2a, 0x94, 0x92, 0x00, 0x40, 0x01, 0x22, 0x04, 0xa5, 0x20, 0x00, 
  0x29, 0x24, 0xa9, 0xaa, 0x95, 0x55, 0x40, 0x40, 0x95, 0x14, 0x02, 0x48, 0x01, 0x28, 0x80, 0x00, 
  0x84, 0x92, 0x9d, 0xaa, 0x6a, 0xa9, 0x2a, 0x12, 0x00, 0x82, 0xa9, 0x21, 0x04, 0x85, 0x28, 0x2a, 
  0x55, 0x2a, 0xd5, 0xd5, 0x4a, 0xaa, 0xa5, 0x40, 0x54, 0x54, 0x04, 0x88, 0x01, 0x50, 0x80, 0x00, 
  0x22, 0x4a, 0xad, 0x55, 0x55, 0x55, 0x50, 0x15, 0x02, 0xaa, 0xb2, 0x52, 0x04, 0x0a, 0x40, 0x4a, 
  0x88, 0xa9, 0x5b, 0xaa, 0xaa, 0x4a, 0x4a, 0x80, 0x52, 0x49, 0x49, 0x00, 0x01, 0x51, 0x00, 0x10, 
  0x2a, 0x25, 0x5c, 0xd5, 0x55, 0x55, 0x24, 0x54, 0x09, 0x24, 0x24, 0xa9, 0x00, 0x0a, 0x40, 0x82, 
  0x44, 0xaa, 0xab, 0x54, 0xa5, 0x52, 0xa9, 0x02, 0xa4, 0xaa, 0xaa, 0x44, 0x00, 0x20, 0x00, 0x28, 
  0x12, 0x55, 0xe8, 0xaa, 0x94, 0xaa, 0x92, 0x50, 0x02, 0x91, 0x45, 0x21, 0x00, 0x05, 0x01, 0x02, 
  0x49, 0x4a, 0x5f, 0x55, 0x55, 0x54, 0xa9, 0x25, 0x54, 0x4a, 0x28, 0x88, 0x40, 0x00, 0x00, 0x50, 
  0x20, 0x91, 0x6d, 0x54, 0xaa, 0xaa, 0x94, 0x88, 0x02, 0xa5, 0x55, 0x22, 0x10, 0x00, 0x01, 0x05, 
  0x5d, 0x6f, 0xfd, 0xaa, 0xaa, 0x4a, 0x42, 0x22, 0xaa, 0x95, 0x54, 0x88, 0xa0, 0x00, 0x02, 0x50, 
  0x22, 0x7f, 0xee, 0xaa, 0xa5, 0x55, 0x59, 0x48, 0x42, 0x6a, 0xaa, 0xa0, 0x15, 0x00, 0x00, 0x04, 
  0x89, 0x00, 0x15, 0x55, 0x55, 0x52, 0xa4, 0x92, 0x95, 0x22, 0x4a, 0x12, 0xa0, 0x80, 0x05, 0x51, 
  0x6a, 0xb6, 0xd5, 0x54, 0x94, 0xaa, 0x52, 0x44, 0x40, 0x89, 0x29, 0x44, 0x0a, 0x54, 0x00, 0x04, 
  0x24, 0x40, 0x02, 0xaa, 0xaa, 0xaa, 0x89, 0x12, 0x2a, 0x50, 0xa5, 0x28, 0xa1, 0x01, 0x55, 0x51, 
  0x81, 0x3f, 0xf6, 0xaa, 0xa5, 0x55, 0x54, 0xa4, 0x85, 0x2a, 0x94, 0x82, 0x14, 0xaa, 0x00, 0x08, 
  0xd0, 0xc9, 0x55, 0x55, 0x55, 0x24, 0xa2, 0x49, 0x50, 0x84, 0x4a, 0x50, 0x82, 0x04, 0xaa, 0xa2, 
  0x05, 0x2a, 0xaa, 0xa9, 0x2a, 0xaa, 0x95, 0x24, 0x25, 0x52, 0xa1, 0x0a, 0x54, 0xa8, 0x01, 0x08, 
  0x51, 0x56, 0xea, 0xa5, 0x52, 0xaa, 0x48, 0x92, 0x92, 0x28, 0x14, 0xa1, 0x08, 0x12, 0xaa, 0x45, 
  0x4a, 0x49, 0x0a, 0xaa, 0xaa, 0x49, 0x52, 0x48, 0x48, 0x85, 0x44, 0x14, 0x52, 0xa1, 0x10, 0x20, 
  0x00, 0x00, 0x02, 0xaa, 0x49, 0x55, 0x29, 0x25, 0x25, 0x20, 0x11, 0x42, 0x84, 0x4a, 0x45, 0x14, 
  0x00, 0x00, 0x05, 0x49, 0x55, 0x4a, 0x92, 0x42, 0x90, 0x94, 0x84, 0x14, 0x29, 0x10, 0x90, 0x81, 
  0x25, 0x52, 0x55, 0x2a, 0xaa, 0xa9, 0x48, 0x94, 0x4a, 0x40, 0x21, 0x42, 0x82, 0x45, 0x25, 0x20, 
  0xda, 0xad, 0xaa, 0xa5, 0x24, 0x94, 0x92, 0x22, 0x91, 0x12, 0x88, 0x10, 0x54, 0x90, 0x40, 0x40, 
  0x55, 0x52, 0x55, 0x54, 0xaa, 0xa5, 0x00, 0x14, 0x44, 0x80, 0x02, 0x02, 0x01, 0x0a, 0x95, 0x08, 
  0x20, 0x08, 0x04, 0x92, 0xa5, 0x54, 0x40, 0x40, 0x12, 0x29, 0x28, 0x00, 0x24, 0x40, 0x22, 0x50, 
  0x0a, 0xa0, 0x85, 0x4a, 0x54, 0x92, 0x95, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x2a, 0x88, 0x85, 
  0x00, 0x00, 0x0a, 0x55, 0x4a, 0x49, 0x02, 0x01, 0x00, 0x01, 0x25, 0x00, 0x00, 0x00, 0x44, 0x20, 
  0x00, 0x00, 0x29, 0x22, 0x29, 0x54, 0xa9, 0x50, 0x00, 0x00, 0x00, 0x48, 0x00, 0x02, 0x29, 0x4a, 
  0x48, 0x08, 0xaa, 0x95, 0x55, 0x2a, 0x24, 0x44, 0x22, 0x00, 0x10, 0x01, 0x00, 0x80, 0x02, 0x24, 
  0x02, 0xa4, 0xa9, 0x50, 0x89, 0x49, 0x49, 0x29, 0x00, 0x12, 0x00, 0x00, 0x22, 0x00, 0x00, 0x11, 
  0x50, 0x10, 0xa5, 0x2a, 0x55, 0x25, 0x24, 0x82, 0x48, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x05, 0x41, 0x54, 0x85, 0x24, 0xaa, 0x92, 0x54, 0x01, 0x01, 0x20, 0x00, 0x14, 0x00, 0x00, 0x00, 
  0x20, 0x09, 0x4a, 0xa8, 0x92, 0xa8, 0x49, 0x01, 0x50, 0x08, 0x08, 0x00, 0x02, 0xa9, 0x00, 0x00, 
  0x09, 0x01, 0x52, 0x52, 0x4a, 0x4b, 0x22, 0x54, 0x04, 0x41, 0x02, 0x80, 0x00, 0x40, 0x22, 0x00, 
  0x40, 0x91, 0x4a, 0x89, 0x29, 0x54, 0x94, 0x00, 0x80, 0x04, 0x00, 0x50, 0x00, 0x15, 0x00, 0x20, 
  0x0a, 0x05, 0x54, 0x54, 0x95, 0x2a, 0x49, 0x52, 0x11, 0x10, 0x00, 0x0a, 0x00, 0x00, 0xa8, 0x80, 
  0x00, 0x02, 0xa5, 0x42, 0x42, 0xa5, 0x50, 0x08, 0x40, 0x00, 0x00, 0x05, 0x40, 0x00, 0x04, 0x04, 
  0x29, 0x02, 0x95, 0x29, 0x28, 0x92, 0x8a, 0xa2, 0x04, 0x40, 0x00, 0x00, 0xa8, 0x00, 0x02, 0xa0, 
  0x00, 0x0a, 0xc8, 0x94, 0x8a, 0x55, 0x51, 0x10, 0x90, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x12, 
  0x40, 0x82, 0x55, 0x42, 0x25, 0x2a, 0x54, 0x8a, 0x01, 0x20, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x04, 
  0x02, 0x05, 0x49, 0x29, 0x50, 0x89, 0x4a, 0x40, 0x44, 0x00, 0x00, 0x00, 0x02, 0x94, 0x00, 0x00, 
  0x00, 0x05, 0x54, 0x94, 0x0a, 0x55, 0x24, 0x94, 0x00, 0x80, 0x00, 0x00, 0x00, 0x52, 0x80, 0x00, 
  0x00, 0x85, 0x42, 0x22, 0xa5, 0x02, 0xa9, 0x21, 0x24, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x54, 0x00, 
  0x02, 0x0a, 0x49, 0x08, 0x10, 0xa8, 0x92, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x00, 
  0x00, 0x25, 0x44, 0xa5, 0x45, 0x02, 0x48, 0xa1, 0x22, 0x00, 0x00, 0x00, 0x00, 0x05, 0x49, 0x50, 
  0x00, 0x8a, 0xa2, 0x10, 0x90, 0x50, 0x25, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x8a, 
  0x02, 0x0a, 0x80, 0x8a, 0x25, 0x00, 0x00, 0x20, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x51, 
  0x00, 0x4a, 0xa2, 0x41, 0x00, 0x44, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x2a, 
  0x01, 0x0a, 0x80, 0x28, 0xa4, 0x00, 0x40, 0x04, 0x48, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x91, 
  0x04, 0x15, 0x40, 0x02, 0x00, 0x80, 0x00, 0x90, 0x02, 0x00, 0x40, 0x00, 0x20, 0x00, 0x15, 0x4a, 
  0x00, 0x8a, 0xa0, 0x01, 0x50, 0x09, 0x14, 0x01, 0x50, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x24, 
  0x08, 0x15, 0x00, 0x00, 0x80, 0x00, 0x40, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x91, 
  0x02, 0x4a, 0xa0, 0x80, 0x20, 0x02, 0x12, 0x51, 0x44, 0x00, 0x00, 0x20, 0x82, 0x00, 0x02, 0x44, 
  0x10, 0x14, 0x80, 0x00, 0x00, 0x10, 0x80, 0x04, 0x28, 0x11, 0x00, 0x80, 0x00, 0x00, 0x00, 0x12, 
  0x00, 0x8a, 0x40, 0x10, 0x40, 0x02, 0x54, 0x91, 0x40, 0x00, 0x02, 0x02, 0x08, 0x00, 0x01, 0x00, 
  0x02, 0x28, 0x80, 0x00, 0x00, 0x01, 0x00, 0x42, 0x2a, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x04, 0x40, 0x02, 0x00, 0x08, 0x49, 0x01, 0x40, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x10, 
  0x00, 0x52, 0x20, 0x00, 0x00, 0x01, 0x00, 0x04, 0x94, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x09, 0x00, 0x88, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x40, 0x00, 0x40, 
  0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x48, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x80, 0x10, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 
  0x00, 0x11, 0x40, 0x08, 0x00, 0x80, 0x00, 0x02, 0x20, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x90, 0x00, 0x40, 0x04, 
  0x00, 0x10, 0x80, 0x00, 0x22, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x20, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x20, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x04, 0xa1, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x00, 0x21, 0x00, 0x00, 0x41, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x14, 0x40, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x04, 0x00, 0x20, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
  0x02, 0x20, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x44, 0x00, 0x08, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x08, 0x08, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x04, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x10, 0x80, 0x14, 0x20, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00, 0x00, 0x0a, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Luke', 128x180px
const unsigned char Luke [] PROGMEM = {
  0x1f, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x13, 0xfa, 0xe0, 0x00, 
  0x1f, 0x7f, 0xfe, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x25, 0x55, 0x52, 0x45, 0xfd, 0xe0, 0x00, 
  0x3f, 0xfd, 0xff, 0x7e, 0xa8, 0x08, 0x00, 0x00, 0x00, 0x90, 0x00, 0x08, 0x2b, 0xf4, 0xf0, 0x00, 
  0x5d, 0xff, 0xff, 0xbd, 0x41, 0x10, 0x00, 0x00, 0x00, 0x45, 0x50, 0x42, 0x27, 0xfd, 0xf0, 0x00, 
  0x08, 0x2b, 0xfe, 0xa1, 0x58, 0x90, 0x00, 0x00, 0x01, 0x22, 0x02, 0xa8, 0x8b, 0xb5, 0x60, 0x00, 
  0xa5, 0x00, 0x7d, 0x41, 0x2a, 0x00, 0x00, 0x02, 0x00, 0x94, 0xa9, 0x2c, 0x35, 0xda, 0xb8, 0x00, 
  0x10, 0x20, 0x00, 0x0c, 0x50, 0x00, 0x00, 0x08, 0x01, 0x01, 0x04, 0x91, 0x1b, 0xff, 0xe8, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x02, 0x00, 0x02, 0xaa, 0x50, 0x44, 0x57, 0xff, 0xec, 0x00, 
  0x22, 0x08, 0x20, 0x00, 0x00, 0x03, 0x02, 0x40, 0x2a, 0x11, 0x0a, 0x91, 0x1a, 0xd7, 0xd0, 0x00, 
  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x82, 0xa4, 0xa0, 0x44, 0xaf, 0xf2, 0x7c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x82, 0x04, 0x12, 0x15, 0x29, 0x5f, 0xe4, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x02, 0x04, 0x20, 0x05, 0x49, 0x40, 0x82, 0x5f, 0xe4, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x21, 0x40, 0xaa, 0x24, 0x02, 0x29, 0x7f, 0xec, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xd4, 0x89, 0x09, 0x10, 0x00, 0x02, 0xbf, 0xc9, 0xbe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xea, 0x44, 0xb4, 0xa0, 0x03, 0x51, 0x7f, 0xc9, 0x3f, 0x00, 
  0x00, 0x84, 0x00, 0x00, 0x00, 0x07, 0xff, 0xb2, 0xd4, 0x00, 0x12, 0x25, 0xff, 0xd1, 0x7f, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xfd, 0xaa, 0xa0, 0x02, 0x52, 0xbf, 0x93, 0x3f, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0xff, 0xe9, 0x00, 0x02, 0x45, 0xff, 0x92, 0x5f, 0x87, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x54, 0x24, 0xd5, 0xbf, 0xd6, 0x6f, 0xdf, 
  0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x09, 0x24, 0x5f, 0xf4, 0x8a, 0x47, 0x7d, 0x6f, 0x9f, 0xcf, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x40, 0x12, 0x05, 0xff, 0xa5, 0xa5, 0x3e, 0x91, 0xbf, 0xef, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x50, 0xbf, 0xfd, 0x95, 0x7d, 0x79, 0x57, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa4, 0xa5, 0x7e, 0xff, 0xea, 0x94, 0x8a, 0x37, 0xff, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x29, 0x52, 0x5a, 0x65, 0x7d, 0x55, 0x52, 0x41, 0x2f, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa9, 0x07, 0x90, 0x21, 0x55, 0x48, 0x24, 0x3f, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x14, 0x01, 0x55, 0x10, 0xaa, 0xa2, 0x80, 0x0f, 0xff, 
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xc2, 0x00, 0x00, 0x42, 0x55, 0x10, 0x30, 0x03, 0xff, 
  0xa5, 0x54, 0x00, 0x00, 0x00, 0x00, 0x52, 0x28, 0x04, 0x20, 0x01, 0x54, 0xa5, 0x00, 0x07, 0xff, 
  0x49, 0x2b, 0xe8, 0x00, 0x00, 0x00, 0x0a, 0x84, 0x00, 0x88, 0x00, 0x2a, 0x90, 0x40, 0x0f, 0xff, 
  0x2a, 0xad, 0xf6, 0x80, 0x00, 0x00, 0x21, 0x20, 0x00, 0x00, 0x01, 0x55, 0x4a, 0x10, 0x03, 0xff, 
  0xaa, 0xb7, 0xfe, 0x00, 0x00, 0x01, 0x54, 0x08, 0x00, 0x00, 0x00, 0x2a, 0x20, 0x80, 0x00, 0x5f, 
  0x55, 0x7f, 0xfa, 0x80, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x04, 0x95, 0x54, 0x09, 0x00, 0x02, 
  0xab, 0xaf, 0xff, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x05, 0x40, 0x48, 0x00, 
  0x5a, 0xf7, 0xf4, 0xa0, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x24, 0xa8, 0x2a, 0x00, 0x00, 
  0xab, 0x2e, 0xed, 0x40, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x45, 0x40, 0x02, 0x07, 
  0x5a, 0xff, 0xfd, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x11, 0x20, 0x02, 
  0xab, 0x57, 0xff, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x84, 0x00, 0x00, 
  0x55, 0x5f, 0xf4, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x50, 0x08, 0x00, 
  0xb6, 0xef, 0xbe, 0x00, 0x10, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xa5, 0xe7, 0xfd, 
  0x5b, 0x7d, 0xd4, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x3f, 0xff, 
  0xaa, 0xdf, 0xf2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0xfb, 0xff, 
  0x57, 0x77, 0xdc, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x5f, 0xff, 
  0x5a, 0xae, 0x42, 0x21, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0xef, 0xff, 
  0xab, 0xff, 0xc9, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x7f, 0xff, 
  0x55, 0x7f, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xad, 0xff, 
  0x6d, 0xbf, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x55, 0x40, 0x00, 0x00, 0x00, 0x05, 0xf7, 0xff, 
  0xab, 0x4a, 0x94, 0xa0, 0x00, 0x04, 0x8a, 0x45, 0x55, 0x28, 0x00, 0x00, 0x00, 0x02, 0x3f, 0xff, 
  0x56, 0xbd, 0xa0, 0x00, 0x00, 0x50, 0x25, 0x35, 0x55, 0x52, 0x00, 0x00, 0x00, 0x01, 0xaf, 0xff, 
  0xad, 0xd6, 0xa8, 0x00, 0x12, 0x02, 0x91, 0x56, 0xaa, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x75, 0xff, 
  0x5a, 0xab, 0x61, 0x40, 0x80, 0xa8, 0x4a, 0xaa, 0xd5, 0x55, 0x55, 0x00, 0x00, 0x00, 0x9f, 0xff, 
  0xad, 0xfc, 0x90, 0x00, 0x00, 0x05, 0x55, 0x6d, 0x6d, 0x54, 0x94, 0xa0, 0x00, 0x00, 0xb7, 0xff, 
  0x56, 0xaf, 0xc0, 0x08, 0x04, 0x91, 0x55, 0xb6, 0xb5, 0xaa, 0xa5, 0x10, 0x00, 0x00, 0x1f, 0xff, 
  0xab, 0xd5, 0x20, 0x20, 0x20, 0x25, 0x55, 0x55, 0xaa, 0xaa, 0x92, 0xaa, 0x00, 0x00, 0x17, 0xff, 
  0x55, 0x7a, 0x80, 0x81, 0x16, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x40, 0x00, 0x00, 0x0d, 0xff, 
  0xaf, 0xed, 0x48, 0x00, 0x55, 0x55, 0x56, 0xdd, 0x55, 0x55, 0x55, 0x2a, 0x80, 0x00, 0x0f, 0xff, 
  0xb2, 0xb6, 0xa1, 0x02, 0xbb, 0xad, 0xbb, 0x65, 0xb5, 0x55, 0x24, 0x84, 0x00, 0x00, 0x05, 0xff, 
  0x5f, 0x57, 0x50, 0x09, 0x6d, 0x76, 0xd5, 0x5a, 0xd5, 0x54, 0x92, 0xa9, 0x00, 0x00, 0x07, 0xff, 
  0xab, 0xfc, 0x82, 0x42, 0xf5, 0xab, 0x7e, 0xee, 0xaa, 0xa2, 0x54, 0x44, 0x00, 0x00, 0x02, 0xff, 
  0x75, 0x55, 0x40, 0x09, 0xaa, 0xad, 0xd5, 0x55, 0xb5, 0x55, 0x42, 0xa9, 0x00, 0x00, 0x0a, 0xfe, 
  0x95, 0x6a, 0x01, 0x07, 0xd2, 0x12, 0xef, 0xfe, 0xda, 0xa9, 0x29, 0x04, 0x40, 0x00, 0x07, 0xdb, 
  0x5d, 0x14, 0x10, 0x22, 0x54, 0x84, 0xbb, 0x55, 0xad, 0xaa, 0x94, 0xa9, 0x00, 0x00, 0x02, 0xfd, 
  0x55, 0x74, 0x05, 0x0b, 0x57, 0x72, 0x57, 0xff, 0x76, 0xaa, 0x41, 0x14, 0x00, 0x00, 0x0d, 0xd5, 
  0x2a, 0xd4, 0x00, 0x05, 0xbd, 0xdf, 0x5d, 0xb5, 0xd0, 0x49, 0x24, 0x42, 0x80, 0x00, 0x07, 0xfe, 
  0xb5, 0x05, 0x80, 0x96, 0xf7, 0x75, 0xef, 0xff, 0x55, 0x00, 0x01, 0x14, 0x00, 0x00, 0x0a, 0xdb, 
  0xaa, 0xa2, 0x40, 0x0b, 0xfd, 0xaa, 0xb5, 0x55, 0xd4, 0xaa, 0x48, 0x42, 0x40, 0x00, 0x09, 0x6e, 
  0x0a, 0xaa, 0x22, 0x0f, 0xa8, 0x81, 0x7f, 0xfe, 0xbb, 0xfd, 0x00, 0x15, 0x00, 0x00, 0x2b, 0x94, 
  0xa5, 0x68, 0x80, 0x0d, 0xe7, 0xa1, 0x55, 0x53, 0x56, 0xaf, 0xea, 0x40, 0x80, 0x00, 0x3f, 0xfa, 
  0xd5, 0x12, 0x00, 0x9f, 0x51, 0x4a, 0xbe, 0xd5, 0x7b, 0xf5, 0x54, 0x0a, 0x40, 0x00, 0x7f, 0xed, 
  0x56, 0x81, 0x21, 0x1b, 0xbe, 0xa0, 0x53, 0x29, 0x55, 0x15, 0xfb, 0x20, 0xa0, 0x00, 0x05, 0xfe, 
  0xb2, 0xb4, 0x01, 0xbe, 0xd7, 0xff, 0xac, 0x85, 0x56, 0xc0, 0x55, 0x45, 0x10, 0x00, 0x64, 0x75, 
  0x15, 0x50, 0x03, 0x2b, 0xba, 0xa8, 0xd5, 0x50, 0xa5, 0x42, 0xad, 0x50, 0xa0, 0x00, 0x3b, 0x44, 
  0x49, 0x14, 0x02, 0xfe, 0xd5, 0x57, 0x6a, 0x8a, 0x55, 0x04, 0x17, 0x45, 0x00, 0x00, 0xae, 0xaa, 
  0x0c, 0xd0, 0x06, 0xb7, 0xed, 0xaa, 0xb5, 0x21, 0x2a, 0xd1, 0x5a, 0xa8, 0x80, 0x00, 0x2d, 0x5c, 
  0x40, 0x00, 0x42, 0xfe, 0xb6, 0xdd, 0x54, 0x94, 0x15, 0x6d, 0x0f, 0xd2, 0x00, 0x00, 0x96, 0xe1, 
  0x0a, 0x95, 0x06, 0xdb, 0xdb, 0x6b, 0xaa, 0x42, 0xa2, 0xb5, 0x65, 0x48, 0x80, 0x01, 0x55, 0x10, 
  0x00, 0x00, 0x03, 0x7e, 0xfd, 0xbd, 0x51, 0x10, 0x95, 0x55, 0x55, 0x64, 0x00, 0x02, 0x55, 0xca, 
  0x28, 0x00, 0x02, 0xef, 0xae, 0xed, 0x54, 0x4a, 0x4a, 0xaa, 0xaa, 0x92, 0x00, 0x05, 0x5c, 0x54, 
  0x95, 0x00, 0x43, 0xfb, 0xf7, 0xf7, 0x52, 0x05, 0x55, 0x55, 0x54, 0xa0, 0x00, 0x00, 0x37, 0xf0, 
  0x00, 0x11, 0x02, 0xbe, 0xdf, 0x5d, 0xa9, 0x21, 0x29, 0x55, 0x52, 0x55, 0x02, 0xa0, 0x02, 0x9a, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xf7, 0xec, 0x84, 0xd5, 0x55, 0x55, 0x20, 0x0a, 0xb0, 0x40, 0x01, 
  0x4a, 0xa4, 0x01, 0xee, 0xfd, 0xfa, 0xf5, 0x51, 0x55, 0x55, 0x55, 0x4a, 0x15, 0x54, 0x00, 0x00, 
  0x24, 0x00, 0x01, 0xbf, 0xf7, 0xaf, 0x54, 0xa8, 0xb5, 0x55, 0xaa, 0x40, 0x15, 0x6b, 0x4a, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xea, 0x56, 0xdd, 0x56, 0x55, 0x28, 0x15, 0x54, 0xa8, 0x00, 
  0x87, 0xb0, 0x00, 0xfb, 0xda, 0xbd, 0x75, 0x7a, 0xf7, 0x6b, 0x6a, 0x81, 0x56, 0x52, 0x00, 0xa8, 
  0x00, 0x00, 0x01, 0xbf, 0xff, 0x57, 0xde, 0x8b, 0x5d, 0xad, 0x55, 0x51, 0x55, 0x50, 0x80, 0x00, 
  0x00, 0x02, 0x00, 0xff, 0xaa, 0xed, 0x76, 0xb5, 0xfe, 0xd5, 0xaa, 0x04, 0x0a, 0x45, 0x3a, 0x00, 
  0x68, 0x00, 0x01, 0xde, 0xff, 0xb7, 0xdb, 0x55, 0x5f, 0xba, 0xaa, 0xa2, 0x04, 0x80, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x7b, 0xfb, 0xfd, 0x7d, 0x55, 0xb6, 0xee, 0xd5, 0x01, 0x55, 0x30, 0xad, 0x69, 
  0x00, 0x00, 0x01, 0xff, 0xde, 0xae, 0xab, 0x55, 0x5f, 0xb5, 0x54, 0x8a, 0x88, 0x00, 0x00, 0x04, 
  0x00, 0x28, 0x01, 0x6f, 0x7b, 0xf7, 0xf5, 0xaa, 0xb6, 0xdb, 0x54, 0x24, 0x4a, 0x00, 0x08, 0xd0, 
  0x00, 0x45, 0x00, 0xfd, 0xf8, 0x14, 0x9e, 0xfe, 0xdb, 0xed, 0xaa, 0x8b, 0x50, 0x08, 0x00, 0x04, 
  0x80, 0x00, 0x01, 0xf7, 0xef, 0x42, 0x6b, 0xab, 0x56, 0xb5, 0x54, 0x15, 0x00, 0x40, 0x42, 0x80, 
  0x00, 0x00, 0x00, 0x7f, 0xfd, 0xb0, 0x04, 0xbd, 0xef, 0xda, 0xaa, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xdf, 0xf7, 0xdd, 0x40, 0x47, 0x75, 0x6d, 0x50, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7d, 0xbe, 0xf6, 0xb5, 0x11, 0xde, 0xb5, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xfb, 0xff, 0xda, 0xa5, 0xf5, 0xd6, 0xa0, 0x00, 0x00, 0x10, 0xc0, 0x00, 
  0xa0, 0x00, 0x00, 0x1f, 0xff, 0xb5, 0x7d, 0xae, 0xbe, 0xaa, 0xb5, 0x00, 0x00, 0x04, 0x08, 0x00, 
  0x14, 0x90, 0x00, 0x97, 0xee, 0xff, 0xee, 0xd5, 0xeb, 0x55, 0x54, 0x00, 0x08, 0x40, 0x00, 0x28, 
  0x49, 0x40, 0x00, 0x0f, 0xbf, 0xf6, 0xf7, 0x7b, 0x75, 0x6d, 0xa0, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x52, 0x20, 0x00, 0x05, 0xfb, 0xdf, 0xbd, 0xad, 0xbd, 0xb5, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x09, 0x15, 0x00, 0x03, 0xfe, 0xfa, 0xef, 0xf6, 0xd6, 0xaa, 0xa0, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0xa4, 0xa2, 0x50, 0x01, 0xf7, 0xdf, 0xba, 0xaf, 0x6a, 0xdb, 0x4a, 0x00, 0x20, 0x00, 0x00, 0x00, 
  0x11, 0x14, 0x8a, 0x00, 0xfe, 0xf5, 0xef, 0xf5, 0xb5, 0x6d, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x4a, 0x42, 0x41, 0x42, 0xdb, 0xde, 0xb5, 0x5e, 0xdb, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x50, 0x94, 0x94, 0x58, 0xff, 0x7f, 0xdd, 0xeb, 0x6d, 0xba, 0x90, 0x00, 0x00, 0x02, 0xc0, 0x00, 
  0x25, 0x22, 0x25, 0x22, 0x6f, 0xf5, 0x6b, 0x5a, 0xaa, 0xd5, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x88, 0x49, 0x48, 0x88, 0xfd, 0xff, 0xfd, 0xad, 0xb6, 0xaa, 0xa0, 0x00, 0x28, 0x00, 0x00, 0x00, 
  0x22, 0x92, 0x25, 0x20, 0xd7, 0x6e, 0xa6, 0xf6, 0xab, 0x55, 0x58, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x48, 0x49, 0x10, 0x80, 0xff, 0xfb, 0xfa, 0xaa, 0xda, 0xab, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x25, 0x22, 0xa4, 0xa4, 0xbb, 0x6e, 0xab, 0x55, 0x6d, 0x7d, 0xa8, 0x04, 0x00, 0x00, 0x08, 0x00, 
  0x48, 0x88, 0x0a, 0x00, 0xff, 0xfb, 0xd5, 0xbf, 0xb7, 0xaa, 0xd0, 0x40, 0x08, 0x00, 0x00, 0x00, 
  0x22, 0x25, 0x52, 0x90, 0xef, 0xff, 0xff, 0xea, 0xda, 0xff, 0x49, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x48, 0x92, 0x4a, 0x40, 0xff, 0xff, 0xfe, 0xbf, 0x7f, 0xaa, 0xa0, 0x05, 0x20, 0x00, 0x00, 0x00, 
  0x05, 0x49, 0x25, 0x04, 0xbb, 0xff, 0xef, 0xeb, 0xdb, 0xfd, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x52, 0x2a, 0xa8, 0x20, 0xff, 0xff, 0xba, 0xbd, 0x7e, 0xd6, 0xa0, 0x12, 0x40, 0x00, 0x00, 0x00, 
  0x55, 0x48, 0x95, 0x01, 0xff, 0xff, 0xff, 0xd7, 0xff, 0xfb, 0x45, 0x40, 0x20, 0x00, 0x00, 0x00, 
  0x29, 0x55, 0x48, 0x48, 0xed, 0xff, 0x55, 0x7f, 0xf7, 0x5d, 0x10, 0x14, 0x80, 0x00, 0x00, 0x00, 
  0x94, 0xa4, 0xaa, 0x01, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0xf6, 0xa2, 0x40, 0x08, 0x00, 0x00, 0x00, 
  0x42, 0x52, 0x24, 0xa1, 0xbf, 0xfd, 0x5b, 0x7b, 0xfe, 0xd8, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x59, 0x29, 0x51, 0x01, 0xfb, 0x6f, 0xff, 0xff, 0xff, 0xea, 0xa1, 0x21, 0x20, 0x00, 0x00, 0x00, 
  0x45, 0x4a, 0xa8, 0x43, 0xff, 0xff, 0xed, 0xbf, 0xf6, 0xa9, 0x08, 0x12, 0x00, 0x00, 0x00, 0x00, 
  0x29, 0x24, 0x85, 0x11, 0xff, 0xff, 0x7f, 0xff, 0xdf, 0xd2, 0x42, 0x88, 0xa8, 0x00, 0x10, 0x00, 
  0x94, 0xaa, 0x68, 0x43, 0xf7, 0x7f, 0xff, 0xff, 0x7d, 0x24, 0x28, 0x22, 0x01, 0x00, 0x00, 0x00, 
  0x4a, 0x92, 0x85, 0x03, 0xff, 0xff, 0xfd, 0xff, 0xfa, 0x91, 0x00, 0x88, 0xa8, 0x40, 0x00, 0x00, 
  0x24, 0xaa, 0xa8, 0x29, 0xff, 0xff, 0xf7, 0xff, 0xed, 0x44, 0xa4, 0x22, 0x02, 0x28, 0x00, 0x00, 
  0xaa, 0xa4, 0xa5, 0x03, 0xff, 0xff, 0xff, 0xfd, 0xb2, 0x10, 0x01, 0x08, 0x90, 0x80, 0x00, 0x00, 
  0x15, 0x52, 0x90, 0xa1, 0xff, 0xfd, 0xdf, 0xff, 0xc9, 0x4a, 0x94, 0x42, 0x02, 0x0a, 0x00, 0x00, 
  0xa4, 0x95, 0x44, 0x0a, 0xff, 0xff, 0xff, 0xed, 0x54, 0x22, 0x01, 0x10, 0x80, 0x40, 0x00, 0x00, 
  0x2a, 0xaa, 0x11, 0x21, 0xfd, 0xff, 0xff, 0xbe, 0x82, 0x94, 0xa8, 0x24, 0x24, 0x12, 0xa4, 0x00, 
  0x92, 0xa9, 0x44, 0x05, 0x7f, 0xff, 0xfe, 0xf5, 0x29, 0x48, 0x02, 0x02, 0x01, 0x40, 0x00, 0x00, 
  0x4a, 0x94, 0x11, 0x41, 0x7f, 0xfe, 0xd7, 0xa8, 0x94, 0x22, 0xa8, 0xa8, 0x94, 0x14, 0x48, 0x00, 
  0x2a, 0xaa, 0x88, 0x11, 0xbf, 0xef, 0xfd, 0x65, 0x22, 0x90, 0x02, 0x00, 0x00, 0x80, 0x00, 0x04, 
  0x94, 0xa8, 0x25, 0x04, 0xff, 0xfa, 0x6b, 0x12, 0x92, 0x4a, 0xa0, 0x92, 0x52, 0x20, 0x20, 0x00, 
  0x52, 0xa5, 0x00, 0x40, 0xf7, 0xae, 0xfc, 0xa4, 0x49, 0x00, 0x08, 0x00, 0x08, 0x89, 0x00, 0x00, 
  0x2a, 0xa8, 0xa9, 0x11, 0x7f, 0xfb, 0xd2, 0x90, 0x20, 0x52, 0x42, 0x52, 0xa2, 0x20, 0x00, 0x00, 
  0x55, 0x22, 0x00, 0x00, 0xbf, 0xd7, 0x48, 0x42, 0x0a, 0x00, 0x10, 0x80, 0x08, 0x00, 0x00, 0x10, 
  0x2a, 0x90, 0xaa, 0xa2, 0x6f, 0x69, 0x55, 0x14, 0x80, 0x95, 0x44, 0x15, 0x41, 0x08, 0x08, 0x80, 
  0x54, 0xaa, 0x00, 0x00, 0x37, 0x95, 0x01, 0x42, 0x00, 0x00, 0x11, 0x00, 0x14, 0x20, 0x80, 0x00, 
  0x55, 0x40, 0x4a, 0xa8, 0x9a, 0xaa, 0x44, 0xa8, 0xa8, 0x44, 0x80, 0x4a, 0x80, 0x00, 0x00, 0x02, 
  0x55, 0x55, 0x00, 0x00, 0x2d, 0x55, 0x12, 0x55, 0x11, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x55, 0x54, 0x2a, 0xa4, 0x05, 0x52, 0xaa, 0xa0, 0x88, 0x09, 0x00, 0x2a, 0x22, 0x50, 0x00, 0x42, 
  0x95, 0x55, 0x10, 0x10, 0x2a, 0xaa, 0xaa, 0x4a, 0xa5, 0x40, 0x54, 0x80, 0x00, 0x04, 0x95, 0x10, 
  0x55, 0x55, 0x4a, 0xa1, 0x01, 0x2a, 0xa9, 0x25, 0x50, 0x92, 0x00, 0x00, 0x89, 0x20, 0x20, 0x00, 
  0xaa, 0xaa, 0xa5, 0x10, 0x0c, 0xaa, 0xaa, 0x92, 0x4a, 0x48, 0xa4, 0x04, 0x04, 0x02, 0x80, 0x00, 
  0x55, 0x6a, 0xa8, 0xa4, 0x02, 0xaa, 0xa5, 0x4a, 0xa2, 0x85, 0x00, 0x00, 0x50, 0x80, 0x00, 0x00, 
  0xaa, 0xaa, 0xaa, 0x10, 0x12, 0xaa, 0x94, 0x55, 0x54, 0x28, 0xa8, 0x01, 0x02, 0x14, 0x48, 0x00, 
  0x55, 0x5a, 0xaa, 0xa4, 0x04, 0xb6, 0xaa, 0xaa, 0x4a, 0x95, 0x00, 0x08, 0x90, 0x41, 0x01, 0x00, 
  0xaa, 0xd5, 0x55, 0x10, 0x81, 0x55, 0x45, 0x55, 0x50, 0x48, 0xa8, 0x22, 0x01, 0x12, 0x50, 0x00, 
  0x55, 0x56, 0xaa, 0xc4, 0x00, 0xaa, 0xaa, 0xaa, 0x4a, 0xa5, 0x02, 0x08, 0x88, 0xa4, 0x00, 0x00, 
  0xaa, 0xaa, 0xd5, 0x50, 0x02, 0xaa, 0x2a, 0xa9, 0x22, 0x52, 0x51, 0x52, 0x25, 0x12, 0x89, 0x00, 
  0x55, 0x5a, 0xaa, 0xa2, 0x01, 0x24, 0xaa, 0x54, 0x95, 0x2a, 0x94, 0x88, 0x88, 0xa4, 0x40, 0x48, 
  0xaa, 0xaa, 0xb5, 0x58, 0x84, 0x92, 0xaa, 0xa2, 0x54, 0xaa, 0x45, 0x52, 0x25, 0x09, 0x14, 0x00, 
  0x55, 0x55, 0x56, 0xa4, 0x00, 0x55, 0x55, 0x15, 0x52, 0xaa, 0xaa, 0xa9, 0x50, 0xa0, 0x41, 0x42, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x02, 0xaa, 0xa4, 0xaa, 0xaa, 0xaa, 0x95, 0x44, 0x0a, 0x15, 0x14, 0x08, 
  0x55, 0xaa, 0xd5, 0x55, 0x20, 0x95, 0x52, 0x95, 0x55, 0x55, 0x52, 0x52, 0xd5, 0x42, 0x40, 0x80, 
  0xaa, 0xad, 0x55, 0x55, 0x02, 0xaa, 0x95, 0x52, 0xa8, 0xa8, 0x95, 0x09, 0x20, 0x28, 0x8a, 0x20, 
  0x55, 0x55, 0x55, 0x55, 0x88, 0xa4, 0x4a, 0xaa, 0x96, 0x55, 0x54, 0xa4, 0x95, 0x45, 0x10, 0x04, 
  0xaa, 0xaa, 0xaa, 0xd6, 0xa2, 0x92, 0xaa, 0xaa, 0xa9, 0x45, 0x52, 0x95, 0x44, 0xa8, 0x42, 0x40, 
  0x2a, 0xaa, 0xab, 0x5a, 0x81, 0x55, 0x55, 0x55, 0x55, 0x54, 0xaa, 0x52, 0x2a, 0x12, 0x10, 0x08, 
  0x95, 0x55, 0x55, 0x55, 0x61, 0x2a, 0xaa, 0xaa, 0xa4, 0x92, 0x95, 0x29, 0x41, 0x48, 0x85, 0x20, 
  0xa2, 0xaa, 0xb5, 0x6a, 0x84, 0xaa, 0xaa, 0xaa, 0x95, 0x4a, 0xa4, 0xa4, 0xaa, 0x52, 0x50, 0x02, 
  0xd5, 0x56, 0xd6, 0xab, 0x62, 0xaa, 0xaa, 0xaa, 0xaa, 0x2a, 0x52, 0x95, 0x15, 0x08, 0x04, 0x90, 
  0xea, 0xaa, 0xaa, 0xad, 0x41, 0x29, 0x55, 0x55, 0x51, 0x51, 0x4a, 0x52, 0xa4, 0xa2, 0xa8, 0x40, 
  0xb5, 0x6a, 0xaa, 0xd5, 0x51, 0x55, 0x55, 0x55, 0x4c, 0xaa, 0xa5, 0x4a, 0x92, 0x54, 0x02, 0x0a, 
  0x7a, 0xad, 0x5a, 0xaa, 0xa1, 0x55, 0x55, 0x55, 0x52, 0x4a, 0x29, 0x2a, 0x55, 0x22, 0xa9, 0x40, 
  0xb5, 0x55, 0x55, 0x6d, 0x42, 0xaa, 0xaa, 0xaa, 0xa9, 0x25, 0x45, 0x55, 0x49, 0x50, 0x04, 0x10, 
  0xda, 0xaa, 0xaa, 0xaa, 0xa1, 0x55, 0x55, 0x55, 0x25, 0x52, 0x55, 0x52, 0xa4, 0x8a, 0xa9, 0x44, 
  0xf5, 0x6a, 0xad, 0x55, 0xa4, 0xaa, 0xaa, 0xaa, 0x95, 0x29, 0x54, 0xa9, 0x2a, 0x44, 0x42, 0x10, 
  0xaa, 0xab, 0x6a, 0xda, 0xa2, 0xad, 0x55, 0x55, 0x4a, 0x8a, 0x55, 0x4a, 0x95, 0x2a, 0x94, 0x82, 
  0xbd, 0xad, 0x55, 0x56, 0x82, 0xaa, 0xaa, 0xaa, 0x54, 0x52, 0xaa, 0xa9, 0x52, 0x80, 0x40, 0x50, 
  0xca, 0xaa, 0xab, 0x6a, 0xc4, 0xaa, 0xd5, 0x55, 0x2a, 0xa9, 0x55, 0x55, 0x4a, 0x55, 0x2a, 0x04, 
  0xb5, 0x55, 0x55, 0x55, 0x42, 0xaa, 0xaa, 0xa9, 0x51, 0x15, 0x2a, 0xa5, 0x2a, 0xa8, 0x84, 0xa1, 
  0x55, 0x6a, 0xb6, 0xaa, 0xa5, 0x55, 0x55, 0x54, 0xaa, 0xa2, 0xa9, 0x55, 0x55, 0x05, 0x51, 0x08, 
  0xaa, 0xad, 0xaa, 0xda, 0x82, 0xaa, 0xaa, 0xa2, 0x84, 0x95, 0x55, 0x2a, 0xaa, 0xa8, 0x08, 0x42, 
  0x56, 0xaa, 0xaa, 0xaa, 0xaa, 0xad, 0x55, 0x5a, 0xb2, 0x55, 0x55, 0x55, 0x55, 0x05, 0x52, 0x10, 
  0xaa, 0xd5, 0x56, 0xaa, 0x85, 0x55, 0x55, 0x45, 0x49, 0x2a, 0xaa, 0xaa, 0xa4, 0xa8, 0x84, 0x88, 
  0x5a, 0xaa, 0xb5, 0x51, 0x4a, 0xaa, 0xaa, 0xaa, 0x24, 0xaa, 0xaa, 0xaa, 0x95, 0x14, 0x51, 0x22, 
  0xab, 0x5a, 0xd5, 0xa2, 0x85, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0x54, 0xa2, 0x04, 0x00, 
  0xb5, 0x55, 0x56, 0x91, 0x52, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x55, 0x52, 0x49, 0x51, 0x48, 
  0xaa, 0xab, 0x5a, 0xa5, 0x0a, 0x56, 0xaa, 0xa8, 0x09, 0x55, 0x54, 0xa9, 0x2a, 0x92, 0x04, 0x00
};

const unsigned char TieFighter [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x03, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x78, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x21, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x21, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x29, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x09, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xf8, 0x8f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x00, 0x49, 0xff, 0xff, 0xff, 0xe6, 0x00, 0x00, 0x8f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x49, 0xff, 0xff, 0xff, 0xe4, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x59, 0xff, 0xff, 0xff, 0xe4, 0x00, 0x01, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x80, 0x11, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0x6f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x80, 0x91, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x02, 0x67, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0x80, 0x81, 0xff, 0xff, 0xff, 0xc2, 0x00, 0x02, 0xa7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0x80, 0x21, 0xff, 0xff, 0xff, 0xda, 0x00, 0x00, 0xa7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0x80, 0x21, 0xff, 0xff, 0xff, 0xd8, 0x00, 0x04, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0x81, 0x21, 0xff, 0xff, 0xff, 0xd8, 0x00, 0x01, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf2, 0x01, 0x01, 0xff, 0xff, 0xff, 0xd1, 0x00, 0x09, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x00, 0x01, 0xff, 0xff, 0xff, 0x81, 0x00, 0x0a, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x00, 0x45, 0xff, 0xff, 0xff, 0xa5, 0x00, 0x12, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x42, 0x45, 0xff, 0xff, 0xff, 0xa4, 0x00, 0x10, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x42, 0x44, 0xff, 0xff, 0xff, 0xa4, 0x80, 0x04, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf5, 0x40, 0x04, 0xff, 0xff, 0xff, 0xa0, 0x80, 0x24, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0x44, 0x84, 0xff, 0xff, 0xff, 0x00, 0x80, 0x08, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0x44, 0x84, 0xff, 0xff, 0xff, 0x42, 0x00, 0x48, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0x04, 0x84, 0xff, 0xff, 0xff, 0x42, 0x40, 0x40, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0x00, 0x84, 0xff, 0xff, 0xff, 0x42, 0x40, 0x90, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe9, 0x08, 0x04, 0xff, 0xff, 0xff, 0x40, 0x40, 0x90, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x29, 0x04, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x20, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x29, 0x04, 0xff, 0xff, 0xfe, 0x01, 0x01, 0x20, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x21, 0x04, 0xff, 0xff, 0xfe, 0x81, 0x20, 0x00, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0xb0, 0x04, 0xff, 0xc0, 0x7e, 0x81, 0x22, 0x40, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0xfe, 0x00, 0x0e, 0x80, 0x22, 0x40, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x82, 0x00, 0xfc, 0x00, 0x04, 0x00, 0x1c, 0x80, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x82, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x80, 0x80, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x82, 0x00, 0xf0, 0x00, 0x01, 0x00, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd0, 0x82, 0x00, 0xc0, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0x02, 0x00, 0x80, 0x00, 0xf0, 0x19, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x02, 0x00, 0x00, 0x03, 0xdc, 0x06, 0x00, 0x80, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x02, 0x00, 0x80, 0x05, 0xda, 0x00, 0x00, 0x80, 0x09, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x06, 0x86, 0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd8, 0x01, 0x00, 0x80, 0x0f, 0xf6, 0x00, 0x00, 0x60, 0x09, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd2, 0x00, 0x42, 0x00, 0x0e, 0xf6, 0x00, 0x00, 0x0c, 0x09, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd1, 0x00, 0x12, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xc9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x06, 0x00, 0x0e, 0xf6, 0x00, 0x00, 0x00, 0x19, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0xf6, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x03, 0x00, 0x00, 0x0c, 0x04, 0x38, 0x00, 0x9c, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x02, 0x60, 0x40, 0x01, 0xb8, 0x82, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x18, 0x70, 0x03, 0xb8, 0x00, 0x01, 0x00, 0x11, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x02, 0xf0, 0x01, 0xb1, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0x04, 0x00, 0xf8, 0x00, 0x04, 0x02, 0x60, 0x00, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0x04, 0x00, 0xfc, 0x00, 0x0c, 0x02, 0x11, 0x00, 0x13, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0x64, 0x04, 0xff, 0x00, 0x3c, 0x00, 0x89, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x64, 0x04, 0xff, 0xe1, 0xfc, 0x04, 0x89, 0x00, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe2, 0x20, 0x04, 0xff, 0xff, 0xfc, 0x01, 0x08, 0x00, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe2, 0xa0, 0x05, 0xff, 0xff, 0xfc, 0x09, 0x00, 0x00, 0x27, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe2, 0x80, 0x01, 0xff, 0xff, 0xfc, 0x08, 0x00, 0x80, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x82, 0x01, 0xff, 0xff, 0xfc, 0x02, 0x04, 0x80, 0x4f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x12, 0x01, 0xff, 0xff, 0xfe, 0x10, 0x04, 0x80, 0x4f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xec, 0x12, 0x09, 0xff, 0xff, 0xfe, 0x04, 0x04, 0x00, 0x4f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xed, 0x12, 0x09, 0xff, 0xff, 0xfe, 0xa4, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xed, 0x12, 0x09, 0xff, 0xff, 0xfe, 0x28, 0x02, 0x40, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe9, 0x12, 0x0b, 0xff, 0xff, 0xfe, 0x88, 0x02, 0x40, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe8, 0x00, 0x03, 0xff, 0xff, 0xfe, 0xc0, 0x02, 0x40, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xea, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x90, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xea, 0x08, 0x13, 0xff, 0xff, 0xfe, 0x10, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe2, 0x09, 0x13, 0xff, 0xff, 0xfe, 0x20, 0x01, 0x21, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x09, 0x13, 0xff, 0xff, 0xfe, 0x20, 0x01, 0x21, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x09, 0x17, 0xff, 0xff, 0xfe, 0x00, 0x01, 0x20, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe4, 0x09, 0x07, 0xff, 0xff, 0xfe, 0x40, 0x00, 0x02, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe4, 0x01, 0x07, 0xff, 0xff, 0xfe, 0x40, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe4, 0x01, 0x27, 0xff, 0xff, 0xff, 0x30, 0x00, 0x90, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x27, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x90, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x04, 0x2f, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x94, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x04, 0x2f, 0xff, 0xff, 0xff, 0xf8, 0x80, 0x05, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x04, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x60, 0x49, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0x04, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x90, 0x49, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x4b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x80, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x43, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x40, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xa2, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xd2, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xca, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe6, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Pod Racer
const unsigned char podRacer [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xf1, 0xf7, 0xff, 0xff, 0xef, 0x8f, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xe7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0xc7, 0xff, 0xff, 0xe7, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfd, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xfb, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xef, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xef, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xf7, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7b, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Trophy', 128x180px
const unsigned char Trophy [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x01, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0x80, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x3e, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x0f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xf8, 0x7f, 0xff, 
  0xff, 0xfc, 0x3f, 0xfe, 0x1c, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x18, 0x7f, 0xfc, 0x3f, 0xff, 
  0xff, 0xf8, 0x7c, 0x1f, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0xf8, 0x3e, 0x1f, 0xff, 
  0xff, 0xf0, 0xf0, 0x07, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0xe0, 0x0f, 0x0f, 0xff, 
  0xff, 0xf1, 0xc0, 0x03, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xc0, 0x03, 0x8f, 0xff, 
  0xff, 0xf1, 0xc3, 0xe1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x87, 0xc3, 0xc7, 0xff, 
  0xff, 0xe3, 0x8f, 0xf0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x0f, 0xf1, 0xc7, 0xff, 
  0xff, 0xe3, 0x8f, 0xf8, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x1f, 0xf1, 0xc7, 0xff, 
  0xff, 0xe3, 0x1f, 0xfc, 0x60, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x1f, 0xf8, 0xc7, 0xff, 
  0xff, 0xe3, 0x1f, 0xfc, 0x70, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x3f, 0xf8, 0xc7, 0xff, 
  0xff, 0xe3, 0x1f, 0xfc, 0x70, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x3f, 0xf8, 0xc7, 0xff, 
  0xff, 0xe3, 0x1f, 0xfe, 0x70, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x7f, 0xf8, 0xc7, 0xff, 
  0xff, 0xe3, 0x1f, 0xfe, 0x30, 0xc7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x8c, 0x7f, 0xf8, 0xc7, 0xff, 
  0xff, 0xe3, 0x8f, 0xfe, 0x38, 0xc7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x8c, 0x7f, 0xf1, 0xc7, 0xff, 
  0xff, 0xe3, 0x8f, 0xfe, 0x38, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x7f, 0xf1, 0xc7, 0xff, 
  0xff, 0xf1, 0x87, 0xfe, 0x38, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0xf1, 0xcf, 0xff, 
  0xff, 0xf1, 0xc7, 0xfe, 0x38, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0xe3, 0x8f, 0xff, 
  0xff, 0xf1, 0xc3, 0xfe, 0x38, 0xe7, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0xc3, 0x8f, 0xff, 
  0xff, 0xf8, 0xe1, 0xfe, 0x38, 0xe7, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0x87, 0x1f, 0xff, 
  0xff, 0xf8, 0x70, 0xff, 0x38, 0xe3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0x8f, 0x1f, 0xff, 
  0xff, 0xfc, 0x78, 0x7f, 0x18, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x08, 0xff, 0x1e, 0x3f, 0xff, 
  0xff, 0xfe, 0x3c, 0x3f, 0x00, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0x3c, 0x3f, 0xff, 
  0xff, 0xfe, 0x1e, 0x1f, 0x80, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x01, 0xf8, 0x78, 0x7f, 0xff, 
  0xff, 0xff, 0x0f, 0x0f, 0xe4, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf0, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0x87, 0x87, 0xfc, 0x73, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xe1, 0xe1, 0xff, 0xff, 
  0xff, 0xff, 0xc3, 0xc1, 0xfc, 0x71, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x83, 0xc3, 0xff, 0xff, 
  0xff, 0xff, 0xe1, 0xe0, 0xfc, 0x71, 0xc7, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x07, 0x87, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xf8, 0x3e, 0x71, 0xc7, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0x1f, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x3c, 0x1e, 0x79, 0xc7, 0xff, 0xff, 0xff, 0xfe, 0x38, 0x3e, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0x06, 0x39, 0xe7, 0xff, 0xff, 0xff, 0xfe, 0x60, 0xf8, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0x82, 0x38, 0xe3, 0xff, 0xff, 0xff, 0xfe, 0x41, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x83, 0xe0, 0x38, 0xe3, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xc1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc1, 0xf0, 0x3c, 0xf3, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0x83, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1c, 0x71, 0xff, 0xff, 0xff, 0xfc, 0x1e, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x3e, 0x1c, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x0f, 0x1e, 0x78, 0xff, 0xff, 0xff, 0xf8, 0x70, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0x0e, 0x38, 0xff, 0xff, 0xff, 0xf0, 0xe0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc3, 0x8e, 0x3c, 0xff, 0xff, 0xff, 0xf1, 0xc3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x63, 0x8f, 0x3c, 0x7f, 0xff, 0xff, 0xf1, 0xc6, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x31, 0xc7, 0x1c, 0x7f, 0xff, 0xff, 0xe3, 0x8c, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x11, 0xc7, 0x1e, 0x3f, 0xff, 0xff, 0xe3, 0x88, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0x01, 0xc3, 0x8e, 0x3f, 0xff, 0xff, 0xe3, 0x80, 0xc7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0x81, 0xc3, 0x84, 0x7f, 0xff, 0xff, 0xc3, 0x81, 0xc7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xe3, 0x81, 0xc0, 0x7f, 0xff, 0xff, 0xc1, 0xc7, 0xc7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0xff, 0x81, 0xe0, 0xff, 0xff, 0xff, 0x81, 0xff, 0x8f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x7f, 0x18, 0xff, 0xff, 0xff, 0xff, 0x88, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x08, 0x18, 0xff, 0xff, 0xff, 0xff, 0x18, 0x18, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0x1c, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'yoda', 128x180px
const unsigned char yoda [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xf9, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x7f, 0xfe, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8c, 0xff, 0xff, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0xff, 0xff, 0x98, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3b, 0xf3, 0xff, 0xdc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc1, 0x0f, 0xf8, 0xc3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x98, 0x7f, 0xfe, 0x19, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x30, 0xff, 0xff, 0x0c, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x46, 0xff, 0xff, 0x22, 0x47, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x5e, 0xff, 0xff, 0x78, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x3e, 0x43, 0xc0, 0x7c, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x3e, 0x0f, 0xf0, 0x7c, 0x59, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9b, 0x00, 0x1f, 0xf8, 0x00, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x3f, 0xcf, 0xf1, 0xfc, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x7c, 0xff, 0xcf, 0xf3, 0xff, 0x3e, 0x7f, 0xff, 0xfc, 0x00, 0x7f, 
  0xfc, 0x18, 0x03, 0xff, 0xc0, 0x7b, 0xff, 0xcf, 0xf3, 0xff, 0xde, 0x01, 0xff, 0x80, 0x00, 0x3f, 
  0xfc, 0x1f, 0xc0, 0x1f, 0x00, 0xf7, 0xff, 0xe7, 0xf7, 0xff, 0xef, 0x00, 0xf8, 0x07, 0xf8, 0x3f, 
  0xff, 0x00, 0xfe, 0x00, 0x3e, 0x7f, 0xff, 0xe7, 0xe7, 0xff, 0xf7, 0x7c, 0x01, 0xff, 0x80, 0xff, 
  0xff, 0x80, 0x7f, 0xf8, 0x7f, 0x7f, 0xc3, 0xe2, 0x47, 0xc3, 0xff, 0xfe, 0x3f, 0xfe, 0x03, 0xff, 
  0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x70, 0x0e, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 
  0xff, 0xe2, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x10, 0x08, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x47, 0xff, 
  0xff, 0xf1, 0x80, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x01, 0x8f, 0xff, 
  0xff, 0xfc, 0xc0, 0x00, 0x1f, 0xe0, 0x7f, 0x03, 0xc0, 0xff, 0x07, 0xf8, 0x00, 0x03, 0x1f, 0xff, 
  0xff, 0xfc, 0x72, 0x00, 0x07, 0xc0, 0xff, 0x80, 0x01, 0xff, 0x03, 0xe0, 0x00, 0x6e, 0x3f, 0xff, 
  0xff, 0xff, 0x39, 0xc0, 0x03, 0xc1, 0xff, 0xc1, 0xc3, 0xff, 0xc3, 0xc0, 0x03, 0x9c, 0xff, 0xff, 
  0xff, 0xff, 0x8e, 0xc0, 0x03, 0xc3, 0xc1, 0xc1, 0x83, 0x83, 0xe3, 0xc0, 0x03, 0x79, 0xff, 0xff, 
  0xff, 0xff, 0xc7, 0x78, 0x03, 0xcf, 0x00, 0xc3, 0xc3, 0x00, 0xfb, 0xc0, 0x1e, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xe3, 0xdc, 0x03, 0xfe, 0x00, 0x33, 0xc4, 0x00, 0x7f, 0xc0, 0x3b, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xf1, 0xee, 0x03, 0xe8, 0x00, 0x31, 0xc8, 0x00, 0x17, 0xc0, 0x77, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0x03, 0xff, 0xe3, 0xb7, 0xec, 0xc7, 0xff, 0xc0, 0xfe, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0x8f, 0xff, 0x9e, 0x3f, 0xfc, 0x79, 0xff, 0xf1, 0xfc, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x07, 0xfc, 0xfc, 0x40, 0x7f, 0xfe, 0x00, 0x1f, 0x3f, 0xe0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x7c, 0xfe, 0x00, 0xf0, 0x0f, 0x00, 0x7f, 0x3e, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0xbf, 0x01, 0xa0, 0x05, 0x80, 0xfd, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xc3, 0x30, 0x0c, 0xc3, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xfe, 0x78, 0x1e, 0x7f, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xfe, 0x7f, 0xfe, 0x7f, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1c, 0xff, 0xff, 0x38, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x04, 0x3f, 0xfc, 0x20, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x08, 0x1f, 0xf8, 0x10, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x40, 0x02, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x30, 0x0c, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char tatooine [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xc1, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0x00, 0x7f, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xfc, 0x3e, 0x1f, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x7f, 0x1f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 0xff, 0x8f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x3e, 0x1f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x08, 0x3f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf1, 0xff, 0xf1, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xe3, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xc7, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x87, 0xff, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0xff, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0xfe, 0x3f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xfe, 0x3f, 0xfe, 0x3f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
  0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfe, 0x3f, 0xff, 
  0xff, 0xfc, 0x7f, 0xff, 0x1f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfe, 0x1f, 0xff, 
  0xff, 0xf8, 0xff, 0xff, 0x0e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0x1f, 0xff, 
  0xff, 0xf1, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xf1, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xc7, 0xff, 
  0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xe3, 0xff, 
  0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xe3, 0xff, 
  0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0x83, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xe1, 0xff, 0xff, 0xf1, 0xff, 
  0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xf8, 0xff, 0xff, 0xf9, 0xff, 
  0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xfc, 0x7f, 0xff, 0xf8, 0xff, 
  0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0xff, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x7f, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x3f, 0xff, 0xfc, 0x7f, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x7f, 
  0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x3f, 
  0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x3f, 
  0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3d, 0xb7, 0x8c, 0x0f, 0xff, 0xfe, 0x3f, 
  0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x3f, 
  0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x1f, 
  0xf8, 0x70, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xf8, 0x18, 0x00, 0x0f, 0x1f, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 0x80, 0x01, 0xfc, 0x00, 0x1f, 
  0xf8, 0x00, 0x03, 0xfa, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x7f, 0xc0, 0x1f, 
  0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0x8f, 0xf0, 0x1f, 0xf0, 0x1f, 0xfc, 0x1f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0x8f, 0xc0, 0xff, 0xfe, 0x0f, 0xff, 0x0f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0x8f, 0x83, 0xff, 0xff, 0x83, 0xff, 0x8f, 
  0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0x8f, 0x0f, 0xff, 0xff, 0xe1, 0xff, 0x8f, 
  0xf0, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0x8f, 
  0xf0, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x7f, 0x8f, 
  0xf0, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x3f, 0x8f, 
  0xf1, 0x81, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x8f, 
  0xf1, 0xe0, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0xff, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xcf, 
  0xf3, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x1f, 0xf1, 0xf9, 0xe3, 0xc7, 0xff, 0x1f, 0x8f, 
  0xf3, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x1f, 0xe3, 0xf1, 0xe3, 0xc7, 0xff, 0x8f, 0xcf, 
  0xf1, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe3, 0xf1, 0xe3, 0xc7, 0xff, 0x8f, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe7, 0xf1, 0xe3, 0xc7, 0xff, 0xc7, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xc7, 0xf1, 0xe3, 0xc7, 0xff, 0xc7, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0xc7, 0xf9, 0xf7, 0xef, 0xff, 0xc7, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x8f, 
  0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x1f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x8f, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 
  0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 
  0xf8, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 
  0xfc, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 
  0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x3f, 
  0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 
  0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
  0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 
  0xff, 0x1f, 0xf0, 0x0f, 0xcf, 0xc0, 0x7e, 0x0f, 0xf8, 0x3f, 0x3e, 0x3c, 0xf8, 0x1f, 0xf8, 0xff, 
  0xff, 0x9f, 0xf8, 0x0f, 0x87, 0xe0, 0x7c, 0x07, 0xe0, 0x1f, 0x3e, 0x1c, 0xf8, 0x1f, 0xf9, 0xff, 
  0xff, 0x8f, 0xfe, 0x7f, 0x87, 0xf9, 0xf8, 0xf3, 0xe7, 0x8f, 0x3e, 0x1c, 0xf9, 0xff, 0xf1, 0xff, 
  0xff, 0x8f, 0xfe, 0x7f, 0x07, 0xf9, 0xf9, 0xf3, 0xe7, 0xcf, 0x3e, 0x0c, 0xf9, 0xff, 0xf1, 0xff, 
  0xff, 0xc7, 0xfe, 0x7f, 0x33, 0xf9, 0xf9, 0xf3, 0xc7, 0xcf, 0x3e, 0x00, 0xf8, 0x1f, 0xe3, 0xff, 
  0xff, 0xc7, 0xfe, 0x7e, 0x03, 0xf9, 0xf9, 0xf3, 0xe7, 0xcf, 0x3e, 0x60, 0xf8, 0xbf, 0xe3, 0xff, 
  0xff, 0xe3, 0xfe, 0x7e, 0x01, 0xf9, 0xf8, 0xf3, 0xe7, 0x8f, 0x3e, 0x70, 0xf9, 0xff, 0xc7, 0xff, 
  0xff, 0xe3, 0xfe, 0x7e, 0x79, 0xf9, 0xfc, 0x47, 0xe0, 0x1f, 0x3e, 0x78, 0xf8, 0x1f, 0xcf, 0xff, 
  0xff, 0xf1, 0xfe, 0x7c, 0xf8, 0xf9, 0xfe, 0x0f, 0xf8, 0x3f, 0x3e, 0x78, 0xf8, 0x0f, 0x8f, 0xff, 
  0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 
  0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 
  0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 
  0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
  0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0xe3, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x07, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xf1, 0xfc, 0x01, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x03, 0xff, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x07, 0xff, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x3f, 0xe1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x3f, 0xc3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x3f, 0x87, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xb0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char fire [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x08, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3f, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x7e, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x7e, 0x18, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xfe, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xfe, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xfe, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc1, 0xfe, 0x3c, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0xfe, 0x3c, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xfe, 0x3e, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x03, 0xfe, 0x3e, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x03, 0xfe, 0x1f, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x07, 0xfe, 0x1f, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x07, 0xfe, 0x1f, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x07, 0xfe, 0x0f, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff, 0x0f, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff, 0x0f, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff, 0x8f, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xff, 0xff, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x21, 0xff, 0xff, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x21, 0xff, 0xff, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x60, 0xff, 0xff, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0xe0, 0xff, 0xfe, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xe0, 0xff, 0xfe, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x01, 0xe0, 0xff, 0xfc, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x03, 0xc0, 0x7f, 0xfc, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x07, 0xc0, 0xff, 0xf8, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x07, 0xc0, 0xff, 0xf8, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x07, 0xc1, 0xff, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xe3, 0xff, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xff, 0xff, 0xfe, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x87, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x47, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x83, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x83, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc1, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x11, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char bobaFett [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x03, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xfc, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x80, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xf3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x08, 0x00, 0x07, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xf7, 0xff, 0xff, 0xe0, 0xff, 0xf8, 0x1e, 0x00, 0x07, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xe7, 0xff, 0xff, 0xc0, 0xff, 0xfc, 0x7f, 0x3f, 0x1f, 0xfd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0xe7, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xfe, 0x7f, 0xbf, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf9, 0xe7, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf9, 0xef, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf9, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf9, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0x90, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0x90, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0x10, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0x10, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0x30, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0x1f, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0x30, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x30, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x30, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x7f, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0x80, 0x61, 0xff, 0xff, 
  0xff, 0xfe, 0x30, 0xcf, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x61, 0xff, 0xff, 
  0xff, 0xfe, 0x30, 0xc0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x61, 0xff, 0xff, 
  0xff, 0xfe, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xe1, 0xff, 0xff, 
  0xff, 0xfe, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0xe0, 0xff, 0xff, 
  0xff, 0xfe, 0x31, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xfe, 0x31, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xfe, 0x31, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x01, 0xfd, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x1b, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x07, 0x3f, 0xff, 0x3f, 0x80, 0xff, 0xff, 
  0xff, 0xfe, 0x01, 0x83, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x0f, 0x3f, 0xfe, 0xfe, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x0f, 0x7c, 0x01, 0xf8, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x01, 0xf8, 0x7e, 0xcf, 0xff, 0xa0, 0x00, 0x0f, 0x7f, 0x83, 0xe1, 0xe0, 0xff, 0xff, 
  0xff, 0xfe, 0x01, 0xfe, 0x3e, 0x0f, 0x9f, 0xa0, 0x00, 0x0f, 0x7f, 0xe7, 0xc7, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xff, 0x0f, 0x0f, 0xcf, 0xa0, 0x00, 0x0f, 0x7f, 0xcf, 0x1f, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xff, 0xc7, 0x67, 0xe7, 0xa0, 0x00, 0x0f, 0x7f, 0x86, 0x7f, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xff, 0xe3, 0xef, 0xf1, 0x80, 0x00, 0x0f, 0x7f, 0xbc, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xff, 0xf1, 0xff, 0xf8, 0x80, 0x00, 0x0f, 0x7f, 0x79, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xff, 0xf8, 0x7f, 0xfc, 0x40, 0x00, 0x0f, 0x7f, 0x73, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x87, 0xff, 0xfc, 0x7f, 0xfe, 0x40, 0x00, 0x0f, 0xfe, 0xe7, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x8f, 0xff, 0xfe, 0x3f, 0xff, 0x40, 0x00, 0x0f, 0xfe, 0xcf, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x9f, 0xff, 0xff, 0x1f, 0xff, 0x00, 0x00, 0x0f, 0xfd, 0x9f, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x9f, 0xff, 0xff, 0x8f, 0xff, 0x80, 0x00, 0x0f, 0xff, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x9f, 0xff, 0xff, 0xcf, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0x7f, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x9f, 0xff, 0xff, 0xc7, 0xff, 0xc0, 0x00, 0x0f, 0xfe, 0x7f, 0xff, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xff, 0xe7, 0xff, 0xc0, 0x00, 0x0f, 0xfc, 0xf0, 0x3f, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xc7, 0xe3, 0xff, 0xc0, 0x00, 0x0f, 0xfc, 0xe7, 0x1f, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xfe, 0x00, 0xf3, 0xff, 0xc0, 0x00, 0x0f, 0x01, 0xcf, 0x8f, 0xf8, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xfc, 0x7e, 0x31, 0xff, 0xc0, 0x00, 0x0f, 0xc3, 0x9f, 0xcf, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xf9, 0xff, 0x19, 0xff, 0xc0, 0x00, 0x0f, 0xf3, 0x3f, 0xe7, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xf3, 0xff, 0x89, 0xff, 0xc0, 0x00, 0x0f, 0xf2, 0x7f, 0xf3, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x1f, 0xe7, 0xff, 0xc4, 0xff, 0xc0, 0x00, 0x1f, 0xf4, 0xff, 0xfb, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x3f, 0xcf, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x1f, 0xe4, 0xff, 0xf9, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x3f, 0xdf, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x1f, 0xe5, 0xff, 0xfd, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x3f, 0x9f, 0xff, 0xf8, 0x7f, 0x40, 0x00, 0x1f, 0xe9, 0xff, 0xfc, 0xfc, 0x7f, 0xff, 
  0xff, 0xff, 0x3f, 0xbf, 0xff, 0xfc, 0x7f, 0x40, 0x00, 0x1f, 0xe9, 0xff, 0xfc, 0xfc, 0x3f, 0xff, 
  0xff, 0xff, 0x3f, 0x3f, 0xff, 0xfe, 0x7f, 0x40, 0x00, 0x1f, 0xc3, 0xff, 0xfe, 0x7c, 0x3f, 0xff, 
  0xff, 0xff, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x40, 0x00, 0x1f, 0xc7, 0xff, 0xfe, 0x7c, 0x3f, 0xff, 
  0xff, 0xfe, 0x3e, 0x7f, 0xff, 0xff, 0x27, 0x40, 0x00, 0x1f, 0xc7, 0xff, 0xff, 0x7e, 0x3f, 0xff, 
  0xff, 0xfe, 0x3e, 0xff, 0xff, 0xff, 0x0f, 0x40, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0x3e, 0x3f, 0xff, 
  0xff, 0xfe, 0x3c, 0xff, 0xff, 0xff, 0x3f, 0x40, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0x3e, 0x3f, 0xff, 
  0xff, 0xfe, 0x7c, 0xff, 0xff, 0xff, 0xbf, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xbe, 0x3f, 0xff, 
  0xff, 0xfc, 0x79, 0xff, 0xff, 0xff, 0xbf, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0x9e, 0x3f, 0xff, 
  0xff, 0xfc, 0x79, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0x9e, 0x3f, 0xff, 
  0xff, 0xfc, 0x3b, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xde, 0x7f, 0xff, 
  0xff, 0xfc, 0x13, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xcc, 0x7f, 0xff, 
  0xff, 0xfe, 0x13, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xc1, 0xff, 0xff, 
  0xff, 0xff, 0x17, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xc3, 0xff, 0xff, 
  0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xdf, 0x40, 0x00, 0x1f, 0xbf, 0xff, 0xff, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xdf, 0x40, 0x00, 0x1f, 0xbf, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xdf, 0x40, 0x00, 0x1f, 0x3f, 0xff, 0xf8, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xdf, 0x40, 0x00, 0x1f, 0x3f, 0xff, 0xe1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xcf, 0x40, 0x00, 0x1f, 0x3f, 0xff, 0xc7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xcf, 0x40, 0x00, 0x1f, 0x3f, 0xff, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xcf, 0x00, 0x00, 0x1f, 0x3f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xcf, 0x80, 0x00, 0x1f, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xcf, 0xc0, 0x00, 0x1f, 0x3f, 0xf1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xcf, 0x80, 0x00, 0x1f, 0x3f, 0xe3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xcf, 0x80, 0x00, 0x1f, 0x3f, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xcf, 0x80, 0x00, 0x1f, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xcf, 0x80, 0x00, 0x1f, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xce, 0x80, 0x00, 0x1f, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xce, 0x80, 0x00, 0x1f, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x4f, 0x80, 0x00, 0x1f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x80, 0x00, 0x1f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x80, 0x00, 0x1e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0x80, 0x00, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// '1705721367_DeathStar2', 128x180px
const unsigned char deathStar [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x0f, 0xc0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x1e, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x00, 0xf0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x01, 0xe0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0x80, 0x03, 0xc0, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0x80, 0x07, 0x80, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x38, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xf8, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xf8, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xe0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xe0, 0x01, 0xc0, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xe0, 0x01, 0xc0, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xc0, 0x01, 0xc0, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xc0, 0x01, 0xc0, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x1f, 
  0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x1f, 
  0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x1f, 
  0x80, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x1f, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 
  0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x80, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x00, 0x03, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x60, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
  0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
  0x80, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x01, 
  0x80, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 
  0x80, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x07, 
  0x80, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x0f, 
  0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x0f, 
  0x80, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x04, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3f, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3f, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// '35aeb1f31ca096418357b1310b8be9b6', 128x180px
const unsigned char bobaShip [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x39, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xe7, 0xff, 0x8f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xdf, 0xff, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x7f, 0xff, 0xf3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfd, 0x80, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf8, 0x3f, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xe1, 0xff, 0xbf, 0xfe, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc7, 0xff, 0x9f, 0xfc, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x01, 0xff, 0xdf, 0xf3, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xfe, 0x3c, 0x7c, 0xff, 0xcf, 0xcf, 0x9f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x9d, 0x9f, 0xff, 0xfe, 0x70, 0x0f, 0x7f, 0xcf, 0xbf, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x7e, 0xcf, 0xff, 0xfc, 0xc7, 0xe7, 0x3f, 0xef, 0x7f, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf9, 0x33, 0xff, 0xf9, 0x1f, 0xf9, 0xbf, 0xee, 0xff, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x7e, 0x9c, 0xff, 0xf2, 0x7f, 0xfd, 0x9f, 0xe5, 0xff, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xbf, 0x6e, 0x7f, 0xe0, 0xff, 0xfc, 0xdf, 0xe3, 0xff, 0xf7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xdf, 0xb7, 0x9f, 0xc1, 0xff, 0xfe, 0xdf, 0xe3, 0xff, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xe7, 0xd9, 0xe7, 0x07, 0xff, 0xfe, 0x6f, 0xe7, 0xff, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x73, 0xcc, 0xf0, 0x4f, 0xff, 0xff, 0x6f, 0xe7, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x39, 0xef, 0x79, 0x9f, 0xff, 0xff, 0x6f, 0xe7, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc4, 0xf7, 0x93, 0xbf, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc9, 0x7b, 0xc7, 0x3f, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe2, 0x1b, 0xce, 0x7f, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0x01, 0xdc, 0xff, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x65, 0x9d, 0xff, 0xff, 0xff, 0x6f, 0xcf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x1c, 0x39, 0xff, 0xff, 0xfe, 0x6f, 0xdf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x73, 0xc6, 0x5f, 0xf1, 0xef, 0xdf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x73, 0xb9, 0xdf, 0xe7, 0xef, 0xdf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe7, 0x7d, 0xff, 0x9f, 0xef, 0xdf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe6, 0xff, 0xdf, 0x3f, 0xc0, 0x3f, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xc5, 0xff, 0xde, 0x7c, 0x00, 0x1f, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xdb, 0xff, 0xfc, 0xf0, 0x7f, 0xcf, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0xff, 0xf9, 0xc3, 0xff, 0xe7, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x3e, 0xff, 0xf3, 0x8f, 0xff, 0xe7, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x7f, 0x7f, 0xe7, 0x3f, 0xff, 0xf3, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x7f, 0xbf, 0xee, 0x7f, 0xff, 0xfb, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x7f, 0xf3, 0xcc, 0xff, 0xff, 0xf9, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xbf, 0xfe, 0x19, 0xff, 0xff, 0xfd, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xb3, 0xff, 0xff, 0xfc, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xef, 0xff, 0x33, 0xff, 0xff, 0xe4, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfb, 0xfe, 0x67, 0xff, 0xfe, 0x00, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfe, 0x3e, 0xe7, 0xff, 0xf8, 0x7c, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0xff, 0xe0, 0xef, 0xff, 0xf1, 0x3e, 0x7f, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0xff, 0xf9, 0xcf, 0xff, 0xe4, 0xbe, 0x3f, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0x7f, 0xe3, 0xdf, 0xff, 0xce, 0x5d, 0xbf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x00, 0x0f, 0xdf, 0xff, 0x8f, 0x0d, 0x9f, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0x9f, 0xff, 0x33, 0x83, 0xcf, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x9f, 0xff, 0x7c, 0xc1, 0xe3, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0x9f, 0xff, 0x7e, 0x1c, 0xf0, 0x6f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0x9f, 0xfe, 0x7f, 0x1f, 0x3e, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x9f, 0xfe, 0x7f, 0x67, 0x9f, 0xdf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x9f, 0xfe, 0x0f, 0x71, 0xe6, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0xe0, 0x7c, 0xf0, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x06, 0x1f, 0x3c, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0xf0, 0x0f, 0x8e, 0x27, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0xff, 0x61, 0xe7, 0x91, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0xff, 0x70, 0x79, 0xc4, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0xfe, 0x84, 0x1e, 0x72, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x7e, 0x10, 0x07, 0x31, 0x9f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x3d, 0x87, 0x00, 0xc6, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x9d, 0xc0, 0xc6, 0x23, 0x93, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xc0, 0x01, 0x11, 0x89, 0xc9, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0xf0, 0x7c, 0xe1, 0xe0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xfc, 0x3f, 0x3f, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x30, 0x7f, 0xff, 0x1f, 0x9f, 0xfe, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x87, 0xe7, 0xff, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xc1, 0xf1, 0xfe, 0x1f, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x9c, 0x7c, 0x38, 0x1f, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0x80, 0xbf, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0x3f, 0xc7, 0xc1, 0x3f, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xfe, 0x7f, 0xf0, 0x0c, 0x7f, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0x00, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0xbf, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf3, 0xdf, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xf3, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xef, 0xfe, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0xfd, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9f, 0xfd, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xbf, 0xfb, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0xf7, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x7f, 0xef, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xdf, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0xff, 0xdf, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0xff, 0xbf, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf9, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf3, 0xfe, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe7, 0xfe, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe7, 0xfd, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xfd, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xfb, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf7, 0xff, 0x9b, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x97, 0xf7, 0xff, 0xb9, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xbd, 0xbf, 0xff, 0x39, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0xff, 0xfe, 0x79, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x7f, 0xff, 0xfc, 0xfc, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x7f, 0xff, 0xf9, 0xfe, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x84, 0xff, 0xff, 0xf3, 0xfe, 0x3f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0xec, 0xff, 0xfc, 0x03, 0xff, 0x0f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe1, 0xff, 0xfb, 0xe7, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf9, 0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf3, 0xff, 0xf7, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf3, 0xfc, 0xcf, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe7, 0x1b, 0xcf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe7, 0x03, 0xbe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xef, 0xbd, 0xac, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xcf, 0xff, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x9f, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x3f, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x3f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x3c, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xbb, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};




// ---------------------------------------------------------------------------------------
//    LEDs
// ---------------------------------------------------------------------------------------
#include <Adafruit_TLC5947.h>
#define clockx 5
#define datax 4
#define latch 6
//***************************************************
// Declare the LED Controller
//***************************************************
Adafruit_TLC5947 LEDControl = Adafruit_TLC5947(1, clockx, datax, latch);
//***************************************************
// Set the Max brightness value of the LEDs
//***************************************************
int ledMaxBright = 4000; // 4095 is MAX brightness

/// NeoPixels ///
#define PIN      12
#define N_LEDS 30
Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_LEDS, PIN, NEO_GRB + NEO_KHZ800);
int           patternInterval = 5000;   // Pattern Interval (ms)
int           pixelCycle = 0;           // Pattern Pixel Cycle
int           pixelInterval = 50;       // Pixel Interval (ms)
int           ambNeoNumber;
long          startupLightDelay = millis();  
long          startupFireDelay = millis();  
long          ThrusterTimer = millis();
boolean       rainbowFlag = false;
boolean       twinkleFlag = true;
boolean       redFireFlag = false;
boolean       endAuto = false;
boolean       ambientThrustersFlag1 = false;
boolean       ambientThrustersFlag2 = false;
boolean       ambientThrustersFlag3 = false;
boolean       ambientThrustersFlag4 = false;
boolean       fullNeoCycleFlag = false;


long startUpLightsTimer = millis();
int LightingDelay = 500;
boolean lightsOn = true;
boolean lightsOff = false; 

long blueFireDelay = millis();
boolean blueFireFlag = false;

int thrusterPins[] = {8, 9}; // Thruster LED pin numbers
int flickerDelay = 50;       // Delay between flicker steps (milliseconds)
int minBrightness = 25;    // Minimum brightness for flicker
int maxBrightness = 3000;   // Maximum brightness for flicker
  
long lastFlickerTime = 0;

boolean backThrusterFlag = false;

boolean podRaceFlag = false;

const int frontLightPinR2 = 5;  // Front light pin (red)
const int backLightPinR2 = 6;   // Back light pin (back)

const int fadeIntervalR2 = 10;   // Faster interval for fade steps (ms)
const int fadeStepR2 = 20;       // Larger step size for faster fading
const int minBlinkIntervalR2 = 50;  // Minimum blink interval (ms)
const int maxBlinkIntervalR2 = 200; // Maximum blink interval (ms)
const int minPauseR2 = 2000;        // Minimum time between talking bursts (ms)
const int maxPauseR2 = 5000;        // Maximum time between talking bursts (ms)

unsigned long lastFadeTimeR2 = 0;
unsigned long lastBlinkTimeR2 = 0;
unsigned long lastTalkTimeR2 = 0;
unsigned long nextTalkPauseR2 = random(minPauseR2, maxPauseR2);
unsigned long currentBlinkDurationR2 = random(minBlinkIntervalR2, maxBlinkIntervalR2);

bool fadeDirectionR2 = true; // true = fading in, false = fading out
int fadeValueR2 = 0;         // Current brightness for back light
int blinkCountR2 = 0;        // Number of blinks left in talking burst

const int startupLightsStart = 0;       // Start of light range 0-4
const int startupLightsEnd = 4;         // End of light range 0-4
const int extraStartupLightsStart = 19; // Start of additional light range 19-23
const int extraStartupLightsEnd = 23;   // End of additional light range 19-23

boolean ambientR2Flag = true;

const int headlightPins[] = {0, 1, 2, 3, 4, 23, 22, 21, 20, 19}; // Headlight pins
const int numHeadlights = sizeof(headlightPins) / sizeof(headlightPins[0]); 
const int maxHeadlightBrightness = 1000; // Maximum PWM value for headlights

unsigned long lastUpdateTime = 0;
unsigned long flickerUpdateInterval = 100; // Interval between brightness updates (in ms)

boolean headLightFlickerFlag = true;
boolean headLightOnFlag = false;

uint8_t brightness = 0;    // Current brightness level
int fadeAmount = 5;        // Amount to change the brightness by
unsigned long previousMillis = 0; // Tracks the last update time
const unsigned long interval = 30; // Interval between updates (in ms)
boolean fadeWhiteFlag = false;

#define LEFT_GUN_PIN 7
#define RIGHT_GUN_PIN 18

unsigned long gunTimer = 0;
const unsigned long gunDelay = 200; // Delay between shots (ms)
bool gunsFiring = false;

boolean spaceBattleFlag = false;

boolean gunBattleFlag = false;

boolean fadeGreenFlag = false;

boolean strobeFlag = false;

boolean boostFlag = false; 


/////// Routines ////////
boolean inRoutine = false;
boolean inRoutineOne = false;
boolean inRoutineTwo = false;
boolean inRoutineThree = false;

long r2Delay = millis();

unsigned long previousMillisBattle = 0;
const unsigned long battleInterval = 100; // Time between new blaster effects
const int boltLength = 4; // Length of each blaster bolt
const uint32_t redColor = strip.Color(255, 0, 0);   // Red for one side's bolts
const uint32_t greenColor = strip.Color(0, 255, 0); // Green for the other side's bolts


boolean spaceBattleFlag3 = false;

////// R2D2 Servo //////
Servo r2Servo; // Create a Servo object for the actuator
int servoPosition = 90;     // Current position of the servo (0 to 180 degrees)
int servoDirection = 1;    // Direction of movement (1 = up, -1 = down)

int cyclesRemaining = 0;             // Tracks how many up-down cycles are left

unsigned long lastServoUpdate = 0; // Time of the last servo update
const int minServoPosition = 90;    // Minimum position of the servo
const int maxServoPosition = 165;  // Maximum position of the servo

long strobeTimer = millis();

boolean r2FlagAmbientMove = true;

long servoTimer = millis();
int servoPos = 90;
int servoStep = 2;
int maxServoPos = 160;
int servoDir = 1;
boolean firstTime = true;
long servoDetatchTimer1;
long servoDetatchTimer2;
boolean firstRandom = true;
boolean r2MoveFlag = false;
boolean r2MovingFlag = false;
int randomR2MoveSpacing;
int movingRandomTime;
long randomR2Timer = millis();
long randomR2MovingTimer = millis();
boolean forceDown = false;

int imageNum = 1;
boolean displayImageAmbient = false;
long imageTimer = millis();

////////// Routines ///////////
long routineOneTotTimer = millis();


boolean r2Twice = false;
long r2TwiceTimer = millis();

int randomSpy = 7;

// Screen dimensions
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 160

// Center of the display
#define CENTER_X (SCREEN_WIDTH / 2)
#define CENTER_Y (SCREEN_HEIGHT / 2)

// Number of streaks
#define MAX_STREAKS 30

// Lifespan of each streak in frames
#define STREAK_LIFESPAN 50

// Struct to manage each streak
struct Streak {
  float angle;   // Angle of the streak
  int speed;     // Speed of the streak
  int length;    // Current length
  int x2, y2;    // Current end coordinates
  int lifespan;  // Remaining lifespan
  bool active;   // Is the streak active?
};

// Array to store all streaks
Streak streaks[MAX_STREAKS];

// Timer variables

boolean hyperSpaceScreen = false;

long hyperSpaceFuncTimer = millis();

boolean bobaFight = false;

////// Routine Movements ///////
boolean routineMoveFlag = false;
int routineForwardSpeed = 0;
int routineTurnSpeed = 0;
long routineMoveTimer = millis();

long routineOneSceneArray[] = {0, 11000, 21000, 33500, 45000, 52000, 68000, 78000};
int activeSceneOneArray[] = {1,1,1,1,1,1,1,1};
long routineOneMovementArray[] = {0, 10000, 14500, 33500, 36000, 38000, 45000, 59000, 61000, 63000, 65000, 66000, 68000, 70000, 71500, 75000, 76000, 78000 };
int activeSceneOneMovementArray[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

int numOneScenes = 8;
int numOneMoveScenes = 18;

int DEFAULT_FORWARD = -40;
int DEFAULT_BACK = 40;
int DEFAULT_TURN_RIGHT = 35;
int DEFAULT_TURN_LEFT = -35;

boolean backFullOnFlag = false;


long routineTwoTotTimer = millis();
long routineTwoSceneArray[] = {0, 6200, 7250, 9000, 18500, 23000, 33000, 37200, 42000, 49000, 55000, 58000, 61000, 81000, 85000, 86800};
int activeSceneTwoArray[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
long routineTwoMovementArray[] = {0, 12000, 14500, 39000, 42000, 45000, 50000, 58000, 61000, 85000};
int activeSceneTwoMovementArray[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
int numTwoScenes = 16;
int numTwoMoveScenes = 10;

long routineThreeTotTimer = millis();
long routineThreeSceneArray[] = {0, 5500, 7900, 11000, 31000, 42000, 51500, 60000, 63000, 66000, 70000, 90000};
int activeSceneThreeArray[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
long routineThreeMovementArray[] = {0, 7000, 11000, 15000, 16500, 31000, 33000, 36000, 43000, 60000, 66000, 66800, 67600, 68400, 69200, 70000, 80000};
int activeSceneThreeMovementArray[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
int numThreeScenes = 12;
int numThreeMoveScenes = 17;

boolean enableImage = true;

// =======================================================================================
//                                 Main Program
// =======================================================================================
// =======================================================================================
//                                Setup Function
// =======================================================================================
void setup()
{
  
    //Initialize Serial @ 115200 baud rate for Serial Monitor Debugging
    Serial.begin(115200);
    while (!Serial);
    
    //Initialize the USB Dongle and check for errors
    if (Usb.Init() == -1)
    {
        Serial.println("OSC did not start");
        while (1); //halt
    }
    
    Serial.println("Bluetooth Library Started");
    
    //PS3 Controller - sets the interrupt function to call when PS3 controller tries to connect
    PS3Controller->attachOnInit(onInitPS3Controller); 

    //Setup PIN 13 for Arduino Main Loop Blinker Routine
    pinMode(13, OUTPUT);
    digitalWrite(13, LOW);

   // ----------------------------------------------
   // YOUR SETUP CONTROL CODE SHOULD START HERE
   // ----------------------------------------------
    
   /* myServo.attach(13);
    myServo.write(90);
    currentServoPosition = 90;

    Serial.println("Servo Initialized");*/


    // ---------------------------------------------------------------------------------------
    //    Motor Controller
    // ---------------------------------------------------------------------------------------

    Serial1.begin(9600); //Start TX1 â€“ Pin#18 â€“ Motor Controller
    ST->autobaud();
    ST->setTimeout(200);
    ST->setDeadband(driveDeadBandRange);


    // ---------------------------------------------------------------------------------------
    //    Color sensor
    // ---------------------------------------------------------------------------------------
    pinMode(s0,OUTPUT); // Sets output frequency scaling
    pinMode(s1,OUTPUT); // Sets output frequency scaling
    pinMode(s2,OUTPUT); // Sets photodiode to be used (Red/Green/Blue)
    pinMode(s3,OUTPUT); // Sets photodiode to be used (Red/Green/Blue)
    pinMode(LED,OUTPUT); // Turns LEDs on / off
    pinMode(out,INPUT); // Returns the color value for the selected photodiode

    digitalWrite(s0,HIGH); //Putting S0/S1 on HIGH/LOW sets scaling at 20%
    digitalWrite(s1,LOW);
    /* // Test LED Lights on Color Sensor
    digitalWrite(LED,HIGH); //Turn the LED lights ON
    delay(1000);
    digitalWrite(LED,LOW); // Turn the LED lights OFF
    delay(1000);
    digitalWrite(LED,HIGH); //Turn the LED lights ON
    delay(1000);
    digitalWrite(LED,LOW); // Turn the LED lights OFF
    delay(1000);
    digitalWrite(LED,HIGH); //Turn the LED lights ON*/


    //----------------------------------------------
    //Sound 
    //----------------------------------------------
    MP3Trigger.setup(&Serial2);
    Serial2.begin(MP3Trigger::serialRate());
    randomSeed(analogRead(0)); //note: change if anything gets connected to pin 0

    //----------------------------------------------
    //Display
    //----------------------------------------------
    tft.initR(INITR_BLACKTAB); // Init ST7735S chip, black tab
    //displayTesting();
    tft.setTextWrap(false);
    tft.fillScreen(ST77XX_BLUE);
    tft.setCursor(0,0);

    tft.drawBitmap(0,0,epd_bitmap_Star_Tours_logo,128,180, ST77XX_WHITE); // width first then length

    //----------------------------------------------
    //LED
    //----------------------------------------------
    LEDControl.begin();
    strip.begin();
    strip.show();            // Turn OFF all pixels ASAP
    strip.setBrightness(250); // Set BRIGHTNESS to about 1/5 (max = 255)

    for (int i = 0; i <= 9; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }

    for (int i = 18; i <= 24; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }



    /// Servo ////

    // 80 to 125
    r2Servo.attach(7); // Attach servo to pin 7
    r2Servo.write(80);
    r2Servo.detach();


    
    
   // ----------------------------------------------
   // YOUR SETUP CONTROL CODE SHOULD END HERE
   // ---------------------------------------------
}

// =======================================================================================
//    Main Program Loop - This is the recurring check loop for entire sketch
// =======================================================================================
void loop()
{   
    //
   // Make sure the PS3 Controller is working - skip main loop if not
   readUSB();

   currentTime = millis();

   // If the PS3 controller has been connected - start processing the main controller routines
   if (PS3Controller->PS3Connected) {
   
       // Read the PS3 Controller and set request state variables for this loop
       readPS3Request();
    
       // ----------------------------------------------
       // YOUR MAIN LOOP CONTROL CODE SHOULD START HERE
       // ----------------------------------------------
        if (r2FlagAmbientMove) {
          if (firstRandom) {
            randomR2MoveSpacing = random(5000, 15000);
            randomR2Timer = millis();
            firstRandom = false;
            
            //r2MoveFlag = true;
          }
          
          if ((randomR2Timer + randomR2MoveSpacing) < currentTime) {
            r2MoveFlag = true;
            r2MovingFlag = true;
            r2FlagAmbientMove = false;
          }
        }


         if (r2MoveFlag) {

            if (r2MovingFlag) {
              movingRandomTime = random(3000, 5000);
              r2MovingFlag = false;
              randomR2MovingTimer = millis();
            }

            moveR2D2(250);

            if ((randomR2MovingTimer + movingRandomTime) < currentTime) {
              r2MoveFlag = false;
              r2FlagAmbientMove = true;
              firstRandom = true;
              if (servoDir = -1)
                forceDown = true;
              r2Servo.detach();
            }
        }

        if (forceDown) {

              Serial.println("Moving Down");
              r2Servo.attach(7);
              r2Servo.write(80);
              if (firstTime) {
                servoDetatchTimer2 = millis();
                firstTime = false;
              }
              if ((servoDetatchTimer2 + 250) < currentTime) {
                r2Servo.detach();
                servoDir = servoDir * -1;
                firstTime = true;
                servoTimer = millis();
                forceDown = false;
                return;    
              }
        }

        if (displayImageAmbient && enableImage) {
          
          if ((imageTimer + 10000) < currentTime) {
            if (imageNum == 10)
              imageNum = 1;
            else
              imageNum++;
            displayImage(imageNum);
            imageTimer = millis();
          }
        }

        // Disable image changing
        if (reqStart && !inRoutine && !autoMode) {
          if (enableImage) {
            displayImage(1);
            enableImage = false;
          }
   
        }

        // Enable image changing
        if (reqSelect && !inRoutine && !autoMode) {
          if (!enableImage) {
            enableImage = true;
          }
   
        }
          
       
       if(startUp){
        startUpSound();
        
       }
       
       // Move the droid motors
         if (reqArrowDown && !inRoutine) {
          if (ambientFlag) {
            MP3Trigger.trigger(0);
            playNew = false;
            ambientFlag = false;
          }
          else{
            ambientFlag = true;
            playNew = true;
          }
         }
       
       if (!autoMode && !inRoutine){
        //Serial.println("Manual");
        moveMan();
        if (ambientFlag && !startUp) {
          playAmbient();
          
        }  
       }
      

       // check if switched to auto mode
       if (reqTriangle && !autoMode && !inRoutine){
         r2FlagAmbientMove = false;
         forceDown = true;
         startUp = false;
         Serial.println("AutoMode Start");
         digitalWrite(LED,HIGH); //Turn the LED lights ON
         autoMode = true;
         ambientThrustersFlag1 = false;
         ambientThrustersFlag2 = false;
         ambientThrustersFlag3 = false;
         ambientThrustersFlag4 = false;
         fullNeoCycleFlag = false;
         rainbowFlag = false;
         twinkleFlag = false;
         redFireFlag = false;
         ambientR2Flag = false;
         displayImageAmbient = false;
         MP3Trigger.trigger(0);
         
         
       }
       if (reqCross && autoMode && !inRoutine){
        Serial.println("Ending Auto Mode");
        autoMode = false;
        ambientFlag = false;
        endAuto = true;
    

        ST->turn(0);
        ST->drive(0);
        MP3Trigger.trigger(4);
        celebrationTimer = millis();
        rainbowFlag = true;
        digitalWrite(LED,LOW); // Turn the LED lights OFF
        
    
        tft.fillScreen(ST77XX_BLUE);
        tft.drawBitmap(0,0,epd_bitmap_Star_Tours_logo,128,180, ST77XX_WHITE);
        
       }
       if (((celebrationTimer + ManSoundLengths[3]) < currentTime) && endAuto) {
          Serial.println("DONE");
          ambientFlag = true;
          rainbowFlag = false;
          strip.fill(strip.Color(0, 0, 0));
          fullNeoCycleFlag = true;
          strip.show();
          endAuto = false;
          ambientR2Flag = true;
          r2FlagAmbientMove = true;
          displayImageAmbient = true;
       }

       if (autoMode && !reqCross && !inRoutine){
          //Serial.println("AutoMode!!!");
          if (( previousColorDet + 100) < currentTime) {
            detectColor();
            moveAuto();
            previousColorDet = millis();
          }
          if ((moveAutoTimer + 50) < currentTime) {
            moveAuto();
            moveAutoTimer = millis();
          }
       }

      /// Routine 1 ///
      if (reqArrowLeft && !autoMode && !inRoutine) {
        initializeRoutine();
        inRoutine = true;
        inRoutineOne = true;
        MP3Trigger.trigger(22);
        routineOneTotTimer = millis();
      }
     if (inRoutine && inRoutineOne) {
        routineOneController();
        if ((routineOneTotTimer + ManSoundLengths[21]) < currentTime) {
            // End Routine
            initializeRoutine();
            enterAmbient();
            inRoutine = false;
            inRoutineOne = false;
        }
      }

      /// Routine 2 ///
      if (reqArrowUp && !autoMode && !inRoutine) {
        initializeRoutine();
        inRoutine = true;
        inRoutineTwo = true;
        MP3Trigger.trigger(23);
        routineTwoTotTimer = millis();
      }
      

      if (inRoutine && inRoutineTwo) {
        routineTwoController();
        if ((routineTwoTotTimer + ManSoundLengths[22]) < currentTime) {
            // End Routine
            initializeRoutine();
            enterAmbient();
            inRoutine = false;
            inRoutineTwo = false;
        }
      }
            
      /// Routine 3 ///
      if (reqArrowRight && !autoMode && !inRoutine) {
        initializeRoutine();
        inRoutine = true;
        inRoutineThree = true;
        MP3Trigger.trigger(24);
        routineThreeTotTimer = millis();
      }
      if (inRoutine && inRoutineThree) {
        routineThreeController();
        if ((routineThreeTotTimer + ManSoundLengths[23]) < currentTime) {
            // End Routine
            initializeRoutine();
            enterAmbient();
            inRoutine = false;
            inRoutineThree = false;
        }
      }

      /// Manually Exit Routine ///
      if (reqCircle && inRoutine) {
        initializeRoutine();
        enterAmbient();
        inRoutine = false;
        inRoutineOne = false;
        inRoutineTwo = false;
        inRoutineThree = false;
      }
    
      if (routineMoveFlag) {
          if ((routineMoveTimer + 100) < currentTime) {
              routineMove();
              routineMoveTimer = millis();
          }
   
      }
      
      
       
      if (rainbowFlag)
          rainbow(5);

      if (twinkleFlag) {
          strip.fill(strip.Color(0, 0, 0)); // Turn off all LEDs initially
          TwinkleRandom(5, 200); // Twinkle 10 LEDs, change every 200ms
      }

      if (redFireFlag)
          redFire(10,200,5);

      if (blueFireFlag) {
          blueFire(10,200,5);
          //HyperspaceLEDEffectNew(150);
      }

      /*if (ambientThrustersFlag1)
          ThrusterEffect(50);
          
      if (ambientThrustersFlag2)
          BlueThrusterEffect(50);
          
      if (ambientThrustersFlag3)
          RedThrusterEffect(50);
          
      if (ambientThrustersFlag4)
          WhiteThrusterEffect(50);*/
          
      if (fullNeoCycleFlag)
        FullCycleThrusterEffect(150, 300);

      if (fadeWhiteFlag)
        fadeInOutEffect();

      if (r2Twice) {
        moveR2D2(200);
        if ((r2TwiceTimer + 2500) < currentTime) {
          forceDown = true;
          r2Twice = false;
        }
        
      }

      if (spaceBattleFlag){
        starWarsBattleEffect(100, 4);
        fireGuns();
      }

       if (spaceBattleFlag3){
        starWarsBattleEffect(100, 4);
        
      }

      

      if (gunBattleFlag) {
        fireGuns();
      }


      if (hyperSpaceScreen) {
          drawHyperspaceJump(); // Run hyperspace jump for 5 seconds  
      }

      if (fadeGreenFlag){
        fadeGreenEffect();
      }

      if (podRaceFlag){
        podRacing();
      }

      if (strobeFlag){
        StrobeExplosionEffect(100, 10, 2500); // Strobe delay of 100ms, 10 strobes, and 3 seconds total duration
        if ((strobeTimer + 2500) < currentTime) {
          strip.fill(strip.Color(0, 0, 255));
          strip.show();
          strobeFlag = false;
        }

      }

      if (boostFlag){
        engineBoostEffect();
      }

      if (bobaFight)
        starWarsRedOrangeBattleEffect(200, 5);
      
       
      if (backFullOnFlag) {
        backOn();
        backFullOnFlag = false;
      }


      if (backThrusterFlag){
        thrusterFlicker();
      }

      if (ambientR2Flag) {
        if ((r2Delay + 300) < currentTime) {
        r2d2AmbientLights();
        r2Delay = millis();
        }
      }

      if (headLightFlickerFlag) {
        headlightFlicker();
      }

      if (headLightOnFlag) {
        headlightConstantOn(3000); // Turns on headlights at brightness level 150
        headLightOnFlag = false;
      }
        
    
       // ----------------------------------------------
       // YOUR MAIN LOOP CONTROL CODE SHOULD END HERE
       // ----------------------------------------------
      
       // Ignore extra inputs from the PS3 Controller for 1/2 second from prior input
       if (extraRequestInputs)
       {
          
          if ((previousRequestMillis + 500) < currentTime)
          {
              extraRequestInputs = false;
          }
       }
    
       // If there was a PS3 request this loop - reset the request variables for next loop
       if (reqMade) {
           resetRequestVariables();
           reqMade = false;
       } 


     

   }

   // Blink to show working heart beat on the Arduino control board
   // If Arduino LED is not blinking - the sketch has crashed
   if ((blinkMillis + 500) < currentTime) {
      if (blinkOn) {
        digitalWrite(13, LOW);
        blinkOn = false;
      } else {
        digitalWrite(13, HIGH);
        blinkOn = true;
      }
      blinkMillis = millis();
   }
   
  
  //sound
  MP3Trigger.update();

// ---------------------------------------------------------------------------------------
//    TFT Display
// ---------------------------------------------------------------------------------------
  
   
}

// =======================================================================================
//      ADD YOUR CUSTOM DROID FUNCTIONS STARTING HERE
// =======================================================================================


void moveMan() {
    if (reqLeftJoyMade) {
        targetSpeed = 0.8*reqLeftJoyYValue;
        targetTurn = 0.6*reqLeftJoyXValue;

        // Ramping logic for speed
        if (currentSpeed < targetSpeed) {
            currentSpeed += rampStep;
            if (currentSpeed > targetSpeed) currentSpeed = targetSpeed;  // Prevent overshooting
        } else if (currentSpeed > targetSpeed) {
            currentSpeed -= rampStep;
            if (currentSpeed < targetSpeed) currentSpeed = targetSpeed;  // Prevent overshooting
        }

        // Ramping logic for turn
        if (currentTurn < targetTurn) {
            currentTurn += rampStep;
            if (currentTurn > targetTurn) currentTurn = targetTurn;
        } else if (currentTurn > targetTurn) {
            currentTurn -= rampStep;
            if (currentTurn < targetTurn) currentTurn = targetTurn;
        }

        ST->turn(currentTurn);
        ST->drive(currentSpeed);

        if (!droidMoving) {
            droidMoving = true;
        }
    } else {
        if (droidMoving) {
            // Ramp down to stop
            if (currentSpeed > 0) {
                currentSpeed -= rampStep;
                if (currentSpeed < 0) currentSpeed = 0;
            } else if (currentSpeed < 0) {
                currentSpeed += rampStep;
                if (currentSpeed > 0) currentSpeed = 0;
            }

            if (currentTurn != 0) {
                currentTurn -= (currentTurn > 0) ? rampStep : -rampStep;
                if (abs(currentTurn) < rampStep) currentTurn = 0;
            }

            ST->turn(currentTurn);
            ST->drive(currentSpeed);

            if (currentSpeed == 0 && currentTurn == 0) {
                ST->stop();
                droidMoving = false;
            }
        }
    }
    
    
}


void moveAuto(){
  Serial.print("Entered Auto Mode\n");
  //Blue detected, continue straight
  if (currentColor == 2){
    currentSpeed = -40;
    currentTurn = 0;
    tft.fillScreen(ST77XX_BLUE);
    strip.fill(strip.Color(0, 0, 255));
    strip.show();
    if (blueTimer + ManSoundLengths[0] < currentTime && firstBlueTime){
      MP3Trigger.trigger(1);
      firstBlueTime = false;
      blueTimer = millis();
      firstRedTime = true;
      firstGreenTime = true;
    }
    
  }
  // Red detected, turn right
  else if (currentColor == 1) {
    currentSpeed = 0;
      currentTurn = 65;
    tft.fillScreen(ST77XX_RED);
    strip.fill(strip.Color(255, 0, 0));
    strip.show();
   if (redTimer + ManSoundLengths[0] < currentTime && firstRedTime){
      MP3Trigger.trigger(2);
      firstRedTime = false;
      redTimer = millis();
      firstBlueTime = true;
      firstGreenTime = true;
    }
  }
  // Green detected, turn left
  else if (currentColor == 3){
    currentSpeed = 0;
    
      currentTurn = -65;
    tft.fillScreen(ST77XX_GREEN);
    strip.fill(strip.Color(0, 255, 0));
    strip.show();
    if (greenTimer + ManSoundLengths[0] < currentTime && firstGreenTime){
      MP3Trigger.trigger(3);
      firstGreenTime = false;
      greenTimer = millis();
      firstRedTime = true;
      firstBlueTime = true;
    } 
  }
  else
    tft.fillScreen(ST77XX_BLACK);
  ST->turn(currentTurn);
  ST->drive(currentSpeed);
  
}



void detectColor(){

  int detectTime = millis();

  // Take a RED reading from the color sensor
 if ((detectTime + 20) < currentTime) {
  digitalWrite(s2,LOW); //S2 S3 set to LOW/LOW for RED
  digitalWrite(s3,LOW);
  data=pulseIn(out,LOW); //Take a color measurement
  rValue = map(data,46,129,255,0); //Convert to standard RGB range
  
 }

  // Take a BLUE reading from the color sensor
  if ((detectTime + 40) < currentTime) {
    digitalWrite(s2,LOW); //S2 S3 set to LOW/HIGH for Blue
    digitalWrite(s3,HIGH);
    data=pulseIn(out,LOW); //Take a color measurement
    bValue = map(data,51,129,255,0); //Convert to standard RGB range
  }
  
  //Take a GREEN reading from the color sensor
  if ((detectTime + 60) < currentTime) {
    digitalWrite(s2,HIGH); //S2 S3 set to HIGH/HIGH for green
    digitalWrite(s3,HIGH);
    data=pulseIn(out,LOW); //Take a color measurement
    gValue = map(data,51,129,255,0); //Convert to standard RGB range
  }

  //Serial.println();
  //Serial.print("The color is: ");

  
  if (gValue > rValue && gValue > bValue){
    //Serial.println("Green");
    currentColor = 3;
  } else {
      if (rValue > bValue && rValue > gValue) {
        //Serial.println("Red");
        currentColor = 1;
      } else {
          if (bValue > rValue && bValue > gValue) {
            //Serial.println("Blue");
            currentColor = 2;
        } else {
            //Serial.println("Unknown");
            currentColor = 0;
          }
        }
     }

}

//sound functions

void startUpSound(){
  //lightsStartUp();
  if (PlayStartSound){
  MP3Trigger.trigger(21);
  startUpTimer = millis();
  Serial.println("Start Up timer started");
  PlayStartSound = false;
  twinkleFlag = true;
  }
  
  if (((startUpTimer + 35000) < currentTime) && (!endAuto)){
    Serial.println("startup sound stopped");
    ambientFlag = true;
    startUp = false;
    redFireFlag = false;
    fullNeoCycleFlag = true;
    displayImageAmbient = true;
    return;
  }
  if ((startUpTimer + 19700) < currentTime) {
     twinkleFlag = false;
     redFireFlag = true;
     backThrusterFlag = true; 
     headLightFlickerFlag = false;
     headLightOnFlag = true;
  }
  
}

void playAmbient(){
  if (playNew == true){
        soundNum = random(ambientStarNum,maxAmbient+1);
        //soundNum = numSongs;
        MP3Trigger.trigger(soundNum);
        songLengthBreak = millis();
        //manSoundTime = millis();
        Serial.println(soundNum);
        playNew = false;
        songLength = ManSoundLengths[soundNum-1];
        
        
  }
  
  if ((songLengthBreak + songLength) < currentTime){
    playNew = true;
    Serial.println("Reset sound timer");
    
  }
}




// ---------------------------------------------------------------------------------------
//    TFT Display
// ---------------------------------------------------------------------------------------

void tftPrintTest() {
 tft.setTextWrap(false);
 tft.fillScreen(ST77XX_BLACK);
 tft.setCursor(0,0);
 tft.setTextColor(ST77XX_RED);
 tft.setTextSize(1);
 tft.println("Hello World!");
 tft.setTextColor(ST77XX_YELLOW);
 tft.setTextSize(2);
 tft.println("Hello World!");
 tft.setTextColor(ST77XX_GREEN);
 tft.setTextSize(3);
 tft.println("Hello World!");
 tft.setTextColor(ST77XX_BLUE);
 tft.print(1234.567);
 }

 void initializeStreak(int index) {
  streaks[index].angle = random(0, 360) * 3.14159 / 180; // Random angle in radians
  streaks[index].speed = random(5, 15);                 // Faster random speed
  streaks[index].length = 0;                            // Start at length 0
  streaks[index].x2 = CENTER_X;                         // Reset end coordinates
  streaks[index].y2 = CENTER_Y;
  streaks[index].lifespan = STREAK_LIFESPAN;            // Reset lifespan
  streaks[index].active = true;                         // Mark as active
}

void drawHyperspaceJump() {
  if ((hyperSpaceFuncTimer + 300) < currentTime) {
  bool anyActive = false; // Track if any streak is still active

  for (int i = 0; i < MAX_STREAKS; i++) {
    if (!streaks[i].active) continue; // Skip inactive streaks

    int x = CENTER_X;
    int y = CENTER_Y;
    int x2 = x + streaks[i].length * cos(streaks[i].angle);
    int y2 = y + streaks[i].length * sin(streaks[i].angle);

    // Erase the previous line
    tft.drawLine(x, y, streaks[i].x2, streaks[i].y2, ST7735_BLACK);

    // Update streak's length and draw the new line
    streaks[i].length += streaks[i].speed;
    streaks[i].x2 = x2;
    streaks[i].y2 = y2;
    tft.drawLine(x, y, x2, y2, ST7735_WHITE);

    // Decrease lifespan and deactivate if expired
    streaks[i].lifespan--;
    if (streaks[i].lifespan <= 0 || x2 < 0 || x2 >= SCREEN_WIDTH || y2 < 0 || y2 >= SCREEN_HEIGHT) {
      streaks[i].active = false;
    } else {
      anyActive = true; // At least one streak is still active
    }
  }

  // Reinitialize inactive streaks
  for (int i = 0; i < MAX_STREAKS; i++) {
    if (!streaks[i].active) {
      initializeStreak(i);
    }
  }

  hyperSpaceFuncTimer = millis();
  }
}

 void displayImage(int imageNum) {
  
  switch (imageNum) {
    case 1:
      tft.fillScreen(ST77XX_BLUE);
      tft.drawBitmap(0, 0, epd_bitmap_Star_Tours_logo, 128, 180, ST77XX_WHITE);
      break;
    case 2:
      tft.fillScreen(ST77XX_WHITE);
      tft.drawBitmap(0, 0, stormTrooper, tft.width(), tft.height(), ST77XX_BLACK);
      break;
    case 3:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, DarthVader, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 4:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, C3P0, tft.width(), tft.height(), ST77XX_YELLOW);
      break;
    case 5:
      tft.fillScreen(ST77XX_BLUE);
      tft.drawBitmap(0, 0, R2D2, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 6:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, TieFighter, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    default:
    case 7:
      tft.fillScreen(ST77XX_BLUE);
      tft.drawBitmap(0, 0, NowBoarding, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 8:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, podRacer, tft.width(), tft.height(), ST77XX_ORANGE);
      break;
    case 9:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, Trophy, tft.width(), tft.height(), ST77XX_YELLOW);
      break;
    case 10:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, yoda, tft.width(), tft.height(), ST77XX_GREEN);
      break;
    case 11:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, andrew, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 12:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, Luke, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 13:
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, rebelSpy, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 14: 
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, tatooine, tft.width(), tft.height(), ST77XX_ORANGE);
      break;
    case 15: 
      tft.fillScreen(ST77XX_WHITE);
      tft.drawBitmap(0, 0, fire, tft.width(), tft.height(), ST77XX_RED);
      break;
    case 16: 
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, bobaFett, tft.width(), tft.height(), ST77XX_GREEN);
      break;
    case 17: 
      tft.fillScreen(ST77XX_BLACK);
      tft.drawBitmap(0, 0, deathStar, tft.width(), tft.height(), ST77XX_WHITE);
      break;
    case 18: 
      tft.fillScreen(ST77XX_GREEN);
      tft.drawBitmap(0, 0, bobaShip, tft.width(), tft.height(), ST77XX_BLACK);
      break;
      Serial.println("Invalid image number");
  }
}   

// --------------------------------------------------------------------------------------
//    Ambient Lights
// --------------------------------------------------------------------------------------


// --------------------
//  NeoPixel Functions
// --------------------
// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbow(uint8_t wait) {
  if(pixelInterval != wait)
    pixelInterval = wait;                   
  for(uint16_t i=0; i < N_LEDS; i++) {
    strip.setPixelColor(i, Wheel((i + pixelCycle) & 255)); //  Update delay time  
  }
  strip.show();                             //  Update strip to match
  pixelCycle++;                             //  Advance current cycle
  if(pixelCycle >= 256)
    pixelCycle = 0;                         //  Loop the cycle back to the begining
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}


// Random Twinkling for Startup
void TwinkleRandom(int Count, int SpeedDelay) {
  if ((startupLightDelay + SpeedDelay) < currentTime) {
  
    for (int i = 0; i < Count; i++) {
      // Randomly select a color: 0 for red, 1 for white, 2 for blue
      int color = random(4); 
    
      uint32_t chosenColor;
      if (color == 0) {
        chosenColor = strip.Color(0, 255, 255); // Cyan
      } else if (color == 1) {
        chosenColor = strip.Color(255, 255, 255); // White
      } else if (color == 2) {
        chosenColor = strip.Color(255, 5, 5); // Light Red
      } else {
        chosenColor = strip.Color(255, 165, 0); // Orange
      }
    
      // Set a random LED to the chosen color
      strip.setPixelColor(random(N_LEDS), chosenColor);
      strip.show();
    }
    startupLightDelay = millis(); 
  }
}

void redFire(int Cooling, int Sparking, int SpeedDelay) {
  if ((startupFireDelay + SpeedDelay) < currentTime) {
    Serial.println("Fire");
  static byte heat[N_LEDS];
  int cooldown;
 
  // Step 1.  Cool down every cell a little
  for( int i = 0; i < N_LEDS; i++) {
    cooldown = random(0, ((Cooling * 10) / N_LEDS) + 2);
   
    if(cooldown>heat[i]) {
      heat[i]=0;
    } else {
      heat[i]=heat[i]-cooldown;
    }
  }
 
  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for( int k= N_LEDS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }
   
  // Step 3.  Randomly ignite new 'sparks' near the bottom
  if( random(255) < Sparking ) {
    int y = random(7);
    heat[y] = heat[y] + random(160,255);
    //heat[y] = random(160,255);
  }

  // Step 4.  Convert heat to LED colors
  for( int j = 0; j < N_LEDS; j++) {
    setPixelredHeatColor(j, heat[j] );
  }

  strip.show();
  startupFireDelay = millis();
  }
}

// Red fire
void setPixelredHeatColor (int Pixel, byte temperature) {
  // Scale 'heat' down from 0-255 to 0-191
  byte t192 = round((temperature/255.0)*191);
 
  // calculate ramp up from
  byte heatramp = t192 & 0x3F; // 0..63
  heatramp <<= 2; // scale up to 0..252
 
  // figure out which third of the spectrum we're in:
  if( t192 > 0x80) {                     // hottest
    strip.setPixelColor(Pixel, 255, 255, heatramp);
  } else if( t192 > 0x40 ) {             // middle
    strip.setPixelColor(Pixel, 255, heatramp, 0);
  } else {                               // coolest
    strip.setPixelColor(Pixel, heatramp, 0, 0);
  }
}

void ThrusterEffect(int SpeedDelay) {
  if ((ThrusterTimer + SpeedDelay) < currentTime) {
    for (int i = 0; i < N_LEDS; i++) {
      // Randomly choose intensity for the thruster flicker
      byte flicker = random(100, 255); // Brightness range

      // Randomly mix orange, yellow, and white for the thruster color
      byte red = random(flicker, 255); // Red dominates
      byte green = random(flicker / 2, flicker); // Less green for orange/yellow tint
      byte blue = random(0, flicker / 5); // Minimal blue

      // Set the LED color with the chosen intensity
      strip.setPixelColor(i, red, green, blue);
    }
    strip.show();
    ThrusterTimer = millis();
  }
}

void BlueThrusterEffect(int SpeedDelay) {
  if ((ThrusterTimer + SpeedDelay) < currentTime) {
    for (int i = 0; i < N_LEDS; i++) {
      // Randomly choose intensity for the thruster flicker
      byte flicker = random(100, 255); // Brightness range
  
      // Dominating blue color with hints of orange and white
      byte blue = random(flicker, 255); // Blue dominates
      byte red = random(0, flicker / 2); // Small amount of red for orange highlights
      byte green = random(flicker / 4, flicker / 2); // Slight green for variation
  
      // Occasionally create white sparks
      if (random(0, 10) < 2) { // 20% chance for white flickers
        red = flicker;
        green = flicker;
        blue = flicker;
      }
  
      // Set the LED color with the chosen intensity
      strip.setPixelColor(i, red, green, blue);
    }

    strip.show();
    ThrusterTimer = millis();
  }
}

void RedThrusterEffect(int SpeedDelay) {
  if ((ThrusterTimer + SpeedDelay) < currentTime) {
    for (int i = 0; i < N_LEDS; i++) {
      // Random intensity for flicker
      byte flicker = random(150, 255); // Bright range
  
      // Dominating red with minimal green and blue
      byte red = flicker;
      byte green = random(0, flicker / 8); // Minimal green for faint orange
      byte blue = 0; // No blue for an intense red effect
  
      // Rare white sparks for variety
      if (random(0, 20) == 0) { // 5% chance for white flickers
        red = flicker;
        green = flicker;
        blue = flicker;
      }
  
      // Set the LED color
      strip.setPixelColor(i, red, green, blue);
    }

    strip.show();
    ThrusterTimer = millis();
  }
}
void HyperspaceLEDEffectNew(int SpeedDelay) {
  if ((ThrusterTimer + SpeedDelay) < millis()) {
    for (int i = 0; i < N_LEDS; i++) {
      // Random intensity for shades of blue
      byte flicker = random(100, 255); // Bright blue range

      // Dominating blue with minimal green and no red
      byte red = 0;
      byte green = random(0, flicker / 5); // Slight green for subtle variation
      byte blue = flicker;

      // Rare white streaks for hyperspace effect
      if (random(0, 10) == 0) { // 10% chance for white streaks
        red = flicker;
        green = flicker;
        blue = flicker;
      }

      // Set the LED color
      strip.setPixelColor(i, red, green, blue);
    }

    strip.show();
    ThrusterTimer = millis();
  }
}
void blueFire(int Cooling, int Sparking, int SpeedDelay) {
  if ((blueFireDelay + SpeedDelay) < currentTime) {
  static byte heat[N_LEDS];
  int cooldown;
 
  // Step 1.  Cool down every cell a little
  for( int i = 0; i < N_LEDS; i++) {
    cooldown = random(0, ((Cooling * 10) / N_LEDS) + 2);
   
    if(cooldown>heat[i]) {
      heat[i]=0;
    } else {
      heat[i]=heat[i]-cooldown;
    }
  }
 
  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for( int k= N_LEDS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }
   
  // Step 3.  Randomly ignite new 'sparks' near the bottom
  if( random(255) < Sparking ) {
    int y = random(7);
    heat[y] = heat[y] + random(160,255);
    //heat[y] = random(160,255);
  }

  // Step 4.  Convert heat to LED colors
  for( int j = 0; j < N_LEDS; j++) {
    setPixelblueHeatColor(j, heat[j] );
  }

  strip.show();
  blueFireDelay = millis();
  }
}

void setPixelblueHeatColor (int Pixel, byte temperature) {
  // Scale 'heat' down from 0-255 to 0-191
  byte t192 = round((temperature / 255.0) * 191);
 
  // Calculate ramp up
  byte heatramp = t192 & 0x3F; // 0..63
  heatramp <<= 2; // Scale up to 0..252
 
  // Map heat levels to a blue color spectrum:
  if (t192 > 0x80) {                     // Hottest
    strip.setPixelColor(Pixel, heatramp, heatramp, 255); // Light blue/white
  } else if (t192 > 0x40) {              // Medium heat
    strip.setPixelColor(Pixel, 0, heatramp, 255); // Bright blue
  } else {                               // Coolest
    strip.setPixelColor(Pixel, 0, 0, heatramp); // Dark blue
  }
}


void WhiteThrusterEffect(int SpeedDelay) {
  if ((ThrusterTimer + SpeedDelay) < currentTime) {
  for (int i = 0; i < N_LEDS; i++) {
      // Random intensity for flicker
      byte flicker = random(200, 255); // Bright range for white dominance
  
      // Base white color
      byte red = flicker;
      byte green = flicker;
      byte blue = flicker;
  
      // Add orange accents
      if (random(0, 5) < 2) { // 40% chance for warm orange tint
        green = random(flicker , flicker); // Reduce green for orangish tone
        blue = random(0, flicker / 4);        // Minimize blue to boost orange
      }
  
      // Set the LED color
      strip.setPixelColor(i, red, green, blue);
    }

    strip.show();
    ThrusterTimer = millis();
  }
}

void FullCycleThrusterEffect(int SpeedDelay, int TransitionSteps) {
static unsigned long lastUpdateTime = 0; // Tracks the last time LEDs were updated
  static int phase = 0;                    // Tracks the current phase in the cycle

  // Check if it's time to update
  if (millis() - lastUpdateTime >= SpeedDelay) {
    lastUpdateTime = millis(); // Update the last update time

    // Calculate blend factor for forward and reverse transitions
    float blendFactor;
    if (phase <= TransitionSteps) {
      blendFactor = phase / (float)TransitionSteps; // 0 to 1 (orange to blue)
    } else {
      blendFactor = (2 * TransitionSteps - phase) / (float)TransitionSteps; // 1 to 0 (blue to orange)
    }

    for (int i = 0; i < N_LEDS; i++) {
      // Random flicker intensity
      byte flicker = random(100, 255);

      // Blend red, green, and blue components based on the current phase
      byte red = round((1 - blendFactor) * random(flicker, 255) + 
                        blendFactor * random(0, flicker / 2));
      byte green = round((1 - blendFactor) * random(flicker / 2, flicker) + 
                          blendFactor * random(flicker / 4, flicker / 2));
      byte blue = round((1 - blendFactor) * random(0, flicker / 5) + 
                         blendFactor * random(flicker, 255));

      // Add occasional white sparks near the blue phase
      if (blendFactor > 0.5 && random(0, 10) < 2) { // White sparks
        red = flicker;
        green = flicker;
        blue = flicker;
      }

      strip.setPixelColor(i, red, green, blue);
    }

    strip.show();

    // Increment phase, looping back to 0 at the end
    phase++;
    if (phase > 2 * TransitionSteps) {
      phase = 0;
    }
  }
}

void allLightsOn(){
  for (int i = 0; i <= 9; i++){
        LEDControl.setPWM(i, (1000));
        LEDControl.write();
      }

    for (int i = 18; i <= 24; i++){
        LEDControl.setPWM(i, (1000));
        LEDControl.write();
      }
}

void allLightsOff(){
  for (int i = 0; i <= 9; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }

    for (int i = 18; i <= 24; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }
}

void backOn(){
  LEDControl.setPWM(8, 3500);
  LEDControl.setPWM(9, 3500);
}

void fadeInOutEffect() {
  unsigned long currentMillis = millis();

  // Check if it's time to update the brightness
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Adjust the brightness
    brightness += fadeAmount;

    // Reverse fade direction if limits are reached
    if (brightness == 0 || brightness == 255) {
      fadeAmount = -fadeAmount;
    }

    // Set the brightness for all pixels
    for (int i = 0; i < N_LEDS; i++) {
      strip.setPixelColor(i, strip.Color(brightness, brightness, brightness)); // White light
    }
    strip.show();
  }
}

void fadeGreenEffect() {
  unsigned long currentMillis = millis();

  // Check if it's time to update the brightness
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Adjust the brightness
    brightness += fadeAmount;

    // Reverse fade direction if limits are reached
    if (brightness == 0 || brightness == 255) {
      fadeAmount = -fadeAmount;
    }

    // Set the brightness for all pixels (green only)
    for (int i = 0; i < N_LEDS; i++) {
      strip.setPixelColor(i, strip.Color(0, brightness, 0)); // Green light only
    }
    strip.show();
  }
}




void lightsStartUp(){
  if(((startUpLightsTimer + LightingDelay) < currentTime) && lightsOff){
   for (int i = 0; i <= 9; i++){
        LEDControl.setPWM(i, (1000));
        LEDControl.write();
        
      }

    for (int i = 18; i <= 24; i++){
        LEDControl.setPWM(i, (1000));
        LEDControl.write();
      }
      startUpLightsTimer = millis();
      lightsOff = false;
      lightsOn = true;
  }
    
  if(((startUpLightsTimer + LightingDelay) < currentTime) && lightsOn){
   for (int i = 0; i <= 9; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }

    for (int i = 18; i <= 24; i++){
        LEDControl.setPWM(i, (0));
        LEDControl.write();
      }
    startUpLightsTimer = millis();
    lightsOff = true;
    lightsOn = false;
  }
}

void thrusterFlicker() {

  // Check if it's time to update the flicker
  if (currentTime - lastFlickerTime >= flickerDelay) {
    for (int i = 0; i < 2; i++) {
      int randomBrightness = random(minBrightness, maxBrightness); // Generate a random brightness
      LEDControl.setPWM(thrusterPins[i], randomBrightness);
    }
    LEDControl.write();
    lastFlickerTime = currentTime;
  }
}

void podRacing() {
 unsigned long currentMillis = millis();

  // Check if it's time to update the sand effect
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Simulate waves of sand motion
    for (int i = 0; i < N_LEDS; i++) {
      int sandBrightness = random(100, 255); // Maximum brightness for intense sunlight
      int red = sandBrightness; // Fully utilize red for the brightest orange
      int green = sandBrightness * 0.2; // Dramatically reduce green for a striking tone
      int blue = sandBrightness * 0.02; // Almost no blue for pure vibrancy

      if (i % 5 == 0) {
        // Simulate a sparkling grain of sand occasionally
        strip.setPixelColor(i, strip.Color(red + 50, green + 5, blue));
      } else {
        strip.setPixelColor(i, strip.Color(red, green, blue));
      }
    }

    // Add motion by shifting colors slightly
    strip.show();

    // Create a subtle "flow" effect by shifting pixels
    for (int i = N_LEDS - 1; i > 0; i--) {
      strip.setPixelColor(i, strip.getPixelColor(i - 1));
    }

    // Introduce new random sand grain at the start
    int newSandBrightness = random(200, 255);
    int newRed = newSandBrightness;
    int newGreen = newSandBrightness * 0.2;
    int newBlue = newSandBrightness * 0.02;
    strip.setPixelColor(0, strip.Color(newRed, newGreen, newBlue));
  }
}

void StrobeExplosionEffect(int strobeDelay, int strobeCount, int duration) {
  static int strobePhase = 0;
  static unsigned long previousMillisStrobe = 0;
  static unsigned long startMillis = 0;
  static int brightness = 255;
  static bool fading = false;
  static bool active = false;
  unsigned long currentMillis = millis();

  if (!active) {
    // Start the effect
    startMillis = currentMillis;
    strobePhase = 0;
    brightness = 255;
    fading = false;
    active = true;
  }

  if (currentMillis - startMillis < duration) {
    if (strobePhase < strobeCount * 2) { // Each strobe has an ON and OFF phase
      if (currentMillis - previousMillisStrobe >= strobeDelay) {
        previousMillisStrobe = currentMillis;
        strobePhase++;

        if (strobePhase % 2 == 0) {
          // Turn off LEDs
          for (int i = 0; i < N_LEDS; i++) {
            strip.setPixelColor(i, 0, 0, 0); // Off
          }
        } else {
          // Turn on LEDs to white
          for (int i = 0; i < N_LEDS; i++) {
            strip.setPixelColor(i, 255, 255, 255); // White
          }
        }
        strip.show();
      }
    } else if (!fading) {
      // Start fade-out after strobe
      fading = true;
      previousMillisStrobe = currentMillis; // Reset timer for fade-out
    } else {
      if (currentMillis - previousMillisStrobe >= 30 && brightness > 0) { // Fade step every 30 ms
        previousMillisStrobe = currentMillis;
        brightness -= 5; // Decrease brightness

        for (int i = 0; i < N_LEDS; i++) {
          strip.setPixelColor(i, brightness, brightness, brightness); // Fading white
        }
        strip.show();
      }
    }
  } else {
    // End the effect
    active = false;
    for (int i = 0; i < N_LEDS; i++) {
      strip.setPixelColor(i, 0, 0, 0); // Turn off all LEDs
    }
    strip.show();
  }
}


void engineBoostEffect() {
  unsigned long currentMillis = millis();

  // Check if it's time to update the engine boost effect
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    for (int i = 0; i < N_LEDS; i++) {
      if (i % 3 == 0) {
        // White-hot engine flames
        int white = random(230, 255);
        strip.setPixelColor(i, strip.Color(white, white, white));
      } else if (i % 4 == 0) {
        // Intense blue tones
        int blue = random(180, 255);
        strip.setPixelColor(i, strip.Color(0, 0, blue));
      } else {
        // Vibrant orange sand reflection
        int sandBrightness = random(200, 255);
        int red = sandBrightness;
        int green = sandBrightness * 0.2;
        int blue = sandBrightness * 0.02;
        strip.setPixelColor(i, strip.Color(red, green, blue));
      }
    }

    strip.show();
  }
}
   




void r2d2AmbientLights() {

  unsigned long currentTime = millis();

  // Handle back light fade
  if (currentTime - lastFadeTimeR2 >= fadeIntervalR2) {
    fadeValueR2 += fadeDirectionR2 ? fadeStepR2 : -fadeStepR2; // Adjust brightness
    if (fadeValueR2 >= 1000) fadeDirectionR2 = false; // Start fading out
    if (fadeValueR2 <= 0) fadeDirectionR2 = true;    // Start fading in

    LEDControl.setPWM(backLightPinR2, fadeValueR2); // Adjust back light brightness
    LEDControl.write();
    lastFadeTimeR2 = currentTime;
  }

  // Handle front light "talking" simulation
  if (blinkCountR2 > 0) { // If in a talking burst
    if (currentTime - lastBlinkTimeR2 >= currentBlinkDurationR2) {
      static bool lightOnR2 = false;
      lightOnR2 = !lightOnR2; // Toggle light state
      LEDControl.setPWM(frontLightPinR2, lightOnR2 ? 1000 : 0); // Turn front light on/off
      LEDControl.write();

      if (!lightOnR2) { 
        blinkCountR2--; // Decrease blink count on light off
        currentBlinkDurationR2 = random(minBlinkIntervalR2, maxBlinkIntervalR2); // Randomize next blink duration
      }
      lastBlinkTimeR2 = currentTime;
    }
  } else if (currentTime - lastTalkTimeR2 >= nextTalkPauseR2) {
    // Start a new talking burst
    blinkCountR2 = random(3, 10); // Random number of blinks in a burst
    nextTalkPauseR2 = random(minPauseR2, maxPauseR2); // Random pause for next burst
    lastTalkTimeR2 = currentTime;
  }
}

void headlightFlicker() {
  unsigned long currentTime = millis();

  // Check if it's time to update brightness
  if (currentTime - lastUpdateTime >= flickerUpdateInterval) {
    lastUpdateTime = currentTime;

    // Update brightness for each headlight randomly
    for (int i = 0; i < numHeadlights; i++) {
      int randomBrightness = random(minBrightness, maxHeadlightBrightness);
      LEDControl.setPWM(headlightPins[i], randomBrightness);
    }

    LEDControl.write(); // Commit changes
  }
}

void headlightConstantOn(int brightness) {
  // Constrain the brightness to valid PWM values
  brightness = constrain(brightness, 0, maxHeadlightBrightness);

  // Set all headlight pins to the specified brightness
  for (int i = 0; i < numHeadlights; i++) {
    LEDControl.setPWM(headlightPins[i], brightness);
  }

  LEDControl.write(); // Commit changes
}



void starWarsBattleEffect(int battleInterval, int boltLength) {
  static unsigned long previousMillisBattle = 0;
  unsigned long currentMillis = millis();

  // Check if it's time to create a new blaster bolt
  if (currentMillis - previousMillisBattle >= battleInterval) {
    previousMillisBattle = currentMillis;

    // Turn off all LEDs initially
    for (int i = 0; i < N_LEDS; i++) {
      strip.setPixelColor(i, 0, 0, 0); // Off
    }

    // Add random green blaster bolts
    for (int i = 0; i < 3; i++) { // Six groups of green bolts
      int startBolt = random(N_LEDS - boltLength); // Random starting point for bolt
      for (int j = 0; j < boltLength; j++) {
        strip.setPixelColor(startBolt + j, 0, 255, 0); // Green
      }
    }

    // Add rare red blaster bolts
    if (random(3) == 0) { // 50% chance to add red bolts
      int startBolt = random(N_LEDS - boltLength);
      for (int j = 0; j < boltLength; j++) {
        strip.setPixelColor(startBolt + j, 255, 0, 0); // Red
      }
    }

    strip.show(); // Display the updated strip
  }
}

void starWarsRedOrangeBattleEffect(int battleInterval, int boltLength) {
  static unsigned long previousMillisBattle = 0;
  unsigned long currentMillis = millis();

  // Check if it's time to create a new blaster bolt
  if (currentMillis - previousMillisBattle >= battleInterval) {
    previousMillisBattle = currentMillis;

    // Turn off all LEDs initially
    for (int i = 0; i < N_LEDS; i++) {
      strip.setPixelColor(i, 0, 0, 0); // Off
    }

    // Add random red blaster bolts with dark orange shades
    for (int i = 0; i < 3; i++) { // Three groups of red-orange bolts
      int startBolt = random(N_LEDS - boltLength); // Random starting point for bolt
      uint8_t redShade = random(230, 256); // Shades of red (128 to 255)
      uint8_t orangeTint = random(0, 20); // Dark orange tint (50 to 127)

      for (int j = 0; j < boltLength; j++) {
        strip.setPixelColor(startBolt + j, redShade, orangeTint, 0); // Red with orange tint
      }
    }

    strip.show(); // Display the updated strip
  }
}
void fireGuns() {
  unsigned long currentTime = millis();

  // Check if it's time to toggle the gun LEDs
  if (currentTime - gunTimer >= gunDelay) {
    gunTimer = currentTime;
    gunsFiring = !gunsFiring; // Toggle firing state

    if (gunsFiring) {
      // Turn on the left and right gun LEDs
      LEDControl.setPWM(LEFT_GUN_PIN, 3500);  // Full brightness
      LEDControl.setPWM(RIGHT_GUN_PIN, 3500); // Full brightness
    } else {
      // Turn off the left and right gun LEDs
      LEDControl.setPWM(LEFT_GUN_PIN, 0);
      LEDControl.setPWM(RIGHT_GUN_PIN, 0);
    }

    // Apply changes to the LEDs
    LEDControl.write();
  }
}

//------------------------------------------------------------------------------------
// Servo
//-----------------------------------------------------------------------------------



void moveR2D2(int servoDelay) {
        if ((servoTimer + servoDelay) < currentTime) {
          
            if (servoDir == 1) {
              Serial.println("Moving Up");
              r2Servo.attach(7);
              r2Servo.write(125);
              if (firstTime) {
                servoDetatchTimer1 = millis();
                firstTime = false;
              }
              if ((servoDetatchTimer1 + 250) < currentTime) {
                r2Servo.detach();
                servoDir = servoDir * -1;
                firstTime = true;
                servoTimer = millis();
                return;    
              }
            }

            if (servoDir == -1) {
              Serial.println("Moving Down");
              r2Servo.attach(7);
              r2Servo.write(80);
              if (firstTime) {
                servoDetatchTimer2 = millis();
                firstTime = false;
              }
              if ((servoDetatchTimer2 + 250) < currentTime) {
                r2Servo.detach();
                servoDir = servoDir * -1;
                firstTime = true;
                servoTimer = millis();
                return;    
              }
            }
        }
}



//---------------------------------------------------
// Routine Movement Functions
//----------------------------------------------------

void routineMove() {
  ST->drive(routineForwardSpeed);
  ST->turn(routineTurnSpeed);
  
}

  


//-----------------------------------------------------------------------------------
// Routine Functions
//-----------------------------------------------------------------------------------------

void initializeRoutine() {
        routineMoveFlag = false;
        routineForwardSpeed = DEFAULT_FORWARD;
        routineTurnSpeed = 0;
        ST->turn(0);
        ST->drive(0);
        MP3Trigger.trigger(0);
        startUp = false;
        playNew = false;
        gunBattleFlag = false;
        r2FlagAmbientMove = false;
        forceDown = true;
        backThrusterFlag = false;
        ambientR2Flag = false;
        redFireFlag = false;
        bobaFight = false;
        twinkleFlag = false;
        rainbowFlag = false;
        fullNeoCycleFlag = false;
        headLightFlickerFlag = false;
        ambientFlag = false;
        autoMode = false;
        displayImageAmbient = false;
        blueFireFlag = false;
        hyperSpaceScreen = false;
        fadeWhiteFlag = false;
        headLightFlickerFlag = false;
        podRaceFlag = false;
        fadeGreenFlag = false;
        podRaceFlag = false;
        strobeFlag = false;
        spaceBattleFlag3 = false;
        boostFlag = false;
        allLightsOff();
        strip.fill(strip.Color(0, 0, 0)); // Turn off all LEDs initially
        strip.show(); // Update the strip to apply changes
        spaceBattleFlag = false;

        for (int i = 0; i < numOneScenes; i++)
        activeSceneOneArray[i] = 1;

        for (int j = 0; j < numOneMoveScenes; j++)
        activeSceneOneMovementArray[j] = 1;

        for (int i = 0; i < numTwoScenes; i++)
        activeSceneTwoArray[i] = 1;

        for (int j = 0; j < numTwoMoveScenes; j++)
        activeSceneTwoMovementArray[j] = 1;

        for (int i = 0; i < numThreeScenes; i++)
        activeSceneThreeArray[i] = 1;

        for (int j = 0; j < numThreeMoveScenes; j++)
         activeSceneThreeMovementArray[j] = 1;
}

void enterAmbient() {
        ambientFlag = true;
        playNew = true;
        fullNeoCycleFlag = true;
        backThrusterFlag = true;
        ambientR2Flag = true;
        displayImageAmbient = true;
        headlightConstantOn(3000);
        r2FlagAmbientMove = true;
}


void routineOneController(){
  //--------------------------------------------------------------------------
  
  /// Scene 1 ///
  if ((routineOneTotTimer + routineOneSceneArray[0]) < currentTime){
    if (activeSceneOneArray[0]){
       displayImage(7);
       backThrusterFlag = true;
       headLightOnFlag = true;
       ambientR2Flag = true;
       fadeWhiteFlag = true;
       r2MoveFlag = false;
       forceDown = true;
       activeSceneOneArray[0] = 0;
    }
  }
   if ((routineOneTotTimer + routineOneMovementArray[0]) < currentTime) {
     if (activeSceneOneMovementArray[0]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = -7;
       routineMoveTimer = millis();
       activeSceneOneMovementArray[0] = 0;
     }
   }

  //--------------------------------------------------------------------------
  
  /// We can't take off... ///
  if ((routineOneTotTimer + routineOneSceneArray[1]) < currentTime){
    if (activeSceneOneArray[1]){
       displayImage(4);
       backThrusterFlag = false;
       headLightOnFlag = false;
       allLightsOff();
       ambientR2Flag = true;
       fadeWhiteFlag = false;
       strip.fill(strip.Color(0, 0, 0));
       strip.show();
       
       activeSceneOneArray[1] = 0;
    }
  }
  //Start Turning
  if ((routineOneTotTimer + routineOneMovementArray[1]) < currentTime) {
     if (activeSceneOneMovementArray[1]) {
       ST->drive(0);
       ST->turn(0);
       routineForwardSpeed = DEFAULT_FORWARD * 0.4;
       routineTurnSpeed = DEFAULT_TURN_RIGHT*1.3;
       activeSceneOneMovementArray[1] = 0;
     }
   }

  // Finish Turn
  if ((routineOneTotTimer + routineOneMovementArray[2]) < currentTime) {
     if (activeSceneOneMovementArray[2]) {
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[2] = 0;
     }
   }


  //--------------------------------------------------------------------------
  
  /// Autotakeoff initiated ///
  if ((routineOneTotTimer + routineOneSceneArray[2]) < currentTime){
    if (activeSceneOneArray[2]){
       displayImage(5);
       twinkleFlag = true;
       headLightFlickerFlag = true;
       ambientR2Flag = true;
       activeSceneOneArray[2] = 0;
    }
  }

   //--------------------------------------------------------------------------
  
  /// Ship Takes off ///
  if ((routineOneTotTimer + routineOneSceneArray[3]) < currentTime){
    if (activeSceneOneArray[3]){
       twinkleFlag = false;
       fullNeoCycleFlag = true;
       headLightFlickerFlag = false;
       headLightOnFlag = true;
       backThrusterFlag = true;
       r2Twice = true;
       r2TwiceTimer = millis();
       activeSceneOneArray[3] = 0;
    }
  }


  // straight and turn to face corner
  if ((routineOneTotTimer + routineOneMovementArray[3]) < currentTime) {
     if (activeSceneOneMovementArray[3]) {
       routineForwardSpeed = DEFAULT_FORWARD*1.75;
       routineTurnSpeed = DEFAULT_TURN_RIGHT/2;
       activeSceneOneMovementArray[3] = 0;
     }
   }

   // turning to face corner
   if ((routineOneTotTimer + routineOneMovementArray[4]) < currentTime) {
     if (activeSceneOneMovementArray[4]) {
       routineForwardSpeed = DEFAULT_FORWARD*0.4;
       routineTurnSpeed = DEFAULT_TURN_RIGHT*1.8;
       activeSceneOneMovementArray[4] = 0;
     }
   }
   
   // Go straight for a bit
   if ((routineOneTotTimer + routineOneMovementArray[5]) < currentTime) {
     if (activeSceneOneMovementArray[5]) {
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[5] = 0;
     }
   }

   
  

  //--------------------------------------------------------------------------
  
  /// Darth Vader Enters ///
  if ((routineOneTotTimer + routineOneSceneArray[4]) < currentTime){
    if (activeSceneOneArray[4]){
       Serial.println("In if");
       fullNeoCycleFlag = false;
       displayImage(3);
       strip.fill(strip.Color(255, 0, 0));
       strip.show();
       r2Twice = true;
       activeSceneOneArray[4] = 0;
    }
    
  }

  // Stop in front of Vader
   if ((routineOneTotTimer + routineOneMovementArray[6]) < currentTime) {
     if (activeSceneOneMovementArray[6]) {
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[6] = 0;
     }
   }

  

  //--------------------------------------------------------------------------

  /// Rebel Spy ///
  if ((routineOneTotTimer + routineOneSceneArray[5]) < currentTime){
    if (activeSceneOneArray[5]){
       randomSpy = random(11,14);
       displayImage(randomSpy);
       activeSceneOneArray[5] = 0;
    }
  }

  //--------------------------------------------------------------------------

  /// Fly Away and Space Battle ///
  if ((routineOneTotTimer + routineOneSceneArray[6]) < currentTime){
    if (activeSceneOneArray[6]){
       displayImage(6);
       spaceBattleFlag = true;
       activeSceneOneArray[6] = 0;
    }
  }


  // Shake Right Back
   if ((routineOneTotTimer + routineOneMovementArray[7]) < currentTime) {
     if (activeSceneOneMovementArray[7]) {
       routineForwardSpeed = DEFAULT_BACK*1.5;
       routineTurnSpeed = DEFAULT_TURN_RIGHT/1.5;
       activeSceneOneMovementArray[7] = 0;
     }
   }
   // Shake Left Back
   if ((routineOneTotTimer + routineOneMovementArray[8]) < currentTime) {
     if (activeSceneOneMovementArray[8]) {
       routineForwardSpeed = DEFAULT_BACK*1.5;
       routineTurnSpeed = DEFAULT_TURN_LEFT/1.5;
       activeSceneOneMovementArray[8] = 0;
     }
   }

   // Shake Right Forward
   if ((routineOneTotTimer + routineOneMovementArray[9]) < currentTime) {
     if (activeSceneOneMovementArray[9]) {
       routineForwardSpeed = DEFAULT_FORWARD*1.5;
       routineTurnSpeed = DEFAULT_TURN_RIGHT;
       activeSceneOneMovementArray[9] = 0;
     }
   }

   // Shake Left Forward
   if ((routineOneTotTimer + routineOneMovementArray[10]) < currentTime) {
     if (activeSceneOneMovementArray[10]) {
       routineForwardSpeed = DEFAULT_FORWARD*1.5;
       routineTurnSpeed = DEFAULT_TURN_LEFT;
       activeSceneOneMovementArray[10] = 0;
     }
   }

   // Recenter
   if ((routineOneTotTimer + routineOneMovementArray[11]) < currentTime) {
     if (activeSceneOneMovementArray[11]) {
       r2Twice = true;
       routineForwardSpeed = 0;
       routineTurnSpeed = DEFAULT_TURN_RIGHT/0.75;
       activeSceneOneMovementArray[11] = 0;
     }
   }

  // Back up away from Vader
   if ((routineOneTotTimer + routineOneMovementArray[12]) < currentTime) {
     if (activeSceneOneMovementArray[12]) {
       routineForwardSpeed = DEFAULT_BACK*2.5;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[12] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // Turn slightly to right
   if ((routineOneTotTimer + routineOneMovementArray[13]) < currentTime) {
     if (activeSceneOneMovementArray[13]) {
       routineForwardSpeed = DEFAULT_BACK/4;
       routineTurnSpeed = DEFAULT_TURN_RIGHT;
       activeSceneOneMovementArray[13] = 0;
     }
   }

  // Go in circles in a dogfight for a bit
   if ((routineOneTotTimer + routineOneMovementArray[14]) < currentTime) {
     if (activeSceneOneMovementArray[14]) {
       routineForwardSpeed = DEFAULT_FORWARD*1.5;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.5;
       activeSceneOneMovementArray[14] = 0;
     }
   }


  // Go forwards towards edge of square
   if ((routineOneTotTimer + routineOneMovementArray[15]) < currentTime) {
     if (activeSceneOneMovementArray[15]) {
       routineForwardSpeed = DEFAULT_FORWARD*1.25;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[15] = 0;
     }
   }

  // Go turn to face center
   if ((routineOneTotTimer + routineOneMovementArray[16]) < currentTime) {
     if (activeSceneOneMovementArray[16]) {
       routineForwardSpeed = DEFAULT_FORWARD/2;
       routineTurnSpeed = DEFAULT_TURN_LEFT*2;
       activeSceneOneMovementArray[16] = 0;
     }
   }

  // Go forward in hyperspace
   if ((routineOneTotTimer + routineOneMovementArray[17]) < currentTime) {
     if (activeSceneOneMovementArray[17]) {
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = 0;
       activeSceneOneMovementArray[17] = 0;
       
     }
   }

  /// Jump to HyperSpace ///
  if ((routineOneTotTimer + routineOneSceneArray[7]) < currentTime){
    if (activeSceneOneArray[7]){
       r2Twice = true;
       backFullOnFlag = true;
       LEDControl.setPWM(8, 0);
       LEDControl.setPWM(9, 0);
       backThrusterFlag = false;
       spaceBattleFlag = false;
       hyperSpaceScreen = true;
       tft.initR(INITR_BLACKTAB);  // Initialize the display
       tft.fillScreen(ST7735_BLACK); // Set background to black
       // Initialize streaks with random properties
       for (int i = 0; i < MAX_STREAKS; i++) {
         initializeStreak(i);
       }
       hyperSpaceFuncTimer = millis();
       blueFireFlag = true;
       activeSceneOneArray[7] = 0;
    }
  }


  //--------------------------------------------------------------------------
}
  
void routineTwoController(){

    //--------------------------------------------------------------------------


    //Exiting HyperSpace
    if ((routineTwoTotTimer + routineTwoSceneArray[0]) < currentTime){
     if (activeSceneTwoArray[0]){
       backFullOnFlag = true;
       headLightOnFlag = true;
       ambientR2Flag = true;
       r2MoveFlag = false;
       forceDown = true;
       hyperSpaceScreen = true;
       tft.initR(INITR_BLACKTAB);  // Initialize the display
       tft.fillScreen(ST7735_BLACK); // Set background to black
       //Initialize streaks with random properties
       for (int i = 0; i < MAX_STREAKS; i++) {
         initializeStreak(i);
       }
       hyperSpaceFuncTimer = millis();
       
       blueFireFlag = true;
       activeSceneTwoArray[0] = 0;
    }
  }

  
  // go forward to exit hyperspace
  if ((routineTwoTotTimer + routineTwoMovementArray[0]) < currentTime) {
     if (activeSceneTwoMovementArray[0]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[0] = 0;
     }
   }
   
  //--------------------------------------------------------------------------

  
  // Normal Thruster mode
  if ((routineTwoTotTimer + routineTwoSceneArray[1]) < currentTime){
    if (activeSceneTwoArray[1]){
       backThrusterFlag = true;
       blueFireFlag = false;
       hyperSpaceScreen = false;
       podRaceFlag = true;
       displayImage(14);
       activeSceneTwoArray[1] = 0;
       
    }
  }

  //turn right 
  if ((routineTwoTotTimer + routineTwoMovementArray[1]) < currentTime) {
     if (activeSceneTwoMovementArray[1]) {
       routineForwardSpeed = DEFAULT_FORWARD * 0.5;
       routineTurnSpeed = DEFAULT_TURN_RIGHT*1.25;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[1] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // R2D2 Beep before "Oh...a Podrace..."

  if ((routineTwoTotTimer + routineTwoSceneArray[2]) < currentTime){
    if (activeSceneTwoArray[2]){
       r2Twice = true;
       r2TwiceTimer = millis();
       activeSceneTwoArray[2] = 0;
    }
  }

  //start moving in circles
  if ((routineTwoTotTimer + routineTwoMovementArray[2]) < currentTime) {
     if (activeSceneTwoMovementArray[2]) {
       routineForwardSpeed = DEFAULT_FORWARD*0.75;
       routineTurnSpeed = DEFAULT_TURN_RIGHT;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[2] = 0;
     }
   }

  //--------------------------------------------------------------------------

 // Podrace "always wanted to do this"
 
 if ((routineTwoTotTimer + routineTwoSceneArray[3]) < currentTime){
    if (activeSceneTwoArray[3]){
       routineMove();
       displayImage(8);

       activeSceneTwoArray[3] = 0;
    }
  }
  
   
  //--------------------------------------------------------------------------

  // "Hang on everyone" * CRASH *
  if ((routineTwoTotTimer + routineTwoSceneArray[4]) < currentTime){
    if (activeSceneTwoArray[4]){
       strobeFlag = true;
       strobeTimer = millis();
       activeSceneTwoArray[4] = 0;
    }
  }

  

  
   
  //--------------------------------------------------------------------------

  // R2D2 scream..."You roughian!"
  if ((routineTwoTotTimer + routineTwoSceneArray[5]) < currentTime){
    if (activeSceneTwoArray[5]){
       r2Twice = true;
       r2TwiceTimer = millis();
       //podRaceFlag = false;
       strobeFlag = true;
       strobeTimer = millis();
       activeSceneTwoArray[5] = 0;
    }
  }

  //--------------------------------------------------------------------------

  // Crash after da dum dah dum da dum dah dum
  if ((routineTwoTotTimer + routineTwoSceneArray[6]) < currentTime){
    if (activeSceneTwoArray[6]){
       strobeFlag = true;
       strobeTimer = millis();
       activeSceneTwoArray[6] = 0;
       routineMove();
    }
  }

  //--------------------------------------------------------------------------

  // * Crash * ... "We snagged a podracer"
  if ((routineTwoTotTimer + routineTwoSceneArray[7]) < currentTime){
    if (activeSceneTwoArray[7]){
       strobeFlag = true;
       strobeTimer = millis();
       routineMove();
       activeSceneTwoArray[7] = 0;
    }
  }
  // Start turning before boost
  if ((routineTwoTotTimer + routineTwoMovementArray[3]) < currentTime) {
     if (activeSceneTwoMovementArray[3]) {
       routineForwardSpeed = DEFAULT_FORWARD * 0.2;
       routineTurnSpeed = DEFAULT_TURN_RIGHT*1.9;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[3] = 0;
     }
   }
  //--------------------------------------------------------------------------

  // ... "Which gives us twice the power"
  if ((routineTwoTotTimer + routineTwoSceneArray[8]) < currentTime){
    if (activeSceneTwoArray[8]){
       r2Twice = true;
       r2TwiceTimer = millis();
       podRaceFlag = false;
       redFireFlag = true; 
       activeSceneTwoArray[8] = 0;
    }
  }

  // Boost
  if ((routineTwoTotTimer + routineTwoMovementArray[4]) < currentTime) {
     if (activeSceneTwoMovementArray[4]) {
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[4] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // "We won!"
  if ((routineTwoTotTimer + routineTwoSceneArray[9]) < currentTime){
    if (activeSceneTwoArray[9]){
       displayImage(9);
       activeSceneTwoArray[9] = 0;
    }
  }




  //--------------------------------------------------------------------------

  // Flies away over crowd
  if ((routineTwoTotTimer + routineTwoSceneArray[10]) < currentTime){
    if (activeSceneTwoArray[10]){
       redFireFlag = false; 
       podRaceFlag = false;
       fullNeoCycleFlag = true;
       activeSceneTwoArray[10] = 0;
    }
  }

  // Turns left
  if ((routineTwoTotTimer + routineTwoMovementArray[5]) < currentTime) {
     if (activeSceneTwoMovementArray[5]) {
       routineForwardSpeed = DEFAULT_FORWARD*0.5;
       routineTurnSpeed = DEFAULT_TURN_LEFT*2;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[5] = 0;
     }
   }

  // Goes straight and left
  if ((routineTwoTotTimer + routineTwoMovementArray[6]) < currentTime) {
     if (activeSceneTwoMovementArray[6]) {
       routineForwardSpeed = DEFAULT_FORWARD*0.75;
       routineTurnSpeed = DEFAULT_TURN_LEFT;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[6] = 0;
     }
   }
   


  //--------------------------------------------------------------------------

  // R2D2 chirp ... "What transmission"
  if ((routineTwoTotTimer + routineTwoSceneArray[11]) < currentTime){
    if (activeSceneTwoArray[11]){
       r2Twice = true;
       r2TwiceTimer = millis();
       activeSceneTwoArray[11] = 0;
    }
  }


  
  //--------------------------------------------------------------------------

  // "Yoda, I am..." 
  if ((routineTwoTotTimer + routineTwoSceneArray[12]) < currentTime){
    if (activeSceneTwoArray[12]){
       fullNeoCycleFlag = false;
       fadeGreenFlag = true;
       routineMove();
       displayImage(10);
       activeSceneTwoArray[12] = 0;
    }
  }

  // Turn before transmission
  if ((routineTwoTotTimer + routineTwoMovementArray[7]) < currentTime) {
     if (activeSceneTwoMovementArray[7]) {
       routineForwardSpeed = DEFAULT_BACK*0.5;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.3;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[7] = 0;
     }
   }

  // Stop for yoda
  if ((routineTwoTotTimer + routineTwoMovementArray[8]) < currentTime) {
     if (activeSceneTwoMovementArray[8]) {
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[8] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // "May the force be with you ..." 
  if ((routineTwoTotTimer + routineTwoSceneArray[13]) < currentTime){
    if (activeSceneTwoArray[13]){
       fadeGreenFlag = false;
       fullNeoCycleFlag = true;
       routineMove();
       displayImage(4);
       activeSceneTwoArray[13] = 0;
       
    }
  }

  //--------------------------------------------------------------------------

  // R2D2 beep before hyperspace
  if ((routineTwoTotTimer + routineTwoSceneArray[14]) < currentTime){
    if (activeSceneTwoArray[14]){
       r2Twice = true;
       r2TwiceTimer = millis();
       activeSceneTwoArray[14] = 0;
    }
  }

  // begin moving

  //--------------------------------------------------------------------------

  /// Jump to HyperSpace ///
  if ((routineTwoTotTimer + routineTwoSceneArray[15]) < currentTime) {
    if (activeSceneTwoArray[15]){
       backFullOnFlag = true;
       LEDControl.setPWM(8, 0);
       LEDControl.setPWM(9, 0);
       backThrusterFlag = false;
       fullNeoCycleFlag = false;
       hyperSpaceScreen = true;
       tft.initR(INITR_BLACKTAB);  // Initialize the display
       tft.fillScreen(ST7735_BLACK); // Set background to black
       // Initialize streaks with random properties
       for (int i = 0; i < MAX_STREAKS; i++) {
         initializeStreak(i);
       }
       hyperSpaceFuncTimer = millis();
       blueFireFlag = true;
       activeSceneTwoArray[15] = 0;
    }
  }

  // Jump to lightspeed
   if ((routineTwoTotTimer + routineTwoMovementArray[9]) < currentTime) {
     if (activeSceneTwoMovementArray[9]) {
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneTwoMovementArray[9] = 0;
     }
   }
  
  //--------------------------------------------------------------------------
}

void routineThreeController(){

    //--------------------------------------------------------------------------


    //Exiting HyperSpace
    if ((routineThreeTotTimer + routineThreeSceneArray[0]) < currentTime){
     if (activeSceneThreeArray[0]){
       backFullOnFlag = true;
       headLightOnFlag = true;
       ambientR2Flag = true;
       r2MoveFlag = false;
       forceDown = true;
       hyperSpaceScreen = true;
       tft.initR(INITR_BLACKTAB);  // Initialize the display
       tft.fillScreen(ST7735_BLACK); // Set background to black
       //Initialize streaks with random properties
       for (int i = 0; i < MAX_STREAKS; i++) {
         initializeStreak(i);
       }
       hyperSpaceFuncTimer = millis();
       
       blueFireFlag = true;
       activeSceneThreeArray[0] = 0;
      }
    }

  //--------------------------------------------------------------------------

  // go forward to exit hyperspace
  if ((routineThreeTotTimer + routineThreeMovementArray[0]) < currentTime) {
     if (activeSceneThreeMovementArray[0]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD*1.3;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[0] = 0;
     }
   }
  // Normal Thruster mode "This can't be right..."
  if ((routineThreeTotTimer + routineThreeSceneArray[1]) < currentTime){
    if (activeSceneThreeArray[1]){
       backThrusterFlag = true;
       blueFireFlag = false;
       hyperSpaceScreen = false;
       fullNeoCycleFlag = true;
       tft.fillScreen(ST7735_BLACK); // Set background to black
       activeSceneThreeArray[1] = 0;
    }
  }

  //--------------------------------------------------------------------------
 
  // stop before boba
  if ((routineThreeTotTimer + routineThreeMovementArray[1]) < currentTime) {
     if (activeSceneThreeMovementArray[1]) {
       routineMoveFlag = true;
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[1] = 0;
     }
   }

  // "You can run but you can't hide...""
  if ((routineThreeTotTimer + routineThreeSceneArray[2]) < currentTime){
    if (activeSceneThreeArray[2]){
       displayImage(16);
       activeSceneThreeArray[2] = 0;
    }
  }

  //--------------------------------------------------------------------------

  // Boba starts shooting at ship
  if ((routineThreeTotTimer + routineThreeSceneArray[3]) < currentTime){
    if (activeSceneThreeArray[3]){
       r2Twice = true;
       gunBattleFlag = true;
       fullNeoCycleFlag = false;
       bobaFight = true;
       displayImage(18);
       activeSceneThreeArray[3] = 0;
    }
  }

  // Back away from boba
  if ((routineThreeTotTimer + routineThreeMovementArray[2]) < currentTime) {
     if (activeSceneThreeMovementArray[2]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK*1.4;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[2] = 0;
     }
   }
    


  //--------------------------------------------------------------------------

  // Turn to go in counter clockwise circles
  if ((routineThreeTotTimer + routineThreeMovementArray[3]) < currentTime) {
     if (activeSceneThreeMovementArray[3]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK;
       routineTurnSpeed = DEFAULT_TURN_RIGHT*1.5;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[3] = 0;
     }
   }

   // Move in counter clockwise circles
   if ((routineThreeTotTimer + routineThreeMovementArray[4]) < currentTime) {
     if (activeSceneThreeMovementArray[4]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD*1.2;
       routineTurnSpeed = DEFAULT_TURN_LEFT;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[4] = 0;
     }
   }

   // Turn Left Sharper
   if ((routineThreeTotTimer + routineThreeMovementArray[5]) < currentTime) {
     if (activeSceneThreeMovementArray[5]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD*1.2;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.5;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[5] = 0;
     }
   }

  // Finish turn
   if ((routineThreeTotTimer + routineThreeMovementArray[6]) < currentTime) {
     if (activeSceneThreeMovementArray[6]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.4;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[6] = 0;
     }
   }

   // Go straight
   if ((routineThreeTotTimer + routineThreeMovementArray[7]) < currentTime) {
     if (activeSceneThreeMovementArray[7]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD*0.8;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[7] = 0;
     }
   }

  // Darth Vader "I have you now"
  if ((routineThreeTotTimer + routineThreeSceneArray[4]) < currentTime){
    if (activeSceneThreeArray[4]){
       
        gunBattleFlag = false;
        bobaFight = false;
        spaceBattleFlag3 = true;
        displayImage(3);
        allLightsOff();
        
        headLightOnFlag = true; 
        ambientR2Flag = true;
       activeSceneThreeArray[4] = 0;
    }
  }

  //--------------------------------------------------------------------------

  // Enters death star "I have a bad feeling about this"
  if ((routineThreeTotTimer + routineThreeSceneArray[5]) < currentTime){
    if (activeSceneThreeArray[5]){
       spaceBattleFlag3 = false;// <---- Flashing green flag is false
       
       fullNeoCycleFlag = true;       
       displayImage(17);
       activeSceneThreeArray[5] = 0;
    }
  }

  //--------------------------------------------------------------------------

  // "I'm getting us out of here ..." * R2D2 Chirp *
  if ((routineThreeTotTimer + routineThreeSceneArray[6]) < currentTime){
    if (activeSceneThreeArray[6]){
       r2Twice = true;
       activeSceneThreeArray[6] = 0;
    }
  }
  // Zooming through death star
  if ((routineThreeTotTimer + routineThreeMovementArray[8]) < currentTime) {
     if (activeSceneThreeMovementArray[8]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.2;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[8] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // "Say goodbye, rebel spy"
  if ((routineThreeTotTimer + routineThreeSceneArray[7]) < currentTime){
    if (activeSceneThreeArray[7]){
       displayImage(18);
       activeSceneThreeArray[7] = 0;
    }
  }

  // Stop before sonic bomb
  if ((routineThreeTotTimer + routineThreeMovementArray[9]) < currentTime) {
     if (activeSceneThreeMovementArray[9]) {
       routineMoveFlag = true;
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[9] = 0;
     }
   }

  //--------------------------------------------------------------------------

  // "A sonic bomb" ... * R2D2 Chirp *
  if ((routineThreeTotTimer + routineThreeSceneArray[8]) < currentTime){
    if (activeSceneThreeArray[8]){
       r2Twice = true;
       activeSceneThreeArray[8] = 0;
    }
  }

  //--------------------------------------------------------------------------

  // * BWOOOOOOM *
  if ((routineThreeTotTimer + routineThreeSceneArray[9]) < currentTime){
    if (activeSceneThreeArray[9]){  
       strobeFlag = true;
       strobeTimer = millis();
       displayImage(15);
       activeSceneThreeArray[9] = 0;
    }
  }
  // Move back from sonic bomb //
  // Shake right
  if ((routineThreeTotTimer + routineThreeMovementArray[10]) < currentTime) {
     if (activeSceneThreeMovementArray[10]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK;
       routineTurnSpeed = DEFAULT_TURN_RIGHT;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[10] = 0;
     }
   }

  // Shake left
  if ((routineThreeTotTimer + routineThreeMovementArray[11]) < currentTime) {
     if (activeSceneThreeMovementArray[11]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK;
       routineTurnSpeed = DEFAULT_TURN_LEFT;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[11] = 0;
     }
   }

  // Shake right
  if ((routineThreeTotTimer + routineThreeMovementArray[12]) < currentTime) {
     if (activeSceneThreeMovementArray[12]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK;
       routineTurnSpeed = DEFAULT_TURN_RIGHT;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[12] = 0;
     }
   }

  // Shake left
  if ((routineThreeTotTimer + routineThreeMovementArray[13]) < currentTime) {
     if (activeSceneThreeMovementArray[13]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_BACK;
       routineTurnSpeed = DEFAULT_TURN_LEFT;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[13] = 0;
     }
   }

  // Stop shaking
  if ((routineThreeTotTimer + routineThreeMovementArray[14]) < currentTime) {
     if (activeSceneThreeMovementArray[14]) {
       routineMoveFlag = true;
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[14] = 0;
     }
   }
    
  //--------------------------------------------------------------------------

  // Flies away
  if ((routineThreeTotTimer + routineThreeSceneArray[10]) < currentTime){
    if (activeSceneThreeArray[10]){
       displayImage(1);
       activeSceneThreeArray[10] = 0;
    }
  }

  // Start moving in circles slowly
  if ((routineThreeTotTimer + routineThreeMovementArray[15]) < currentTime) {
     if (activeSceneThreeMovementArray[15]) {
       routineMoveFlag = true;
       routineForwardSpeed = DEFAULT_FORWARD*0.8;
       routineTurnSpeed = DEFAULT_TURN_LEFT*1.5;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[15] = 0;
     }
   }
  //--------------------------------------------------------------------------

  // Lands
  if ((routineThreeTotTimer + routineThreeSceneArray[11]) < currentTime){
    if (activeSceneThreeArray[11]){
       allLightsOff();
       ambientR2Flag = true;
       fullNeoCycleFlag = false; 
       fadeWhiteFlag = true;
       activeSceneThreeArray[11] = 0;
    }
  }

  // Stop moving to land
  if ((routineThreeTotTimer + routineThreeMovementArray[16]) < currentTime) {
     if (activeSceneThreeMovementArray[16]) {
       routineMoveFlag = true;
       routineForwardSpeed = 0;
       routineTurnSpeed = 0;
       routineMoveTimer = millis();
       activeSceneThreeMovementArray[16] = 0;
     }
   }

}



// =======================================================================================
//      YOUR CUSTOM DROID FUNCTIONS SHOULD END HERE
// =======================================================================================

// =======================================================================================
//      CORE DROID CONTROL FUNCTIONS START HERE - EDIT WITH CAUTION
// =======================================================================================
// Read the PS3 Controller and set request state variables
void readPS3Request()
{
     if (!extraRequestInputs) {
      
         if (PS3Controller->getButtonPress(UP))
         {              
                Serial.println("Button: UP Selected");
    
                reqArrowUp = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
                
         }
      
         if (PS3Controller->getButtonPress(DOWN))
         {
                Serial.println("Button: DOWN Selected");
    
                reqArrowDown = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
           
         }
    
         if (PS3Controller->getButtonPress(LEFT))
         {
                Serial.println("Button: LEFT Selected");
    
                reqArrowLeft = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
    
         }
         
         if (PS3Controller->getButtonPress(RIGHT))
         {
                Serial.println("Button: RIGHT Selected");
    
                reqArrowRight = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
                         
         }
         
         if (PS3Controller->getButtonPress(CIRCLE))
         {
                Serial.println("Button: CIRCLE Selected");
    
                reqCircle = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
               
         }
    
         if (PS3Controller->getButtonPress(CROSS))
         {
                Serial.println("Button: CROSS Selected");
    
                reqCross = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
                  
         }
         
         if (PS3Controller->getButtonPress(TRIANGLE))
         {
                Serial.println("Button: TRIANGLE Selected");
    
                reqTriangle = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
                  
         }
         
    
         if (PS3Controller->getButtonPress(SQUARE))
         {
                Serial.println("Button: SQUARE Selected");
    
                reqSquare = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
                  
         }
         
         if (PS3Controller->getButtonPress(L1))
         {
                Serial.println("Button: LEFT 1 Selected");
    
                reqL1 = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(L2))
         {
                Serial.println("Button: LEFT 2 Selected");
    
                reqL2 = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(R1))
         {
                Serial.println("Button: RIGHT 1 Selected");
    
                reqR1 = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(R2))
         {
                Serial.println("Button: RIGHT 2 Selected");
    
                reqR2 = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(SELECT))
         {
                Serial.println("Button: SELECT Selected");
    
                reqSelect = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(START))
         {
                Serial.println("Button: START Selected");
    
                reqStart = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
    
         if (PS3Controller->getButtonPress(PS))
         {
                Serial.println("Button: PS Selected");
    
                reqPS = true;
                reqMade = true;
                
                previousRequestMillis = millis();
                extraRequestInputs = true;
         }
     }

     if (((abs(PS3Controller->getAnalogHat(LeftHatY)-128) > joystickDeadZoneRange) || (abs(PS3Controller->getAnalogHat(LeftHatX)-128) > joystickDeadZoneRange)))
     {    
            reqLeftJoyUp = false;
            reqLeftJoyDown = false;
            reqLeftJoyLeft = false;
            reqLeftJoyRight = false;
            reqLeftJoyYValue = 0;
            reqLeftJoyXValue = 0;
            reqLeftJoyMade = true;

            int currentValueY = PS3Controller->getAnalogHat(LeftHatY) - 128;
            int currentValueX = PS3Controller->getAnalogHat(LeftHatX) - 128;
            
            char yString[5];
            itoa(currentValueY, yString, 10);

            char xString[5];
            itoa(currentValueX, xString, 10);

            Serial.print("LEFT Joystick Y Value: ");
            Serial.println(yString);
            Serial.print("LEFT Joystick X Value: ");
            Serial.println(xString);

            if (currentValueY > joystickDeadZoneRange) {
                Serial.println("Left Joystick DOWN");
                reqLeftJoyDown = true;
                reqLeftJoyYValue = currentValueY;
            }

            if (currentValueY < (-1 * joystickDeadZoneRange)) {
                Serial.println("Left Joystick UP");
                reqLeftJoyUp = true;
                reqLeftJoyYValue = currentValueY;
            }

            if (currentValueX > joystickDeadZoneRange) {
                Serial.println("Left Joystick RIGHT");
                reqLeftJoyRight = true;
                reqLeftJoyXValue = currentValueX;
            }
            
            if (currentValueX < (-1 * joystickDeadZoneRange)) {
                Serial.println("Left Joystick LEFT");
                reqLeftJoyLeft = true;
                reqLeftJoyXValue = currentValueX;
            }
     } else {
          if (reqLeftJoyMade) {
              reqLeftJoyUp = false;
              reqLeftJoyDown = false;
              reqLeftJoyLeft = false;
              reqLeftJoyRight = false;
              reqLeftJoyYValue = 0;
              reqLeftJoyXValue = 0;
              reqLeftJoyMade = false;
          }
     }

     if (((abs(PS3Controller->getAnalogHat(RightHatY)-128) > joystickDeadZoneRange) || (abs(PS3Controller->getAnalogHat(RightHatX)-128) > joystickDeadZoneRange)))
     {
            reqRightJoyUp = false;
            reqRightJoyDown = false;
            reqRightJoyLeft = false;
            reqRightJoyRight = false;
            reqRightJoyYValue = 0;
            reqRightJoyXValue = 0;
            reqRightJoyMade = true;
            
            int currentValueY = PS3Controller->getAnalogHat(RightHatY) - 128;
            int currentValueX = PS3Controller->getAnalogHat(RightHatX) - 128;

            char yString[5];
            itoa(currentValueY, yString, 10);

            char xString[5];
            itoa(currentValueX, xString, 10);

            Serial.print("RIGHT Joystick Y Value: ");
            Serial.println(yString);
            Serial.print("RIGHT Joystick X Value: ");
            Serial.println(xString);

            if (currentValueY > joystickDeadZoneRange) {
                Serial.println("Right Joystick DOWN");
                reqRightJoyDown = true;
                reqRightJoyYValue = currentValueY;
            }

            if (currentValueY < (-1 * joystickDeadZoneRange)) {
                Serial.println("Right Joystick UP");
                reqRightJoyUp = true;
                reqRightJoyYValue = currentValueY;
            }

            if (currentValueX > joystickDeadZoneRange) {
                Serial.println("Right Joystick RIGHT");
                reqRightJoyRight = true;
                reqRightJoyXValue = currentValueX;
            }
            
            if (currentValueX < (-1 * joystickDeadZoneRange)) {
                Serial.println("Right Joystick LEFT");
                reqRightJoyLeft = true;
                reqRightJoyXValue = currentValueX;
            }
     } else {
          if (reqRightJoyMade) {
              reqRightJoyUp = false;
              reqRightJoyDown = false;
              reqRightJoyLeft = false;
              reqRightJoyRight = false;
              reqRightJoyYValue = 0;
              reqRightJoyXValue = 0;
              reqRightJoyMade = false;
          }
     }    
}

// Reset the PS3 request variables on every processing loop when needed
void resetRequestVariables()
{
    reqArrowUp = false;
    reqArrowDown = false;
    reqArrowLeft = false;
    reqArrowRight = false;
    reqCircle = false;
    reqCross = false;
    reqTriangle = false;
    reqSquare = false;
    reqL1 = false;
    reqL2 = false;
    reqR1 = false;
    reqR2 = false;
    reqSelect = false;
    reqStart = false;
    reqPS = false;
}

// Initialize the PS3 Controller Trying to Connect
void onInitPS3Controller()
{
    PS3Controller->setLedOn(LED1);
    isPS3ControllerInitialized = true;
    badPS3Data = 0;

    mainControllerConnected = true;
    WaitingforReconnect = true;

    Serial.println("We have the controller connected");
    Serial.print("Dongle Address: ");
    String dongle_address = String(Btd.my_bdaddr[5], HEX) + ":" + String(Btd.my_bdaddr[4], HEX) + ":" + String(Btd.my_bdaddr[3], HEX) + ":" + String(Btd.my_bdaddr[2], HEX) + ":" + String(Btd.my_bdaddr[1], HEX) + ":" + String(Btd.my_bdaddr[0], HEX);
    Serial.println(dongle_address);
}

// USB Read Function - Supports Main Program Loop
void readUSB()
{
    Usb.Task();    
}
